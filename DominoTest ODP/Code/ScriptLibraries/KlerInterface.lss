'++LotusScript Development Environment:2:5:(Options):0:74
Option Public 
Option Declare

%INCLUDE "lsconst.lss"

Use "KlerXmlClasses"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class Address
Declare Class KlerWrapper
Declare Class KlerCaseRecord
Declare Class KlerKsorRecord
Declare Class KlerPerson
Declare Class KlerVehicle
Declare Class Statute
Declare Class KdotEmsUnit
Declare Public Class Officer
Declare Sub Initialize
Declare Function GetLookupValue(keyword As String) As String
Declare Function CheckAndSanitizeField(targetDocument As NotesDocument, targetFieldName As String) As String
Declare Function GetKlerProgramPath As String
Declare Function SearchList( SList As Variant ,IsFullSearch As Boolean) As String
Declare Function KlerFileDialogAndImport(occurrenceDocument As NotesDocument) As Boolean
Declare Sub ProcessKlerKdot852Record(klerKdot852Document As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerKdot854Record(klerKdot854Document As NotesDocument, occurrenceDocument As NotesDocument)
Declare Function Decode(DataStream As String) As String
Declare Function GetStatuteAndCharge(klerDocument As NotesDocument, klerFieldNumber As String) As Statute
Declare Sub ProcessKlerKdot850BPassenger(klerKdot850BDocument As NotesDocument, occurrenceDocument As NotesDocument, _
passengerNumber As String, emsList List As KdotEmsUnit)
Declare Private Function GetListRemainder() As String
Declare Function InArray(searchArray As Variant, searchString As String) As Boolean
Declare Sub SetUpRmsDocument(rmsDocument As NotesDocument)
Declare Sub RefreshUIDocumentAfterAttach
Declare Function TranslateCounty(countyString As String) As String
Declare Function GetAgencyAddress As Address
Declare Public Function GetDataGroupDocuments(klerFilePath As String) As Variant
Declare Sub ProcessKlerKsorRecord(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub SplitAddress(addressToSplit As String)
Declare Sub ProcessKlerKsosrRecord(klerKsosrDocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerKdot850BRecord(klerKdot850BDocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Function ImportKlerFileToOccurrence(klerFilePath As String, occurrenceDocument As NotesDocument, showPrompts As Boolean) As Boolean
Declare Sub ProcessKlerKdot850BViolation(klerKdot850BDocument As NotesDocument, occurrenceDocument As NotesDocument, _
	violationNumber As String)
Declare Sub ProcessKlerKsarNarrative(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerKsorProperty(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument, propertyNumber As String)
Declare Sub ProcessKlerHP133Record(klerHp133Document As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerCheckbox(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerFieldNumber As String, _
klerFieldName As String, rmsFieldName As String, rmsFieldValue As String)
Declare Sub KlerEditAndImport(occurrenceDocument As NotesDocument)
Declare Function GetKlerFileDialog() As String
Declare Sub ProcessKlerDecimalFields(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerFieldNumber As String, _
	klerKsorFieldMapping List As String)
Declare Sub ProcessKlerDC66Record(klerDC66Document As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerKsorSuspect(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument, _
suspectNumber As String)
Declare Sub ExecuteAndWaitV2(filePath As String)
Declare Function GetOfficerByBadgeNumber(badgeNumber As String) As Officer
Declare Function Encode(DataStream As String) As String
Declare Sub ArrangePropertyDocuments(occurrenceDocument As NotesDocument, showPrompts As Boolean)
Declare Function DoProcessProperty As Boolean
Declare Sub ProcessKlerKsarOther(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument) 
Declare Sub AttachKlerFileToOccurrence(klerFilePath As String, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerKsprProperty(klerKsprDocument As NotesDocument, occurrenceDocument As NotesDocument, propertyNumber As String)
Declare Private Function ParseNumber() As String
Declare Function ProcessKlerCaseRecord(klerCaseDocument As NotesDocument, occurrenceDocument As NotesDocument, showPrompts As Boolean) As Boolean
Declare Sub ProcessAddressFields(targetDocument As NotesDocument)
Declare Sub ProcessDataGroupDocumentsToOccurrence(klerDataGroupDocuments As Variant, occurrenceDocument As NotesDocument, showPrompts As Boolean)
Declare Function GetKlerDatabase() As NotesDatabase
Declare Function FormatPhoneNumber(unformattedPhoneNumber As String)
Declare Function SetPropertyParent(propertyDocument As NotesDocument, occurrenceDocument As NotesDocument) As NotesDocument
Declare Function GetOfficerByName(officerName As String) As Officer
Declare Function GetCaseNumberFromKlerFile(klerFilePath As String) As String
Declare Sub ProcessKlerHP129Record(klerHp129Document As NotesDocument, occurrenceDocument As NotesDocument)
Declare Function CreateGuid As String
Declare Sub ProcessKlerKsarClearance(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument, _
	clearanceFieldNumber As String)
Declare Function KlerCloneCreateEditAndImport(occurrenceDocument As NotesDocument) As Boolean
Declare Function GetClonePersonsAndVehicles As NotesDocument
Declare Sub ExecuteWithoutWait(filePath As String)
Declare Function AliasLookup(key As String) As String
Declare Sub ProcessKlerKdot851Record(klerKdot851Document As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerKsorVictim(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument, _
victimNumber As String)
Declare Sub ProcessKlerDateTimeFields(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerDateFieldName As String, _
klerTimeFieldName As String, rmsDateTimeFieldName As String)
Declare Sub SetKlerDefaultFilePath(klerDefaultFilePath As String)
Declare Function GetKlerSuspectByNumber(occurrenceDocument As NotesDocument, suspectNumber As Integer) As NotesDocument
Declare Sub ProcessKlerFields(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerFieldNumber As String, _
klerKsorFieldMapping List As String)
Declare Sub ProcessKlerKsarVehicle(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ExecuteAndWait(cmdline)
Declare Sub ProcessKlerKdot850ARecord(klerKdot850ADocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Function GetKibrsSubmitDefault() As Boolean
Declare Function GetKlerDefaultFilePath() As String
Declare Sub ProcessKlerKdot854Passenger(klerKdot854Document As NotesDocument, occurrenceDocument As NotesDocument, _
passengerNumber As String, emsList List As KdotEmsUnit)
Declare Sub ProcessKlerVehicleRecord(klerVehicleDocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerKsorOffense(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument, _
	klerKsorFieldNumber As String)
Declare Sub ProcessKlerPersonRecord(klerPersonDocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerKsorRP(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument, rpNumber As String)
Declare Sub ProcessKlerKsarRecord(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Function SanitizeValue(targetValue As String)
Declare Sub ProcessKlerNumericFields(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerFieldNumber As String, _
klerKsorFieldMapping List As String)
Declare Sub AttachKlerFileToOccurrenceOLD(klerFilePath As String)
Declare Sub ProcessKlerKdot850BDriver(klerKdot850BDocument As NotesDocument, occurrenceDocument As NotesDOcument, _
	driverNumber As String, emsList List As KdotEmsUnit)
Declare Function FormatSSN(unformattedSSN As String)
Declare Sub ProcessKlerKdot854Pedestrian(klerKdot854Document As NotesDocument, occurrenceDocument As NotesDocument, _
pedestrianNumber As String, emsList List As KdotEmsUnit)
Declare Sub ProcessKlerKsprRecord(klerKsprDocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerCheckboxMulti(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerFieldNumber As String, _
klerFieldName As String, rmsFieldName As String, rmsFieldValue As String)	
Declare Sub ProcessKlerHp250Record(klerHp250Document As NotesDocument, occurrenceDocument As NotesDocument)
Declare Function GetMatchingPropertyItem(parentDocument As NotesDocument, klerPropertyDocument As NotesDocument, propertyNumber As String) As NotesDocument
Declare Sub ProcessKlerKsarArrestee(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument)
Declare Sub ProcessKlerHp250Property(klerHp250Document As NotesDocument, occurrenceDocument As NotesDocument, propertyNumber As String)
Declare Function GetKlerDefaultField(klerFieldName As String) As String
Declare Function KlerViewOnly(occurrenceDocument As NotesDocument)

'++LotusScript Development Environment:2:5:(Declarations):0:10
Dim oCol List As String
Dim StreetTypeList List As String

' Win32 API for ExecuteAndWait
Const NORMAL_PRIORITY_CLASS = &H20&
Const INFINITE = -1&

Type STARTUPINFO
	cb As Long
	lpReserved As String
	lpDesktop As String
	lpTitle As String
	dwX As Long
	dwY As Long
	dwXSize As Long
	dwYSize As Long
	dwXCountChars As Long
	dwYCountChars As Long
	dwFillAttribute As Long
	dwFlags As Long
	wShowWindow As Integer
	cbReserved2 As Integer
	lpReserved2 As Long
	hStdInput As Long
	hStdOutput As Long
	hStdError As Long
End Type

Const STARTF_USESHOWWINDOW = &H1
'Show Command Constants
Const SW_HIDE = 0
Const SW_SHOWNORMAL = 1
Const SW_NORMAL = 1
Const SW_SHOWMINIMIZED = 2
Const SW_SHOWMAXIMIZED = 3
Const SW_MAXIMIZE = 3
Const SW_SHOWNOACTIVATE = 4
Const SW_SHOW = 5
Const SW_MINIMIZE = 6
Const SW_SHOWMINNOACTIVE = 7
Const SW_SHOWNA = 8
Const SW_RESTORE = 9
Const SW_SHOWDEFAULT = 10
Const SW_MAX = 10

Type PROCESS_INFORMATION
	hProcess As Long
	hThread As Long
	dwProcessID As Long
	dwThreadID As Long
End Type

Declare Function CloseHandle Lib "kernel32" (hObject As Long) As Boolean
Declare Function WaitForSingleObject Lib "kernel32" (Byval hHandle As Long,Byval dwMilliseconds As Long) As Long
Declare Function CreateProcessA Lib "kernel32" (Byval lpApplicationName As Long,Byval lpCommandLine As String, Byval lpProcessAttributes As Long, ByVallpThreadAttributes As Long, Byval bInheritHandles As Long, Byval dwCreationFlags As Long, Byval lpEnvironment As Long, Byval lpCurrentDirectory As Long, lpStartupInfo As STARTUPINFO,lpProcessInformation As PROCESS_INFORMATION) As Long

Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (Byval hKey As Long, Byval lpSubKey As String, Byval ulOptions As Long, Byval samDesired As Long, phkResult As Long) As Long
Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (Byval hKey As Long, Byval lpValueName As String, Byval lpReserved As Long, lpType As Long, Byval lpData As String, lpcbData As Integer) As Long

'-- Constant Definitions for WIN32API
Const HKEY_CLASSES_ROOT = &H80000000
Const HKEY_CURRENT_USER = &H80000001

Const SYNCHRONIZE = &H100000
Const STANDARD_RIGHTS_READ = &H20000
Const KEY_QUERY_VALUE = &H1
Const KEY_CREATE_SUB_KEY = &H4
Const KEY_ENUMERATE_SUB_KEYS = &H8
Const KEY_NOTIFY = &H10
Const KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
Const ERROR_SUCCESS = 0&

Type SHELLEXECUTEINFO
	cbSize As Long
	fMask As Long
	hwnd As Long
	lpVerb As String
	lpFile As String
	lpParameters As String
	lpDirectory As String
	nShow As Long
	hInstApp As Long
	lpIDList As Long
	lpClass As String
	hkeyClass As Long
	dwHotKey As Long
	hIcon As Long
	hProcess As Long
End Type

Declare Function ShellExecuteEx Lib "shell32.dll" Alias "ShellExecuteExA"(lpExecInfo As SHELLEXECUTEINFO) As Long
Declare Function GetActiveWindow Lib "user32.dll" () As Long

Const SEE_MASK_NOCLOSEPROCESS = &H40



Class Address
	
	Public StNumber As String
	Public StNumberSuffix As String
	Public StName As String
	Public StType As String
	Public StPreDirection As String
	Public StPostDirection As String
	Public TownCity As String
	Public Prov As String
	Public PostalCode As String
	
	Sub New(addressString As String, townString As String, stateString As String, zipString As String)
		
		Dim StreetParseList List As String
		Dim StreetDirParseList List As String	
		Dim sAddress As String
		Dim a_Address As Variant
		Dim oDoc As notesdocument
		Dim oLookup As NotesDatabase
		Dim oStreetTypes As NotesView
		Dim oDirectional As NotesView
		Dim controldoc As notesdocument
		Dim controlview As NotesView	
		Dim LookupView As notesview, LookupDoc As notesdocument, LookupCol As NotesDocumentCollection 
		Dim fieldVal As String, fieldKey As String
		Dim sNumber As Variant
		Dim i As Integer
		
		Dim db As notesdatabase
		Dim s As notessession
		
		Set s = New notessession
		Set db = s.CurrentDatabase
		
		With db
			Set oLookup = s.GetDatabase(.Server, _
			Replace(.FilePath,.FileName,"") & "/LOC_LU.nsf")
		End With
		
		If oLookup.IsOpen Then
		'Get list of street types to parse and translate
			Set LookupView = oLookup.GetView("Lookup1")
			Set LookupCol = LookupView.GetAllDocumentsByKey("StreetTypeParseList")
			Set LookupDoc = LookupCol.GetFirstDocument 
			While Not LookupDoc Is Nothing
				Forall LL In LookupDoc.field1
					If Instr(LL,"|")<>0 Then
						fieldVal = Trim(Ucase(Strleft(LL,"|")))
						fieldKey = Trim(Ucase(Strright(LL,"|")))
					Else
						fieldVal = Trim(Ucase(LL))
						fieldKey = Trim(Ucase(LL))
					End If
					StreetParseList(fieldVal) = fieldKey
				End Forall
				Set LookupDoc = LookupCol.GetNextDocument(LookupDoc)
			Wend
			
		'Get list of valid street types
			Set LookupCol = LookupView.GetAllDocumentsByKey("StreetType")
			Set LookupDoc = LookupCol.GetFirstDocument 
			While Not LookupDoc Is Nothing
				Forall LL In LookupDoc.field1
					If Instr(LL,"|")<>0 Then
						fieldVal = Trim(Strleft(LL,"|"))
						fieldKey = Trim(Ucase(Strright(LL,"|")))
					Else
						fieldVal = Trim(LL)
						fieldKey = Trim(Ucase(LL))
					End If
					StreetTypeList(fieldKey) = fieldVal
				End Forall
				Set LookupDoc = LookupCol.GetNextDocument(LookupDoc)
			Wend
			
		'Get list of street Directions to parse and translate
			Set LookupCol = LookupView.GetAllDocumentsByKey("Street Directional")
			Set LookupDoc = LookupCol.GetFirstDocument 
			While Not LookupDoc Is Nothing
				Forall LL In LookupDoc.field1
					If Instr(LL,"|")<>0 Then
						fieldVal = Ucase(Strleft(LL,"|"))
						fieldKey = Ucase(Strright(LL,"|"))
					Else
						fieldVal = Ucase(LL)
						fieldKey = Ucase(LL)
					End If
					StreetDirParseList(fieldVal) = fieldKey
				End Forall
				Set LookupDoc = LookupCol.GetNextDocument(LookupDoc)
			Wend
			
		'Build Full Address to parse
			With Me
				sAddress =Trim(addressString)
				a_Address = Split (sAddress," ")
				Erase oCol
				For i = 0 To Ubound(a_Address)
					If Trim(a_Address(i))<>"" Then
						oCol(Cstr(i)) = a_Address(i)
					End If
				Next
				sNumber = ParseNumber
			'Separte possible Prefix from House Number
				If Not sNumber = "" Then
					If Instr(1,sNumber,":") > 0 Then
						.StNumberSuffix = Mid$(sNumber,Instr(1,sNumber,":")+1)
						.StNumber = Mid$(sNumber,1,Instr(1,sNumber,":")-1)
					Else
						.StNumber = sNumber
					End If
				End If
				'Look for StreetTypes
				.StType = SearchList(StreetParseList,True)
				'Look for PreDirectionals
				.StPreDirection = SearchList(StreetDirParseList,False)
				'Look for Post Directionals
				.StPostDirection = SearchList(StreetDirParseList,True)
				'Take the Remainder and apply it to Street name
				.StName = GetListRemainder
				
				.TownCity = townString
				.Prov = stateString
				.PostalCode = zipString
			End With	
		End If
		
	End Sub
	
	
End Class

Class KlerWrapper
	
	Public CaseRecord As KlerCaseRecord
	Public CaseDocument As NotesDocument
	Public KsorRecord As KlerKsorRecord
	Public Persons() As KlerPerson
	Public Vehicles() As KlerVehicle
	
	Function GetCloneInformation As Boolean
		
		Dim currentSession As NotesSession
		Dim currentDatabase As NotesDatabase
		
		Dim cloneDocument As NotesDocument
		Dim cloneDatabase As NotesDatabase
		
		Dim clonePersonDocument As NotesDocument
		Dim clonePersonArray As Variant
		Dim clonePersonReplicaID As String
		Dim clonePersonUNID As String
		
		Dim cloneVehicleDocument As NotesDocument
		Dim cloneVehicleArray As Variant
		Dim cloneVehicleReplicaID As String
		Dim cloneVehicleUNID As String		
		
		Set currentSession = New NotesSession
		Set currentDatabase = currentSession.CurrentDatabase
		
		' Get document containing list of Persons and Vehicles from RMS to clone.
		Set cloneDocument = GetClonePersonsAndVehicles
		If cloneDocument Is Nothing Then
			GetCloneInformation = False
			Exit Function
		Else
			GetCloneInformation = True
		End If
		
		' Hack: Asking user about KSOR creation during clone dialog.
		If cloneDocument.HasItem("CreateKSOR") Then
			If cloneDocument.CreateKSOR(0) = "Y" Then
				Set KsorRecord = New KlerKsorRecord(CaseDocument)
			End If
		End If 
		
		' Process clone Person documents into KlerPerson objects and store them.
		' clonePersonString contains the person description, database Replica ID and the document's UNID. 
		' The description is separated from the rest by a vertical bar (|).
		' The Replica ID and UNID are separated by a tilde (~).
		Forall clonePersonString In cloneDocument.SelectedPersonCloneValues
			
			If Not clonePersonString = "" Then
				
				clonePersonArray = Split(Right(clonePersonString, Len(clonePersonString) - Instr(clonePersonString,"|")),"~")
				clonePersonReplicaID = Replace(clonePersonArray(0), ":", "")
				clonePersonUNID = clonePersonArray(1)
				
				Set cloneDatabase = New NotesDatabase("", "")
				Call cloneDatabase.OpenByReplicaID(currentDatabase.Server, clonePersonReplicaID)
				
				If cloneDatabase.IsOpen Then
					Set clonePersonDocument = cloneDatabase.GetDocumentByUNID(clonePersonUNID)
					
					If Not Persons(Ubound(Persons)) Is Nothing Then
						Redim Preserve Persons(1 To Ubound(Persons)+1) As KlerPerson
					End If
					Set Persons(Ubound(Persons)) = New KlerPerson(clonePersonDocument)		
					
				End If
				
			End If
			
		End Forall
		
		' Process clone Vehicle documents into KlerVehicle objects and store them.
		' cloneVehicleString contains the vehicle description, database Replica ID and the document's UNID. 
		' The description is separated from the rest by a vertical bar (|).
		' The Replica ID and UNID are separated by a tilde (~).
		Forall cloneVehicleString In cloneDocument.SelectedVehicleCloneValues
			
			If Not cloneVehicleString = "" Then
				
				cloneVehicleArray = Split(Right(cloneVehicleString, Len(cloneVehicleString) - Instr(cloneVehicleString,"|")),"~")
				cloneVehicleReplicaID = Replace(cloneVehicleArray(0), ":", "")
				cloneVehicleUNID = cloneVehicleArray(1)
				
				Set cloneDatabase = New NotesDatabase("", "")
				Call cloneDatabase.OpenByReplicaID(currentDatabase.Server, cloneVehicleReplicaID)
				
				If cloneDatabase.IsOpen Then
					Set cloneVehicleDocument = cloneDatabase.GetDocumentByUNID(cloneVehicleUNID)
					
					If Not Vehicles(Ubound(Vehicles)) Is Nothing Then
						Redim Preserve Vehicles(1 To Ubound(Vehicles)+1) As KlerVehicle
					End If
					Set Vehicles(Ubound(Vehicles)) = New KlerVehicle(cloneVehicleDocument)		
					
				End If
				
			End If
			
		End Forall
		
	End Function
	
	Sub New(rmsOccurrenceDocument As NotesDocument, modify As Boolean)
		
		Dim responseCollection As NotesDocumentCollection
		Dim responseDocument As NotesDocument
		
		Dim subresponseCollection As NotesDocumentCollection
		Dim subresponseDocument As NotesDocument
		
		Redim Persons(1 To 1) As KlerPerson
		Redim Vehicles(1 To 1) As KlerVehicle
				
		Set CaseRecord = New KlerCaseRecord(rmsOccurrenceDocument)
		Set CaseDocument = rmsOccurrenceDocument
		
		Set responseCollection = CaseDocument.Responses
		If responseCollection Is Nothing Then
			Exit Sub
		End If
		Set responseDocument = responseCollection.GetFirstDocument
		While Not responseDocument Is Nothing
			
			If responseDocument.Form(0) = "Person/Property" _
			And Not responseDocument.IsDeleted Then
				
				If Not Persons(UBound(Persons)) Is Nothing Then
					ReDim Preserve Persons(1 To UBound(Persons)+1) As KlerPerson
				End If
				Set Persons(UBound(Persons)) = New KlerPerson(responseDocument)
				If modify Then
					responseDocument.KlerCaseID = CaseRecord.Guid
					responseDocument.KlerGUID = Persons(UBound(Persons)).Guid
					Call responseDocument.Save(False, False)
				End If
				
				Set subresponseCollection = responseDocument.Responses
				Set subresponseDocument = subresponseCollection.GetFirstDocument
				While Not subresponseDocument Is Nothing
					
					If subresponseDocument.Form(0) = "SupplementaryMV" _
					And Not subresponseDocument.IsDeleted Then
						
						If Not Vehicles(UBound(Vehicles)) Is Nothing Then
							ReDim Preserve Vehicles(1 To UBound(Vehicles)+1) As KlerVehicle
						End If
						Set Vehicles(UBound(Vehicles)) = New KlerVehicle(subresponseDocument)
						If modify Then
							subresponseDocument.KlerCaseID = CaseRecord.Guid
							subresponseDocument.KlerGUID = Vehicles(UBound(Vehicles)).Guid
							Call subresponseDocument.Save(False, False)
						End If
						
					End If
					
					Set subresponseDocument = subresponseCollection.GetNextDocument(subresponseDocument)
				Wend
				
			End If
			
			Set responseDocument = responseCollection.GetNextDocument(responseDocument)
		Wend
		
	End Sub
	
	Sub EditXmlFile
		
'		Dim klerProgramPath As String
		Dim klerOutputPath As String
		
		Dim tmpString As String
		
'		klerProgramPath = GetKlerProgramPath()
'		If klerProgramPath = "" Then
'			' error message
'			Exit Sub
'		End If
		
		klerOutputPath = OutputPath()
		If klerOutputPath = "" Then
			' error message
			Exit Sub
		End If
		
		' For unknown reasons, this line makes the function work. Without it, KLER will not open.
		tmpString = CreateXML
		
		ExecuteAndWaitV2({"} & klerOutputPath & {"})
		
	End Sub
	
	Sub ViewXmlFile
		
'		Dim klerProgramPath As String
		Dim klerOutputPath As String
		
		Dim tmpString As String
		
		Dim result As Integer
		
'		klerProgramPath = GetKlerProgramPath()
'		If klerProgramPath = "" Then
'			' error message
'			Exit Sub
'		End If
		
		klerOutputPath = OutputPath()
		If klerOutputPath = "" Then
			' error message
			Exit Sub
		End If
		
		' For unknown reasons, this line makes the function work. Without it, KLER will not open.
		tmpString = CreateXML
		
		ExecuteWithoutWait({"} & klerOutputPath & {"})
		
	End Sub
	
	Sub CreateXmlFile
		
		Dim klerOutputPath As String
		Dim klerOutputFile As Integer
		
		klerOutputPath = OutputPath()
		If klerOutputPath = "" Then
			' error message
			Exit Sub
		End If
		
		klerOutputFile = Freefile()		
		Open klerOutputPath For Output As klerOutputFile
		
		Print #klerOutputFile, CreateXml
		Close klerOutputFile
		
	End Sub
	
	Sub DetachXmlFile
		
		Dim klerOutputPath As String
		Dim klerAttachmentField As NotesRichTextItem
		
		klerOutputPath = OutputPath()
		If klerOutputPath = "" Then
			' error message
			Exit Sub
		End If
		
		' Remove file if it already exists.
		If Dir$(klerOutputPath) <> "" Then
			Kill klerOutputPath
		End If
		
		If Not CaseDocument Is Nothing Then
			
			Set klerAttachmentField = CaseDocument.GetFirstItem("KlerAttachment")
			
			Forall attachmentObject In klerAttachmentField.EmbeddedObjects
				
				Call attachmentObject.ExtractFile(klerOutputPath)
				
				Delete attachmentObject
				
			End Forall
			
			Delete klerAttachmentField
			
		End If
		
	End Sub
	
	Function OutputPath As String
		If Not CaseRecord Is Nothing Then
			OutputPath = Environ("TEMP") & "\" & CaseRecord.OccurrenceNumber & ".kler"
		End If
	End Function
	
	Function CreateXml As String
		
		Dim personString As String
		Dim personCount As Integer
		
		Dim vehicleString As String
		Dim vehicleCount As Integer
		
		' Header
		CreateXml = _
		{<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>} & _
		{<?xfa generator="FF99V250_01"?>} & _
		{<jfxpf:XPF xmlns:jfxpf="http://www.xfa.com/schema/xml-package">} & _
		{<jfxpf:Package>} & _
		{<jfxpf:Resource Location="wrapper">} & _
		{<jfxpf:Link ContentType="application/x-jetform-cft"/>} & _
		{</jfxpf:Resource>} & _
		{<jfxpf:Resource Location="default.xml">} & _
		{<jfxpf:Content ContentType="text/xml" Location="default.xml">} & _
		{<xfa:Data xmlns:xfa="http://www.xfa.com/schema/xfa-data">} & _
		{<xfa:DataGroup>} & _
		{<wrapper GuidVal="} & CreateGuid & {" RmsId="" KlerSrc="K1" RecordId="0">} & _
		{<OWF_ITEMKEY></OWF_ITEMKEY>} & _
		{<REVIEW_ACTION></REVIEW_ACTION>} & _
		{<WRP_CASENUM>} & CaseRecord.OccurrenceNumber & {</WRP_CASENUM>} & _
		{<WRP_BADGENUM>} & CaseRecord.ReportingOfficerBadge & {</WRP_BADGENUM>} & _ 
		{<OVERRIDE_FLAG></OVERRIDE_FLAG>} & _
		{<PDF_VERSION></PDF_VERSION>} & _
		{<VIEWER_MODE></VIEWER_MODE>} & _
		{<REVIEW_ACTIONLIST></REVIEW_ACTIONLIST>} & _
		{<DATA_SOURCE>LEA</DATA_SOURCE>} & _
		{<REPOS_BYPASS_FLAG/>}
		
		' Case
		CreateXml = CreateXml & _
		{<FORMDATA Form="Case" Version="1" Revision="0" UserCaption="" Flags="0">}		
		If Not CaseRecord Is Nothing Then
			CreateXml = CreateXml & CaseRecord.CreateXml
		End If		
		CreateXml = CreateXml & {</FORMDATA>}
		
		' FormData stubs
		CreateXml = CreateXml & _
		{<FORMDATA Form="KDOT_850A" Version="2" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="KDOT_850B" Version="2" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="KDOT_851" Version="1" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="KDOT_852" Version="2" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="KDOT_854" Version="2" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="KDOT_855" Version="1" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="KSAR" Version="2" Revision="0" UserCaption="" Flags="0"/>}
		
		CreateXml = CreateXml & _
		{<FORMDATA Form="KSOR" Version="2" Revision="0" UserCaption="" Flags="0">}
		If Not KsorRecord Is Nothing Then
			CreateXml = CreateXml & KsorRecord.CreateXml
		End If
		CreateXml = CreateXml & {</FORMDATA>}
		
		CreateXml = CreateXml & _
		{<FORMDATA Form="KSOSR" Version="2" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="KSPR" Version="2" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="HP_122" Version="1" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="HP_129" Version="1" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="HP_132" Version="1" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="HP_133" Version="1" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="HP_134" Version="1" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="HP_211" Version="2" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="HP_250" Version="1" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="HP_261" Version="1" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="HP_155" Version="1" Revision="0" UserCaption="" Flags="0"/>} & _
		{<FORMDATA Form="DC_66" Version="1" Revision="0" UserCaption="" Flags="0"/>}
		
		' Person records
		If Not Persons(1) Is Nothing Then
			
			personString = _
			{<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>} & _
			{<?xfa generator="FF99V250_01"?>} &_
			{<jfxpf:XPF xmlns:jfxpf="http://www.xfa.com/schema/xml-package">} & _
			{<jfxpf:Package>} &_
			{<jfxpf:Resource Location="Person_1_0.kfdt">} &_
			{<jfxpf:Link ContentType="application/x-jetform-cft"/>} & _
			{</jfxpf:Resource>} &_
			{<jfxpf:Resource Location="default.xml">} &_
			{<jfxpf:Content ContentType="text/xml" Location="default.xml">} & _
			{<xfa:Data xmlns:xfa="http://www.xfa.com/schema/xfa-data">}
			
			Forall person In Persons
				personCount = personCount + 1
				personString = personString & person.CreateXML(personCount)
			End Forall
			
			personString = personString & _
			{</xfa:Data>} & _
			{</jfxpf:Content>} & _
			{</jfxpf:Resource>} & _
			{</jfxpf:Package>} & _
			{</jfxpf:XPF>}
			
			CreateXml = CreateXml & _
			{<FORMDATA Form="Person" Version="1" Revision="0" UserCaption="" Flags="0">} & _
			Encode(personString) & _
			{</FORMDATA>}
			
		Else
			
			CreateXml = CreateXml & _
			{<FORMDATA Form="Person" Version="1" Revision="0" UserCaption="" Flags="0">} & _
			{</FORMDATA>}
			
		End If
		
		' Vehicle records
		If Not Vehicles(1) Is Nothing Then
			
			vehicleString = _
			{<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>} & _
			{<?xfa generator="FF99V250_01"?>} &_
			{<jfxpf:XPF xmlns:jfxpf="http://www.xfa.com/schema/xml-package">} & _
			{<jfxpf:Package>} &_
			{<jfxpf:Resource Location="Person_1_0.kfdt">} &_
			{<jfxpf:Link ContentType="application/x-jetform-cft"/>} & _
			{</jfxpf:Resource>} &_
			{<jfxpf:Resource Location="default.xml">} &_
			{<jfxpf:Content ContentType="text/xml" Location="default.xml">} & _
			{<xfa:Data xmlns:xfa="http://www.xfa.com/schema/xfa-data">}
			
			Forall vehicle In Vehicles
				vehicleCount = vehicleCount + 1
				vehicleString = vehicleString & vehicle.CreateXML(vehicleCount)
			End Forall
			
			vehicleString = vehicleString & _
			{</xfa:Data>} & _
			{</jfxpf:Content>} & _
			{</jfxpf:Resource>} & _
			{</jfxpf:Package>} & _
			{</jfxpf:XPF>}
			
			CreateXml = CreateXml & _
			{<FORMDATA Form="Vehicle" Version="2" Revision="0" UserCaption="" Flags="0">} & _
			Encode(vehicleString) & _
			{</FORMDATA>}
			
		Else
			
			CreateXml = CreateXml & _
			{<FORMDATA Form="Vehicle" Version="2" Revision="0" UserCaption="" Flags="0">} & _
			{</FORMDATA>}
			
		End If
		
		' Footer	
		CreateXml = CreateXml & _
		{<comments></comments>} & _
		{</wrapper>} & _
		{</xfa:DataGroup>} & _
		{</xfa:Data>} & _
		{</jfxpf:Content>} & _
		{</jfxpf:Resource>} & _
		{</jfxpf:Package>} & _
		{</jfxpf:XPF>}
		
	End Function	
	
End Class



Class KlerCaseRecord
	
	Private Values List As String
	Public OccurrenceNumber As String
	Public ReportingOfficerBadge As String
	Public Guid As String
	
	Sub New(rmsOccurrenceDocument As NotesDocument)
		
		Dim agencyAddress As Address
		Dim officerName As NotesName
		
		Dim currentSession As NotesSession
		
		Set currentSession = New NotesSession
		
		OccurrenceNumber = SanitizeValue(rmsOccurrenceDocument.OccurrenceNumber(0))
		ReportingOfficerBadge = SanitizeValue(rmsOccurrenceDocument.ReportingOfficerBadge(0))
		
		If rmsOccurrenceDocument.HasItem("KLERGUID") Then
			Guid = rmsOccurrenceDocument.KLERGuid(0)
		Else
			Guid = CreateGuid()
		End If
		
		Values("case_num") = SanitizeValue(rmsOccurrenceDocument.OccurrenceNumber(0))
		
		Values("incident_date") = Format(rmsOccurrenceDocument.TimeDateCommitted(0), "mm-dd-yyyy")
		Values("incident_time") = Format(rmsOccurrenceDocument.TimeDateCommitted(0), "hh:nn:ss")
		
		Values("report_date") = Format(rmsOccurrenceDocument.DateReported(0), "mm-dd-yyyy")
		Values("report_time") = Format(rmsOccurrenceDocument.DateReported(0), "hh:nn:ss")
		
		Set officerName = currentSession.CreateName(rmsOccurrenceDocument.ReportingOfficer(0))
		Values("reporting_officer") = officerName.Common
		Values("radio_num") = SanitizeValue(rmsOccurrenceDocument.ReportingOfficerBadge(0))
		'Values("troop") = SanitizeValue(rmsOccurrenceDocument.ReportingOfficerPlatoon(0))
		Values("zone") = SanitizeValue(rmsOccurrenceDocument.ReportingOfficerDistrict(0))
		Values("officer_phone_num") = ""
		
		Values("agency_ori") = SanitizeValue(GetLookupValue("Agency ORI Number"))
		Values("county") = TranslateCounty(GetLookupValue("County"))
		
		Values("agency_name") = SanitizeValue(GetLookupValue("Agency"))
		Set agencyAddress = GetAgencyAddress
		If Not agencyAddress Is Nothing Then
			Values("agency_street_num") = SanitizeValue(agencyAddress.StNumber)
			Values("agency_street_pre_dir") = SanitizeValue(agencyAddress.StPreDirection)
			Values("agency_street_name") = SanitizeValue(agencyAddress.StName)
			Values("agency_street_category") = StrConv(SanitizeValue(agencyAddress.StType), SC_UpperCase)
			Values("agency_street_post_dir") = SanitizeValue(agencyAddress.StPostDirection)
			Values("agency_city") = SanitizeValue(agencyAddress.TownCity)
			Values("agency_state") = SanitizeValue(agencyAddress.Prov)
			Values("agency_zip") = SanitizeValue(agencyAddress.PostalCode)
		End If
		
		Values("agency_struct_num") = ""
		Values("agency_street_occ_code") = ""
		Values("agency_street_occ_num") = ""
		Values("agency_contact_info_accident") = ""
		Values("agency_phone_contact_info") = ""
		Values("agency_phone_num") = ""
		Values("agency_web_url") = ""
		
		Values("court_name") = GetKlerDefaultField("court_name")
		Values("court_information") = GetKlerDefaultField("court_information")
		
		Values("court_street_num") = GetKlerDefaultField("court_street_num")
		Values("court_struct_num") = GetKlerDefaultField("court_struct_num")
		Values("court_street_pre_dir") = GetKlerDefaultField("court_street_pre_dir")
		Values("court_street_name") = GetKlerDefaultField("court_street_name")
		Values("court_street_category") = GetKlerDefaultField("court_street_category")
		Values("court_street_post_dir") = GetKlerDefaultField("court_street_post_dir")
		Values("court_street_occ_code") = GetKlerDefaultField("court_street_occ_code")
		Values("court_street_occ_num") = GetKlerDefaultField("court_street_occ_num")
		Values("court_city") = GetKlerDefaultField("court_city")
		Values("court_zip") = GetKlerDefaultField("court_zip")
		Values("court_state") = GetKlerDefaultField("court_state")
		
		Values("court_phone") = GetKlerDefaultField("court_phone")
		Values("court_web_url") = GetKlerDefaultField("court_web_url")
		Values("court_phone_contact_info") = GetKlerDefaultField("court_phone_contact_info")
		
		Values("court_mailing_name") = GetKlerDefaultField("court_mailing_name")
		Values("court_mailing_info") = GetKlerDefaultField("court_mailing_info")
		Values("court_mailing_phone") = GetKlerDefaultField("court_mailing_phone")
		Values("court_mailing_phone_contact_info") = GetKlerDefaultField("court_mailing_phone_contact_info")
		Values("court_mailing_street_num") = GetKlerDefaultField("court_mailing_street_num")
		Values("court_mailing_struct_num") = GetKlerDefaultField("court_mailing_struct_num")
		Values("court_mailing_street_pre_dir") = GetKlerDefaultField("court_mailing_street_pre_dir")
		Values("court_mailing_street_name") = GetKlerDefaultField("court_mailing_street_name")
		Values("court_mailing_street_category") = GetKlerDefaultField("court_street_category")
		Values("court_mailing_street_post_dir") = GetKlerDefaultField("court_street_post_dir")
		Values("court_mailing_street_occ_code") = GetKlerDefaultField("court_street_occ_code")
		Values("court_mailing_street_occ_num") = GetKlerDefaultField("court_street_occ_num")
		Values("court_mailing_city") = GetKlerDefaultField("court_mailing_city")
		Values("court_mailing_zip") = GetKlerDefaultField("court_mailing_zip")
		Values("court_mailing_state") = GetKlerDefaultField("court_mailing_state")
		
		Values("arrest_date") = ""
		Values("arrest_time") = ""
		Values("accident_date") = ""
		Values("accident_time") = ""
		
	End Sub
	
	Function CreateXml As String
		
		CreateXml = _
		{<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>} & _
		{<?xfa generator="FF99V250_01"?>} &_
		{<jfxpf:XPF xmlns:jfxpf="http://www.xfa.com/schema/xml-package">} & _
		{<jfxpf:Package>} &_
		{<jfxpf:Resource Location="Case_1_0">} & _
		{<jfxpf:Link ContentType="application/x-jetform-cft"/>} & _
		{</jfxpf:Resource>} &_
		{<jfxpf:Resource Location="default.xml">} &_
		{<jfxpf:Content ContentType="text/xml" Location="default.xml">} & _
		{<xfa:Data xmlns:xfa="http://www.xfa.com/schema/xfa-data">} & _
		{<xfa:DataGroup>} & Chr(10) & _
		{<Case GuidVal="} & Guid & {" RmsId="" KlerSrc="K1" RecordId="1">} & Chr(10) & _
		{<?jetform ^Dat ^page Page1?>}
		
		Forall value In Values
			
			CreateXml = CreateXml & "<" & Listtag(value) & ">" & value & "</" & Listtag(value) & ">"
			
		End Forall		
		
		CreateXml = CreateXml & _
		{</Case>} & _
		{</xfa:DataGroup>} & _
		{</xfa:Data>} & _
		{</jfxpf:Content>} & _
		{</jfxpf:Resource>} & _
		{</jfxpf:Package>} & _
		{</jfxpf:XPF>}
		
		CreateXml = Encode(CreateXml)
		
	End Function
	
End Class

Class KlerKsorRecord
	
	Private Values List As String
	
	Sub New(rmsOccurrenceDocument As NotesDocument)
		
		Dim officerName As NotesName
		
		Dim currentSession As NotesSession
		
		Set currentSession = New NotesSession
		
		Values("case_num") = rmsOccurrenceDocument.OccurrenceNumber(0)
		
		Values("date_started") = Format(rmsOccurrenceDocument.TimeDateCommitted(0), "mm-dd-yyyy")
		Values("time_started") = Format(rmsOccurrenceDocument.TimeDateCommitted(0), "hh:nn:ss")
		
		Values("date_ended") = Format(rmsOccurrenceDocument.TimeDateTo(0), "mm-dd-yyyy")
		Values("time_ended") = Format(rmsOccurrenceDocument.TimeDateTo(0), "hh:nn:ss")
		
		Values("locn_offense_street_num") = CheckAndSanitizeField(rmsOccurrenceDocument, "StNumber")
		Values("locn_offense_street_pre_dir") = CheckAndSanitizeField(rmsOccurrenceDocument, "StPreDirection")
		Values("locn_offense_street_name") = CheckAndSanitizeField(rmsOccurrenceDocument, "StName")
		Values("locn_offense_street_category") = StrConv(CheckAndSanitizeField(rmsOccurrenceDocument, "StType"), SC_UpperCase)
		Values("locn_offense_street_post_dir") = CheckAndSanitizeField(rmsOccurrenceDocument, "StPostDirection")
		Values("locn_offense_street_occ_code") = CheckAndSanitizeField(rmsOccurrenceDocument, "BuildingUnitType")
		Values("locn_offense_street_occ_num") = CheckAndSanitizeField(rmsOccurrenceDocument, "BuildingUnitIdentifier")
		Values("locn_offense_city") = CheckAndSanitizeField(rmsOccurrenceDocument, "TownCity")
		Values("locn_offense_state") = CheckAndSanitizeField(rmsOccurrenceDocument, "Prov")
		Values("locn_offense_zip") = CheckAndSanitizeField(rmsOccurrenceDocument, "PostalCode")
		
		Values("report_area") = CheckAndSanitizeField(rmsOccurrenceDocument, "PatrolArea")
				
		Values("rep_officer_badge") = CheckAndSanitizeField(rmsOccurrenceDocument, "ReportingOfficerBadge")
		Values("report_date") = Format(rmsOccurrenceDocument.DateReported(0), "mm-dd-yyyy")
		
		Set officerName = currentSession.CreateName(rmsOccurrenceDocument.ReportingOfficer(0))
		Values("rep_officer_name") = officerName.Common
		
		' DateTimeDispatched
		' DateTimeOnScene
		' DateTimeCleared
		Values("time_reported") = Format(rmsOccurrenceDocument.DateReported(0), "hh:nn:ss")
		Values("time_arrived") = Format(rmsOccurrenceDocument.KIBRS_ArrTime(0), "hh:nn:ss")
		Values("time_cleared") = Format(rmsOccurrenceDocument.KIBRS_ClrTime(0), "hh:nn:ss")
		
	End Sub
	
	Function CreateXml As String
		
		CreateXml = _
		{<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>} & _
		{<?xfa generator="FF99V250_01"?>} &_
		{<jfxpf:XPF xmlns:jfxpf="http://www.xfa.com/schema/xml-package">} & _
		{<jfxpf:Package>} &_
		{<jfxpf:Resource Location="KSOR_1_0">} & _
		{<jfxpf:Link ContentType="application/x-jetform-cft"/>} & _
		{</jfxpf:Resource>} &_
		{<jfxpf:Resource Location="default.xml">} &_
		{<jfxpf:Content ContentType="text/xml" Location="default.xml">} & _
		{<xfa:Data xmlns:xfa="http://www.xfa.com/schema/xfa-data">} & _
		{<xfa:DataGroup>} & Chr(10) & _
		{<KSOR GuidVal="} & CreateGuid & {" RmsId="" KlerSrc="K1" RecordId="0">} & Chr(10) & _
		{<?jetform ^Dat ^page Page1?>}
		
		Forall value In Values
			
			CreateXml = CreateXml & "<" & Listtag(value) & ">" & value & "</" & Listtag(value) & ">"
			
		End Forall		
		
		CreateXml = CreateXml & _
		{</KSOR>} & _
		{</xfa:DataGroup>} & _
		{</xfa:Data>} & _
		{</jfxpf:Content>} & _
		{</jfxpf:Resource>} & _
		{</jfxpf:Package>} & _
		{</jfxpf:XPF>}
		
		CreateXml = Encode(CreateXml)
		
	End Function
	
End Class

Class KlerPerson
	
	Private Values List As String
	Private RmsId As String
	Public Guid As String
	
	Sub New(rmsPersonDocument As NotesDocument)
		
		RmsId = rmsPersonDocument.ParentDatabase.ReplicaID & {~} & rmsPersonDocument.UniversalID
		If rmsPersonDocument.HasItem("KLERGUID") Then
			Guid = rmsPersonDocument.KLERGuid(0)
		Else
			Guid = CreateGuid()
		End If
		
		If rmsPersonDocument.HasItem("CompanyName") Then
			If rmsPersonDocument.CompanyName(0) <> "" Then
				Values("last_name") = CheckAndSanitizeField(rmsPersonDocument, "CompanyName")
			Else
				Values("last_name") = CheckAndSanitizeField(rmsPersonDocument, "Surname")
				Values("first_name") = CheckAndSanitizeField(rmsPersonDocument, "Given1")
				Values("middle_name") = CheckAndSanitizeField(rmsPersonDocument, "Given2")
			End If
		Else
			Values("last_name") = CheckAndSanitizeField(rmsPersonDocument, "Surname")
			Values("first_name") = CheckAndSanitizeField(rmsPersonDocument, "Given1")
			Values("middle_name") = CheckAndSanitizeField(rmsPersonDocument, "Given2")
		End If		
		
		Values("home_phone") = CheckAndSanitizeField(rmsPersonDocument, "HomePhone")
		
		If rmsPersonDocument.HasItem("CompanyPhone") Then
			If rmsPersonDocument.CompanyPhone(0) <> "" Then
				Values("work_phone") = CheckAndSanitizeField(rmsPersonDocument, "CompanyPhone")
			Else
				Values("work_phone") = CheckAndSanitizeField(rmsPersonDocument, "BusinessPhone")
			End If
		Else
			Values("work_phone") = CheckAndSanitizeField(rmsPersonDocument, "BusinessPhone")
		End If
		
		Values("dob") = Format(rmsPersonDocument.DOB(0), "mm-dd-yyyy")
		
		Values("home_street_num") = CheckAndSanitizeField(rmsPersonDocument, "StNumber")
		Values("home_street_occ_code") = CheckAndSanitizeField(rmsPersonDocument, "BuildingUnitType")
		Values("home_street_occ_num") = CheckAndSanitizeField(rmsPersonDocument, "BuildingUnitIdentifier")
		Values("home_street_pre_dir") = CheckAndSanitizeField(rmsPersonDocument, "StPreDirection")
		Values("home_street_name") = CheckAndSanitizeField(rmsPersonDocument, "StName")
		Values("home_street_category") = StrConv(CheckAndSanitizeField(rmsPersonDocument, "StType"), SC_UpperCase)
		Values("home_street_post_dir") = CheckAndSanitizeField(rmsPersonDocument, "StPostDirection")
		Values("home_city") = CheckAndSanitizeField(rmsPersonDocument, "TownCity")
		Values("home_state") = CheckAndSanitizeField(rmsPersonDocument, "Prov")
		Values("home_zip") = CheckAndSanitizeField(rmsPersonDocument, "PostalCode")
		
		Values("race") = CheckAndSanitizeField(rmsPersonDocument, "Race")
		
		Dim sexString As String
		sexString = Left(CheckAndSanitizeField(rmsPersonDocument, "Sex"), 1)
		If sexString = "M" Or sexString = "F" Or sexString = "U" then
			Values("sex") = sexString
		End if
		
		Values("ethnicity") = CheckAndSanitizeField(rmsPersonDocument, "Ethnicity")
		
		Dim aliasCount As Integer
		Forall aliasname In rmsPersonDocument.Alias
			aliasCount = aliasCount + 1
			If aliasCount <= 4 Then
				Values("alias" & Cstr(aliasCount)) = SanitizeValue(aliasname)
			End If
		End Forall
		
		Values("dri_license_num") = CheckAndSanitizeField(rmsPersonDocument, "DLNumber")
		Values("dri_license_state") = CheckAndSanitizeField(rmsPersonDocument, "DLIssuedBy")
		Values("dri_license_class") = CheckAndSanitizeField(rmsPersonDocument, "DLClass")
		Values("ssn") = CheckAndSanitizeField(rmsPersonDocument, "SIN")
		Values("employer") = CheckAndSanitizeField(rmsPersonDocument, "Employer")
		
		If rmsPersonDocument.CommercialDL(0) = "Commercial DL" Then
			Values("cdl_cbox") = "Y"
		End If
		
		If rmsPersonDocument.HasItem("CompanyEmail") Then
			If rmsPersonDocument.CompanyEmail(0) <> "" Then
				Values("email_address") = CheckAndSanitizeField(rmsPersonDocument, "CompanyEmail")
			Else
				Values("email_address") = CheckAndSanitizeField(rmsPersonDocument, "Email")
			End If
		Else
			Values("email_address") = CheckAndSanitizeField(rmsPersonDocument, "Email")	
		End If
		
		Values("other_phone") = CheckAndSanitizeField(rmsPersonDocument, "CellPhone")
		
'		Values("scars1") = CheckAndSanitizeField(rmsPersonDocument, "MarksScarsTatoosFeatures")
'		Values("tattoos1") = CheckAndSanitizeField(rmsPersonDocument, "Tattoos")
		Values("hair_color") = CheckAndSanitizeField(rmsPersonDocument, "HairColour")
'		Values("hair_length") = CheckAndSanitizeField(rmsPersonDocument, "HairLength")
		Values("hair_style") = CheckAndSanitizeField(rmsPersonDocument, "HairStyle")
		
		Dim facialHairString As String
		facialHairString = CheckAndSanitizeField(rmsPersonDocument, "FacialHair")
		If Left(facialHairString, 1) = "B" _
		Or Left(facialHairString, 1) = "G" _
		Or Left(facialHairString, 1) = "M" _
		Or Left(facialHairString, 1) = "S" _
		Or Left(facialHairString, 1) = "U" _
		Or Left(facialHairString, 1) = "X" Then
			Values("facial_hair") = facialHairString
		End If
'		Values("complexion") = CheckAndSanitizeField(rmsPersonDocument, "Complexion")
'		Values("eye_appearance") = CheckAndSanitizeField(rmsPersonDocument, "EyeAppearance")
		Values("eyes") = CheckAndSanitizeField(rmsPersonDocument, "EyeColour")
		Values("teeth") = CheckAndSanitizeField(rmsPersonDocument, "Teeth")
		
		Dim rightLeftHandedString As String
		rightLeftHandedString = Left(CheckAndSanitizeField(rmsPersonDocument, "RLHanded"), 1)
		If rightLeftHandedString = "R" Or rightLeftHandedString = "L" Then
			Values("right_left_handed") = rightLeftHandedString
		End If
		
		Values("speech") = CheckAndSanitizeField(rmsPersonDocument, "Speech")
'		Values("build") = CheckAndSanitizeField(rmsPersonDocument, "Build")
		Values("appearance") = CheckAndSanitizeField(rmsPersonDocument, "ArresteeAppearance")
		Values("arrestee_wore") = Left(CheckAndSanitizeField(rmsPersonDocument, "ArresteeClothing"), 20)		
		
		If rmsPersonDocument.HasItem("ResidentIndicator") Then
			If rmsPersonDocument.ResidentIndicator(0) = "Resident" Then
				Values("residency") = "R"
			Elseif rmsPersonDocument.ResidentIndicator(0) = "Non-Resident" Then
				Values("residency") = "N"
			End If
		End If
		
		If rmsPersonDocument.HasItem("Height") Then
			If Isnumeric(rmsPersonDocument.Height(0)) Then
				Values("height") = Cstr(rmsPersonDocument.Height(0))
			End If
		End If
		If rmsPersonDocument.HasItem("Weight") Then
			If Isnumeric(rmsPersonDocument.Height(0)) Then
				Values("weight") = Cstr(rmsPersonDocument.Weight(0))
			End If
		End If		
		
	End Sub
	
	Function CreateXml(recordId As Integer) As String
		
		CreateXML = {<xfa:DataGroup>} & _
		{<Person GuidVal="} & Guid & {" RmsId="} & RmsId & _
		{" KlerSrc="K1" RecordId="} & Cstr(recordId) & {">} & _
		{<?jetform ^Dat ^page Page1?>}
		
		Forall value In Values
			
			CreateXml = CreateXml & "<" & Listtag(value) & ">" & value & "</" & Listtag(value) & ">"
			
		End Forall
		
		CreateXml = CreateXml & _
		{</Person>} & _
		{</xfa:DataGroup>}
		
	End Function
	
End Class

Class KlerVehicle
	
	Private Values List As String
	Public Guid As String
	
	Sub New(rmsVehicleDocument As NotesDocument)
		
		If rmsVehicleDocument.HasItem("KLERGUID") Then
			Guid = rmsVehicleDocument.KLERGuid(0)
		Else
			Guid = CreateGuid()
		End If
		'
		Values("vehicle_year") = CheckAndSanitizeField(rmsVehicleDocument, "ModelYr")
		Values("vehicle_make") = CheckAndSanitizeField(rmsVehicleDocument, "VMake")
		Values("vehicle_model") = CheckAndSanitizeField(rmsVehicleDocument, "VModel")
		Values("body_style") = CheckAndSanitizeField(rmsVehicleDocument, "Style")
		Values("vehicle_color") = CheckAndSanitizeField(rmsVehicleDocument, "Colour")
		Values("mc_ccs") = Cstr(rmsVehicleDocument.EngineDisp(0))
		Values("vin_number") = CheckAndSanitizeField(rmsVehicleDocument, "VINNum")
		Values("insurance_company") = CheckAndSanitizeField(rmsVehicleDocument, "InsuranceComp")
		Values("removed_by") = ""
		Values("key_location") = CheckAndSanitizeField(rmsVehicleDocument, "KeyLocation")
		Values("odometer") = Cstr(rmsVehicleDocument.Odometer(0))
		Values("lic_plate_year") = CheckAndSanitizeField(rmsVehicleDocument, "LicYear")
		Values("lic_plate_state") = CheckAndSanitizeField(rmsVehicleDocument, "ProvState")
		Values("policy_number") = CheckAndSanitizeField(rmsVehicleDocument, "InsPolNum")
		Values("condition") = CheckAndSanitizeField(rmsVehicleDocument, "VehCond")
		Values("vehicle_location") = CheckAndSanitizeField(rmsVehicleDocument, "VehStored")
		Values("vehicle_fire_cbox") = ""
		Values("traffic_unit_num") = ""
		Values("lic_plate_num") = CheckAndSanitizeField(rmsVehicleDocument, "LicNum")
		Values("lic_plate_county") = ""
		Values("total_occupants") = ""
		Values("direction_of_travel") = ""
		
	End Sub
	
	Function CreateXml(recordId As Integer) As String
		
		CreateXML = {<xfa:DataGroup>} & _
		{<Vehicle GuidVal="} & Guid & {" RmsId="" KlerSrc="K1" RecordId="} & Cstr(recordId) & {">} & _
		{<?jetform ^Dat ^page Page1?>}
		
		Forall value In Values
			
			CreateXml = CreateXml & "<" & Listtag(value) & ">" & value & "</" & Listtag(value) & ">"
			
		End Forall
		
		CreateXml = CreateXml & _
		{</Vehicle>} & _
		{</xfa:DataGroup>}
		
		CreateXml = CreateXml
		
	End Function
	
End Class

Class Statute
	
	Public statute As String
	Public charge As String
	Public chapter As String
	Public section As String
	Public sub1 As String
	Public sub2 As String
	Public sub3 As String
	Public sub4 As String
	Public offenseCode As String
	
End Class 

Class KdotEmsUnit
	
	Public transportUnit As String
	Public takenBy As String
	Public takenTo As String
	Public notified As String
	Public arrived As String
	Public hospital As String
	
End Class

Public Class Officer
	Public Name As String
	Public Badge As String
	Public District As String	
	Public Platoon As String	
	Public Rank As String
End Class
'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
%REM	
	On Error Goto ErrorHandle
	
	Dim currentWorkspace As NotesUIWorkspace
	Dim currentDocument As NotesUIDocument
	
	Dim confirmationBoolean As Boolean
	
	Dim klerFilePath As String
	
	' Get handle to current workspace document.
	Set currentWorkspace = New NotesUIWorkspace
	Set currentDocument = currentWorkspace.CurrentDocument
	
	' Prompt if user will be overwriting previous KLER import data.
'	If currentDocument.Document.HasItem("KLERGUID") Then
'		
'		confirmationBoolean = Cbool(currentWorkspace.Prompt(PROMPT_YESNO, "Confirm Import", _
'		"This Occurrence already has KLER data imported. Do you wish to proceed with the import and overwrite all KLER fields?"))
'		
'		If Not confirmationBoolean Then
'			Exit Sub
'		End If
'		
'	End If
	
	' Get handle to file by prompting user with file dialog.
	Dim klerAttachmentRichTextItem As NotesRichTextItem
'	Dim klerAttachmentObject As NotesEmbeddedObject
	
	Set klerAttachmentRichTextItem = currentDocument.Document.GetFirstItem("KlerAttachment")
	Forall klerAttachmentObject In klerAttachmentRichTextItem.EmbeddedObjects
		
		klerFilePath = Environ("TEMP") & klerAttachmentObject.Name
		Call klerAttachmentObject.ExtractFile(klerFilePath)
		
	End Forall
	
'	klerFilePath = "C:\Temp\" & klerAttachmentObject.Name
	If klerFilePath = "" Then
		Exit Sub
	End If
	
	' Remove existing KLER file attachment from Occurrence document, and attach the imported document.
'	Call AttachKlerFileToOccurrence(klerFilePath, currentDocument)
	
	' Get handle to reopened document and perform KLER import.
	Set currentDocument = currentWorkspace.CurrentDocument
	Call ImportKlerFileToOccurrence(klerFilePath, currentDocument.Document)
	
	Exit Sub
	
ErrorHandle:
	
	If Err = 208 Then	' Cannot create automation object.
		Messagebox "You must have the KLER software installed on the workstation to use the KLER Import feature." & Chr(10) & _
		"Please install the KLER software and try again.", MB_OK, "Error"
	Else
		Messagebox Err & " - " & Error & Chr(13) & _
		|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl), MB_OK, "Error"
	End If
	
	Exit Sub
%END REM
End Sub


'++LotusScript Development Environment:2:1:GetLookupValue:1:8
Function GetLookupValue(keyword As String) As String
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim controlDocument As NotesDocument
	Dim controlView As NotesView
	
	Dim databaseFilePath As String
	
	Dim lookupDatabase As NotesDatabase
	Dim lookupView As NotesView
	Dim lookupDocument As NotesDocument
	
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	Set controlView = currentDatabase.GetView("(Control)")
	Set controlDocument = controlView.GetFirstDocument
	If Not controlDocument Is Nothing Then
		If Instr(controlDocument.LUPath(0),"\") <> 0 Then
			'Path provided in file name
			databaseFilePath = controlDocument.LUPath(0)
		Else
			'no path provided, so append path of current database
			databaseFilePath = Strleftback(currentDatabase.FilePath,"\") + "\" + controlDocument.LUPath(0)
		End If
		Set lookupDatabase = New NotesDatabase("", "")
		lookupDatabase.Open currentDatabase.Server, databaseFilePath
		If lookupDatabase.IsOpen Then
			Set lookupView = lookupDatabase.GetView("DatabaseLU")
			Set lookupDocument = lookupView.GetDocumentByKey(controlDocument.LUName(0) + keyword,True)
			If Not lookupDocument Is Nothing Then
				GetLookupValue = lookupDocument.Field1(0)
			End If
		End If
	End If
	
End Function

'++LotusScript Development Environment:2:1:CheckAndSanitizeField:1:8
Function CheckAndSanitizeField(targetDocument As NotesDocument, targetFieldName As String) As String
	
	Dim targetItem As NotesItem
	
	If targetDocument.HasItem(targetFieldName) Then
		Set targetItem = targetDocument.GetFirstItem(targetFieldName)
	End If
	
	If Not targetItem Is Nothing Then
		
		CheckAndSanitizeField = targetItem.Values(0)
		
		CheckAndSanitizeField = SanitizeValue(CheckAndSanitizeField)
		
	End If
	
End Function

'++LotusScript Development Environment:2:1:GetKlerProgramPath:1:8
Function GetKlerProgramPath As String
	
	Dim keyHandle As Long
	Dim returnType As Long
	Dim lpReturnedString As String*127
	Dim returnSize As Integer
	
	returnSize = 126
	
	If RegOpenKeyEx(HKEY_CLASSES_ROOT, "KLER Filler\shell\Open\command", 0, _
	KEY_READ, keyHandle) = ERROR_SUCCESS Then
		
		If RegQueryValueEx(keyHandle, "", 0, returnType, lpReturnedString, _
		returnSize) = ERROR_SUCCESS Then
			
			GetKlerProgramPath = Left$(lpReturnedString, returnSize-1)
			GetKlerProgramPath = Replace(GetKlerProgramPath, {"}, {})
			GetKlerProgramPath = Left(GetKlerProgramPath, InStr(GetKlerProgramPath, ".exe") + 3) 
			
		End If
		
	End If
	
End Function

'++LotusScript Development Environment:2:1:SearchList:1:8
Function SearchList( SList As Variant ,IsFullSearch As Boolean) As String
	
	If IsFullSearch Then
		Forall Items In oCol
			If Iselement(SList(Ucase(Replace(Items,".","")))) Then
				SearchList = SList(Ucase(Replace(Items,".","")))
				Erase items
				Exit Function
			End If
			If Trim(Items) = "" Then
				Erase items
				Exit Function
			End If
		End Forall
	Else
		Forall Items In oCol
			If Iselement(SList(Ucase(Replace(Items,".","")))) Then
				SearchList = SList(Ucase(Replace(Items,".","")))
				Erase items
				Exit Function	
			End If
			Exit Forall	
		End Forall
	End If
	
End Function

'++LotusScript Development Environment:2:1:KlerFileDialogAndImport:1:8
Function KlerFileDialogAndImport(occurrenceDocument As NotesDocument) As Boolean
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	Dim currentWorkspace As NotesUIWorkspace
	
	Dim klerWrapper As KlerWrapper
	
	Dim defaultKlerFilePath As String
	Dim klerFilePath As Variant
	
	' Get handle to current databse.
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	Set currentWorkspace = New NotesUIWorkspace
	
	defaultKlerFilePath = GetKlerDefaultFilePath()
	
	klerFilePath = currentWorkspace.OpenFileDialog(False, "Select KLER File", "KLER Data Files|*.kler", defaultKlerFilePath)
	If Isempty(klerFilePath) Then
		Exit Function
	End If
	
	Call SetKlerDefaultFilePath(Strleftback(klerFilePath(0), "\"))
	
	' Create new KLER wrapper object based on Occurrence document.
	Set klerWrapper = New KlerWrapper(occurrenceDocument, True)

	' Attach KLER file.
	Call AttachKlerFileToOccurrence(klerFilePath(0), klerWrapper.CaseDocument)
	
	' Import KLER file.
	Call ImportKlerFileToOccurrence(klerFilePath(0), klerWrapper.CaseDocument, True)
	
	' Save occurrence document.
	Call occurrenceDocument.Save(False, False)
	
	' Return True for success.
	KlerFileDialogAndImport = True
	
End Function


'++LotusScript Development Environment:2:2:ProcessKlerKdot852Record:1:8
Sub ProcessKlerKdot852Record(klerKdot852Document As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim klerKdot852FieldMapping List As String
	Dim klerKdot852Field As NotesItem
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	Dim driverDocument As NotesDocument
	Dim ownerDocument As NotesDocument
	Dim heavyVehiclePersonDocument As NotesDocument
	Dim heavyVehiclePersonField As NotesItem
	
	Dim permitString As String
	
	Dim evaluateTemp As Variant
	
	Dim i As Integer
	
	' Exit if there is no traffic unit number.
	Set klerKdot852Field = klerKdot852Document.GetFirstItem("traf_unit_nbr")
	If Not klerKdot852Field Is Nothing Then
		If klerKdot852Field.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Find existing Driver or Owner document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKdot852Document.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Person/Property" _
		And Not rmsDocument.IsDeleted Then
			Set klerKdot852Field = klerKdot852Document.GetFirstItem("traf_unit_nbr")
			If IsNumeric(klerKdot852Field.Values(0)) Then
				If rmsDocument.KDOT_Unit(0) = CStr(CInt(klerKdot852Field.Values(0))) Then
					If rmsDocument.KDOT_Role(0) = "Driver" Then
						Set driverDocument = rmsDocument
					Else
						Set ownerDocument = rmsDocument
					End If
				End If
			Else
				If rmsDocument.KDOT_Unit(0) = klerKdot852Field.Values(0) Then
					If rmsDocument.KDOT_Role(0) = "Driver" Then
						Set driverDocument = rmsDocument
					Else
						Set ownerDocument = rmsDocument
					End If
				End If
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	If Not driverDocument Is Nothing Then
		Set heavyVehiclePersonDocument = driverDocument
	ElseIf Not ownerDocument Is Nothing Then
		Set heavyVehiclePersonDocument = ownerDocument
	Else
		Exit Sub
	End If
	
	' Regular fields
	klerKdot852FieldMapping("carrier_name") = "KDOT_Carrier"
	klerKdot852FieldMapping("carrier_city") = "KDOT_CarrierCity"
	klerKdot852FieldMapping("carrier_state") = "KDOT_CarrierState"
	klerKdot852FieldMapping("carrier_country") = "KDOT_CarrierCountry"
	klerKdot852FieldMapping("carrier_zip") = "KDOT_CarrierZIP"
	klerKdot852FieldMapping("carrier_phone") = "KDOT_CarrierPhone"
	klerKdot852FieldMapping("carrier_type") = "KDOT_CarrierType"
	klerKdot852FieldMapping("usdot_nbr") = "KDOT_USDOT"
	klerKdot852FieldMapping("icc_mc_nbr") = "KDOT_ICCMC"
	klerKdot852FieldMapping("in_trans_code") = "KDOT_HeavyVehicleAction"
	klerKdot852FieldMapping("in_trans_code_other") = "KDOT_HeavyVehicleActionOther"
	klerKdot852FieldMapping("gvwr_code") = "KDOT_GVWR"
	klerKdot852FieldMapping("total_gvw") = "KDOT_GrossWeight"
	klerKdot852FieldMapping("source_name") = "KDOT_NameSource"
	klerKdot852FieldMapping("trk_trailer_01_width") = "KDOT_TrailerWidth1"
	klerKdot852FieldMapping("trk_trailer_01_length") = "KDOT_TrailerLength1"
	klerKdot852FieldMapping("trk_trailer_02_width") = "KDOT_TrailerWidth2"
	klerKdot852FieldMapping("trk_trailer_02_length") = "KDOT_TrailerLength2"
	klerKdot852FieldMapping("trk_trailer_03_width") = "KDOT_TrailerWidth3"
	klerKdot852FieldMapping("trk_trailer_03_length") = "KDOT_TrailerLength3"
	klerKdot852FieldMapping("hazmat_plac_flag") = "KDOT_HazPlacard"
	klerKdot852FieldMapping("hazmat_id") = "KDOT_HazMaterialID"
	klerKdot852FieldMapping("hazmat_class") = "KDOT_HazClass"
	klerKdot852FieldMapping("hazmat_spill") = "KDOT_HazSpill"
	klerKdot852FieldMapping("trk_id_01_nbr") = "KDOT_TrailerID1"
	klerKdot852FieldMapping("trk_id_02_nbr") = "KDOT_TrailerID2"
	klerKdot852FieldMapping("trk_id_03_nbr") = "KDOT_TrailerID3"
	klerKdot852FieldMapping("on_road_lane_type") = "KDOT_LaneType"
	klerKdot852FieldMapping("access_control") = "KDOT_AccessControl"
	klerKdot852FieldMapping("veh_config") = "KDOT_Configuration"
	klerKdot852FieldMapping("veh_config_other") = "KDOT_ConfigurationOther"
	klerKdot852FieldMapping("cab_type") = "KDOT_Cab"
	klerKdot852FieldMapping("cargo_body_type") = "KDOT_CargoBody"
	klerKdot852FieldMapping("cargo_body_type_other") = "KDOT_CargoBodyOther"
	klerKdot852FieldMapping("post_crash_inspect") = "KDOT_PostCrash"
	klerKdot852FieldMapping("cargo_type") = "KDOT_CargoType"
	klerKdot852FieldMapping("cargo_type_other") = "KDOT_CargoTypeOther"
	Call ProcessKlerFields(klerKdot852Document, heavyVehiclePersonDocument, "", klerKdot852FieldMapping)
	
	' Numeric fields
	Erase klerKdot852FieldMapping
	klerKdot852FieldMapping("hazmat_wgt") = "KDOT_HazWeight"
	klerKdot852FieldMapping("total_length") = "KDOT_TotLength"
	klerKdot852FieldMapping("nbr_trailers") = "KDOT_Trailers"
	klerKdot852FieldMapping("nbr_axles") = "KDOT_Axles"
	Call ProcessKlerNumericFields(klerKdot852Document, heavyVehiclePersonDocument, "", klerKdot852FieldMapping)
	
	' Carrier Address
	evaluateTemp = Evaluate( _
	|StreetNumber := carrier_street_num;| & _
	|Street := @Trim(carrier_street_pre_dir + " " + carrier_street_name +  " " + carrier_street_category + " " + carrier_street_post_dir);| & _
	|LocDisplay := carrier_struct_num;| & _
	|@Implode(@Trim(@Implode(@Trim(StreetNumber:Street);" "):LocDisplay);" ")|, _
	klerKdot852Document)
	Set heavyVehiclePersonField = New NotesItem(heavyVehiclePersonDocument, "KDOT_CarrierAddress", evaluateTemp(0))
	heavyVehiclePersonField.IsSummary = True
	
	' Permits (Issuer and Permit Number)
	For i = 1 To 3
		permitString = ""
		Set klerKdot852Field = klerKdot852Document.GetFirstItem("trks_permit_0" & Cstr(i) & "_issuer")
		If Not klerKdot852Field Is Nothing Then
			permitString = klerKdot852Field.Values(0)
		End If
		Set klerKdot852Field = klerKdot852Document.GetFirstItem("trks_permit_0" & Cstr(i) & "_nbr")
		If Not klerKdot852Field Is Nothing Then
			permitString = Trim(permitString & " " & klerKdot852Field.Values(0))
		End If
		Set heavyVehiclePersonField = New NotesItem(heavyVehiclePersonDocument, "KDOT_Permit" & Cstr(i), permitString)
		heavyVehiclePersonField.IsSummary = True
	Next
	
	' Trailers Damaged
	Call heavyVehiclePersonDocument.RemoveItem("KDOT_TrailersDamaged")
	Call ProcessKlerCheckboxMulti(klerKdot852Document, heavyVehiclePersonDocument, "", "trk_trailer_none_damage", "KDOT_TrailersDamaged", "00")
	Call ProcessKlerCheckboxMulti(klerKdot852Document, heavyVehiclePersonDocument, "", "trk_trailer_01_damage", "KDOT_TrailersDamaged", "01")
	Call ProcessKlerCheckboxMulti(klerKdot852Document, heavyVehiclePersonDocument, "", "trk_trailer_02_damage", "KDOT_TrailersDamaged", "02")
	Call ProcessKlerCheckboxMulti(klerKdot852Document, heavyVehiclePersonDocument, "", "trk_trailer_03_damage", "KDOT_TrailersDamaged", "03")
	
	' Oversized Load
	Call heavyVehiclePersonDocument.RemoveItem("KDOT_Oversized")
	Call ProcessKlerCheckboxMulti(klerKdot852Document, heavyVehiclePersonDocument, "", "oversized_ht", "KDOT_Oversized", "Height")
	Call ProcessKlerCheckboxMulti(klerKdot852Document, heavyVehiclePersonDocument, "", "oversized_wt", "KDOT_Oversized", "Weight")
	Call ProcessKlerCheckboxMulti(klerKdot852Document, heavyVehiclePersonDocument, "", "oversized_width", "KDOT_Oversized", "Width")
	
	' Save Person document
	Call heavyVehiclePersonDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKdot854Record:1:8
Sub ProcessKlerKdot854Record(klerKdot854Document As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim emsList List As KdotEmsUnit
	Dim emsData As KdotEmsUnit	
	
	Dim klerKdot854Field As NotesItem
	
	Dim i As Integer
	
	' Passenger EMS information
	For i = 1 To 4
		
		Set emsData = New KdotEmsUnit
		
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("occup_ems_notified" & Cstr(i))
		If Not klerKdot854Field Is Nothing Then
			emsData.notified = klerKdot854Field.Values(0)
		End If
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("occup_ems_arrived" & Cstr(i))
		If Not klerKdot854Field Is Nothing Then
			emsData.arrived = klerKdot854Field.Values(0)
		End If		
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("occup_ems_hospital" & Cstr(i))
		If Not klerKdot854Field Is Nothing Then
			emsData.hospital = klerKdot854Field.Values(0)
		End If
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("occup_injured_taken_by" & Cstr(i))
		If Not klerKdot854Field Is Nothing Then
			emsData.takenBy = klerKdot854Field.Values(0)
		End If
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("occup_injured_taken_to" & Cstr(i))
		If Not klerKdot854Field Is Nothing Then
			emsData.takenTo = klerKdot854Field.Values(0)
		End If
		
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("occup_trans_unit" & Cstr(16+i))
		If Not klerKdot854Field Is Nothing Then
			emsData.transportUnit = klerKdot854Field.Values(0)
			If klerKdot854Field.Values(0) <> "" Then
				Set emsList(klerKdot854Field.Values(0)) = emsData
			End If
		End If
	Next
	
	' Process all Passenger information.
	For i = 1 To 16
		Call ProcessKlerKdot854Passenger(klerKdot854Document, occurrenceDocument, Cstr(i), emsList)
	Next
	
	' Pedestrian EMS information
	For i = 1 To 2
		
		Set emsData = New KdotEmsUnit
		
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("ped_ems_notified" & Cstr(i))
		If Not klerKdot854Field Is Nothing Then
			emsData.notified = klerKdot854Field.Values(0)
		End If
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("ped_ems_arrived" & Cstr(i))
		If Not klerKdot854Field Is Nothing Then
			emsData.arrived = klerKdot854Field.Values(0)
		End If		
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("ped_ems_hospital" & Cstr(i))
		If Not klerKdot854Field Is Nothing Then
			emsData.hospital = klerKdot854Field.Values(0)
		End If
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("ped_injured_taken_by" & Cstr(i))
		If Not klerKdot854Field Is Nothing Then
			emsData.takenBy = klerKdot854Field.Values(0)
		End If
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("ped_injured_taken_to" & Cstr(i))
		If Not klerKdot854Field Is Nothing Then
			emsData.takenTo = klerKdot854Field.Values(0)
		End If
		
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("ped_trans_unit" & Cstr(2+i))
		If Not klerKdot854Field Is Nothing Then
			emsData.transportUnit = klerKdot854Field.Values(0)
			If klerKdot854Field.Values(0) <> "" Then
				Set emsList(klerKdot854Field.Values(0)) = emsData
			End If
		End If
	Next
	
	' Process all Pedestrian information.
	For i = 1 To 2
		Call ProcessKlerKdot854Pedestrian(klerKdot854Document, occurrenceDocument, Cstr(i), emsList)
	Next
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:Decode:1:8
Function Decode(DataStream As String) As String
	Dim oUtility
	Set oUtility = CreateObject("KlerUtility.KlerData")
	Decode = oUtility.DecodeBuffer(DataStream)
	Set oUtility = Nothing
End Function

'++LotusScript Development Environment:2:1:GetStatuteAndCharge:1:8
Function GetStatuteAndCharge(klerDocument As NotesDocument, klerFieldNumber As String) As Statute
	
	On Error GoTo ErrorHandle 
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim controlView As NotesView
	Dim controlDocument As NotesDocument
	
	Dim klerField As NotesItem
	
	Dim statuteDatabase As NotesDatabase
	Dim statuteView As NotesView
	Dim statuteDocumentCollection As NotesDocumentCollection
	Dim statuteDocument As NotesDocument
	
	Dim statuteViewType As String
	Dim statuteViewString As String
	
	' Get handle to current database.
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	' Get handle to control document.
	Set controlView = currentDatabase.GetView("(Control)")
	Set controlDocument = controlView.GetFirstDocument
	If controlDocument Is Nothing Then
		Exit Function
	End If
	
	' Get handle to statute database.
	Set statuteDatabase = currentSession.GetDatabase(currentDatabase.Server, _
	Replace(currentDatabase.FilePath, currentDatabase.FileName, "") & controlDocument.CandSReplID(0))
	If Not statuteDatabase.IsOpen Then
		Exit Function
	End If
	
	' Determine whether statute is Attempted, Conspiracy or Soliciation.
	Set klerField = klerDocument.GetFirstItem("attempted_cbox" & klerFieldNumber)
	If Not klerField Is Nothing Then
		If klerField.Values(0) = "Y" Then
			statuteViewType = "A"
		End If
	End If
	Set klerField = klerDocument.GetFirstItem("conspiracy_cbox" & klerFieldNumber)
	If Not klerField Is Nothing Then
		If klerField.Values(0) = "Y" Then
			statuteViewType = "C"
		End If
	End If
	Set klerField = klerDocument.GetFirstItem("solicitation_cbox" & klerFieldNumber)
	If Not klerField Is Nothing Then
		If klerField.Values(0) = "Y" Then
			statuteViewType = "S"
		End If
	End If
	
	' Get handle to statute view.
	If statuteViewType <> "" Then
		statuteViewString = "Tables\Charge Picklist" & " " & statuteViewType
	Else
		statuteViewString = "Tables\Charge Picklist"
	End If
	Set statuteView = statuteDatabase.GetView(statuteViewString)
	If statuteView Is Nothing Then
		Exit Function
	End If
	
	Dim statuteNumber As String
	
	Dim klerDescriptionField As NotesItem
	Dim isFelony As Boolean
	Dim isMisdemeanor As Boolean
	Set klerDescriptionField = klerDocument.GetFirstItem("description" & klerFieldNumber)
	If Not klerDescriptionField Is Nothing Then
		If InStr(UCase(klerDescriptionField.Values(0)), "FELONY") <> 0 Then
			isFelony = True
		ElseIf InStr(UCase(klerDescriptionField.Values(0)), "MISDEMEANOR") <> 0 Then
			isMisdemeanor = True
		End If
	End If
		
	' Search for matching statute number.
	Set klerField = klerDocument.GetFirstItem("statute_num" & klerFieldNumber)
	If Not klerField Is Nothing Then
		statuteNumber = klerField.Values(0)
		statuteNumber = CStr(CInt(Left(statuteNumber, InStr(statuteNumber,"-")-1))) & Right(statuteNumber, Len(statuteNumber) - InStr(statuteNumber, "-") + 1) & " "
		statuteNumber = Replace(statuteNumber, "-0", "-")
		Set statuteDocumentCollection = statuteView.GetAllDocumentsByKey(statuteNumber, False)
		If statuteDocumentCollection.Count = 0 Then
			Exit Function
		End If
	Else
		Exit Function
	End If
	
	Dim tmpStatuteDocument As NotesDocument
	Set tmpStatuteDocument = statuteDocumentCollection.GetFirstDocument
	While Not tmpStatuteDocument Is Nothing And statuteDocument Is Nothing
		
		If isFelony Then
			If InStr(UCase(tmpStatuteDocument.Shortword(0)), "FELONY") <> 0 Then
				Set statuteDocument = tmpStatuteDocument
			End If
		ElseIf isMisdemeanor Then
			If InStr(UCase(tmpStatuteDocument.Shortword(0)), "MISDEMEANOR") <> 0 Then
				Set statuteDocument = tmpStatuteDocument
			End If
		Else
			If InStr(UCase(tmpStatuteDocument.Shortword(0)), "FELONY") = 0 _ 
			And InStr(UCase(tmpStatuteDocument.Shortword(0)), "MISDEMEANOR") = 0 Then
				Set statuteDocument = tmpStatuteDocument
			End If
		End If
		
		Set tmpStatuteDocument = statuteDocumentCollection.GetNextDocument(tmpStatuteDocument)
	Wend
	If statuteDocument Is Nothing Then
		Set statuteDocument = statuteDocumentCollection.GetFirstDocument
	End If
	
	' Return Statute and Charge fields.
	Set GetStatuteAndCharge = New Statute
	GetStatuteAndCharge.Statute = statuteDocument.Statute(0)
	GetStatuteAndCharge.Charge = statuteDocument.Shortword(0) + ": " + statuteDocument.Type(0)
	GetStatuteAndCharge.Chapter = statuteDocument.Stchp(0)
	GetStatuteAndCharge.Section = statuteDocument.Stsec(0)
	GetStatuteAndCharge.Sub1 = statuteDocument.Stsub1(0)
	GetStatuteAndCharge.Sub2 = statuteDocument.Stsub2(0)
	GetStatuteAndCharge.Sub3 = statuteDocument.Stsub3(0)
	GetStatuteAndCharge.Sub4 = statuteDocument.Stsub4(0)
	GetStatuteAndCharge.OffenseCode = statuteDocument.StiBrc(0)
	
	Exit Function
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & CStr( GetThreadInfo(1) ) & |, Line: | & CStr(Erl)
	
	Exit Function
	
End Function

'++LotusScript Development Environment:2:2:ProcessKlerKdot850BPassenger:2:8
Sub ProcessKlerKdot850BPassenger(klerKdot850BDocument As NotesDocument, occurrenceDocument As NotesDocument, _
passengerNumber As String, emsList List As KdotEmsUnit)
	
	On Error Goto ErrorHandle
	
	Dim klerKdot850BFieldMapping List As String
	Dim klerKdot850BField As NotesItem
	
	Dim passengerDocument As NotesDocument
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	Dim emsUnit As KdotEmsUnit
	
	Dim i As Integer
	
	' Exit if there is no data entered on the form with this number.
	Set KlerKdot850BField = klerKdot850BDocument.GetFirstItem("person_share" & Cstr(4+Cint(passengerNumber)))
	If Not KlerKdot850BField Is Nothing Then
		If KlerKdot850BField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Find existing Passenger document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKdot850BDocument.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Person/Property" _
		And Not rmsDocument.IsDeleted Then
			Set KlerKdot850BField = klerKdot850BDocument.GetFirstItem("person_share" & Cstr(4+Cint(passengerNumber)))
			If rmsDocument.KLERRecordID(0) = klerKdot850BField.Values(0) Then
				Set passengerDocument = rmsDocument
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	If passengerDocument Is Nothing Then
		Exit Sub
	End If
	
	klerKdot850BFieldMapping("occup_seat_type") = "KDOT_SeatType"	
	klerKdot850BFieldMapping("occup_safety_equip") = "KDOT_SafetyEquip"
	klerKdot850BFieldMapping("occup_ejected") = "KDOT_EjectTrap"
	klerKdot850BFieldMapping("occup_injury_severity") = "KDOT_InjurySeverity"
	klerKdot850BFieldMapping("occup_eject_path") = "KDOT_EjectPath"	
	klerKdot850BFieldMapping("occup_extricated_flag") = "KDOT_Extrication"
	Call ProcessKlerFields(klerKdot850BDocument, passengerDocument, Cstr(2+Cint(passengerNumber)), klerKdot850BFieldMapping)
	
	passengerDocument.KDOT_Role = "Passenger"
	
	' EMS Unit
	For i = 1 To 2
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("occup_trans_unit" & Cstr(16+i))
		If Not klerKdot850BField Is Nothing Then
			Set emsUnit = emsList(klerKdot850BField.Values(0))
			If Not emsUnit Is Nothing Then
				Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("occup_trans_unit" & Cstr(2+Cint(passengerNumber)))
				If Not klerKdot850BField Is Nothing Then
					If emsUnit.transportUnit = klerKdot850BField.Values(0) Then
						passengerDocument.KDOT_EMSUnit = emsUnit.takenBy
						passengerDocument.KDOT_TakenTo = emsUnit.takenTo
						If Isdate(emsUnit.notified) Then
							passengerDocument.KDOT_EMSNotified = Cdat(emsUnit.notified)
						End If
						If Isdate(emsUnit.arrived) Then
							passengerDocument.KDOT_EMSArrived = Cdat(emsUnit.arrived)
						End If
						If Isdate(emsUnit.hospital) Then
							passengerDocument.KDOT_EMSHospital = Cdat(emsUnit.hospital)
						End If
					End If
				End If
			End If
		End If
	Next
	
	' Add "KDOT Accident - Person 2009" subform if needed.
	passengerDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Accident - Person 2009" & ";" & Implode(passengerDocument.LoadedSubForms,";"),";")))
	
	' Save Passenger document.
	Call SetUpRmsDocument(passengerDocument)
	Call passengerDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:GetListRemainder:1:8
Private Function GetListRemainder() As String
	Dim sStreetName As String
	Forall Items In oCol
		sStreetName = sStreetName & " " & Items								
	End Forall
	GetListRemainder = Trim(sStreetName)
End Function

'++LotusScript Development Environment:2:1:InArray:1:8
Function InArray(searchArray As Variant, searchString As String) As Boolean

	ForAll searchItem In searchArray
		If searchItem = searchString Then
			InArray = True
		End If
	End ForAll
	
End Function

'++LotusScript Development Environment:2:2:SetUpRmsDocument:1:8
Sub SetUpRmsDocument(rmsDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim parentDocument As NotesDocument
	Dim parentField As NotesItem
	
	Dim allowableAuthorsTemp As Variant
	Dim allowableAuthorsField As NotesItem
	
	Dim personFields(1 To 24) As String
	personFields(1) = "Surname"
	personFields(2) = "Given1"
	personFields(3) = "Given2"
	personFields(4) = "Given3"
	personFields(5) = "Alias"
	personFields(6) = "Nee"
	personFields(7) = "HomePhone"
	personFields(8) = "BusinessPhone"
	personFields(9) = "BusinessExt"
	personFields(10) = "CellPhone"
	personFields(11) = "Email"
	personFields(12) = "DOB"
	personFields(13) = "Sex"
	personFields(14) = "MaritalStatus"
	personFields(15) = "ApparentAge"
	personFields(16) = "Race"
	personFields(17) = "SIN"
	personFields(18) = "DLNumber"
	personFields(19) = "DLIssueBy"
	personFields(20) = "DLClass"
	personFields(21) = "DLDate"
	personFields(22) = "Employer"
	personFields(23) = "Occupation"
	personFields(24) = "AlternateID"
	
	Dim generalFields(1 To 10) As String
	generalFields(1) = "Agency"
	generalFields(2) = "OccurrenceNumber"
	generalFields(3) = "ReportingOfficer"
	generalFields(4) = "ReportingOfficerRank"
	generalFields(5) = "ReportingOfficerBadge"
	generalFields(6) = "ReportingOfficerDistrict"
	generalFields(7) = "ReportingOfficerPlatoon"
	generalFields(8) = "AllowableAuthors"
	generalFields(9) = "ComposedBy"
	generalFields(10) = "ComposedDateTime"
	
	If rmsDocument.Form(0) = "OccurrenceReport" Then
		
		' Set allowable authors field.
		Call rmsDocument.RemoveItem("AllowableAuthors")
		If rmsDocument.ReportingOfficer(0) <> "" Then
			allowableAuthorsTemp = Split("[Statistician]/[Supervisors]/"+rmsDocument.ReportingOfficer(0),"/")
		Else
			allowableAuthorsTemp = Split("[Statistician]/[Supervisors]","/")
		End If
		Set allowableAuthorsField = New NotesItem(rmsDocument, "AllowableAuthors", allowableAuthorsTemp, AUTHORS)
		allowableAuthorsField.IsSummary = True
		
		' Proper case Street Type
		If rmsDocument.HasItem("StType") Then
			If rmsDocument.StType(0) <> "" Then
				rmsDocument.StType = Strconv(rmsDocument.StType(0), SC_ProperCase)
			End If
		End If
		
		' Create Street and StreetNumber fields based on address information.
		Call ProcessAddressFields(rmsDocument)
		
	Elseif rmsDocument.Form(0) = "Person/Property" Then
		
		' Inherit Reporting Officer information from Occurrence (parent).
		If rmsDocument.IsResponse Then
			Set parentDocument = rmsDocument.ParentDatabase.GetDocumentByUNID(rmsDocument.ParentDocumentUNID)
		End If
		If Not parentDocument Is Nothing Then
			
			' General fields
			Forall generalFieldName In generalFields
				
				Set parentField = parentDocument.GetFirstItem(generalFieldName)
				If Not parentField Is Nothing Then
					Call rmsDocument.RemoveItem(generalFieldName)
					Call rmsDocument.CopyItem(parentField, "")
				End If
				
			End Forall
			
			' Occurrence fields
			rmsDocument.DispatchNumber = parentDocument.DispatchNumber(0)
			rmsDocument.Division = parentDocument.Division(0)
			rmsDocument.IncidentType = parentDocument.IncidentType(0)
			
		End If
		
		' Involvement Type 
		rmsDocument.Type = rmsDocument.TypeList
		
		' Proper case Street Type
		If rmsDocument.HasItem("StType") Then
			If rmsDocument.StType(0) <> "" Then
				rmsDocument.StType = Strconv(rmsDocument.StType(0), SC_ProperCase)
			End If
		End If
		
		' Create Street and StreetNumber fields based on address information.
		Call ProcessAddressFields(rmsDocument)
		
		' Format Phone Numbers
		If rmsDocument.HasItem("HomePhone") Then
			rmsDocument.HomePhone = FormatPhoneNumber(rmsDocument.HomePhone(0))
		End If
		If rmsDocument.HasItem("BusinessPhone") Then
			rmsDocument.BusinessPhone = FormatPhoneNumber(rmsDocument.BusinessPhone(0))
		End If
		If rmsDocument.HasItem("CellPhone") Then
			rmsDocument.CellPhone = FormatPhoneNumber(rmsDocument.CellPhone(0))
		End If
		If rmsDocument.HasItem("KDOT_ObjectOwnerPersonalPhone") Then
			rmsDocument.KDOT_ObjectOwnerPersonalPhone = FormatPhoneNumber(rmsDocument.KDOT_ObjectOwnerPersonalPhone(0))
		End If
		If rmsDocument.HasItem("KDOT_ObjectOwnerWorkPhone") Then
			rmsDocument.KDOT_ObjectOwnerWorkPhone = FormatPhoneNumber(rmsDocument.KDOT_ObjectOwnerWorkPhone(0))
		End If
		If rmsDocument.HasItem("KDOT_CarrierPhone") Then
			rmsDocument.KDOT_CarrierPhone = FormatPhoneNumber(rmsDocument.KDOT_CarrierPhone(0))
		End If
		If rmsDocument.HasItem("PGPhone1") Then
			rmsDocument.PGPhone1 = FormatPhoneNumber(rmsDocument.PGPhone1(0))
		End If
		If rmsDocument.HasItem("PGPhone2") Then
			rmsDocument.PGPhone2 = FormatPhoneNumber(rmsDocument.PGPhone2(0))
		End If
		If rmsDocument.HasItem("APGPhone1") Then
			rmsDocument.APGPhone1 = FormatPhoneNumber(rmsDocument.APGPhone1(0))
		End If
		If rmsDocument.HasItem("APGPhone2") Then
			rmsDocument.APGPhone2 = FormatPhoneNumber(rmsDocument.APGPhone2(0))
		End If
		If rmsDocument.HasItem("CompanyPhone") Then
			rmsDocument.CompanyPhone = FormatPhoneNumber(rmsDocument.CompanyPhone(0))
		End If
		
		' Format SSN
		If rmsDocument.HasItem("SIN") Then
			rmsDocument.SIN = FormatSSN(rmsDocument.SIN(0))
		End If
		
	Elseif rmsDocument.Form(0) = "SupplementaryMV" Or rmsDocument.Form(0) = "SupplementaryTicket" Then
		
		' Inherit Reporting Officer information from Occurrence (parent).
		If rmsDocument.IsResponse Then
			Set parentDocument = rmsDocument.ParentDatabase.GetDocumentByUNID(rmsDocument.ParentDocumentUNID)
		End If
		If Not parentDocument Is Nothing Then
			
			' General fields
			Forall generalFieldName In generalFields
				
				Set parentField = parentDocument.GetFirstItem(generalFieldName)
				If Not parentField Is Nothing Then
					Call rmsDocument.RemoveItem(generalFieldName)
					Call rmsDocument.CopyItem(parentField, "")
				End If
				
			End Forall
			
			' Person fields
			Forall personFieldName In personFields
				
				Set parentField = parentDocument.GetFirstItem(personFieldName)
				If Not parentField Is Nothing Then
					Call rmsDocument.RemoveItem(personFieldName)
					Call rmsDocument.CopyItem(parentField, "")
				End If
				
			End Forall
			
		End If
	ElseIf rmsDocument.Form(0) = "SupplementaryProperty" Then

		' Inherit Reporting Officer information from Occurrence (parent).
		If rmsDocument.IsResponse Then
			Set parentDocument = rmsDocument.ParentDatabase.GetDocumentByUNID(rmsDocument.ParentDocumentUNID)
		End If
		If Not parentDocument Is Nothing Then
			
			' General fields
			ForAll generalFieldName In generalFields
				
				' Don't apply reporting officer info to Property.
				If generalFieldName <> "ReportingOfficer" _
				And generalFieldName <> "ReportingOfficerRank" _
				And generalFieldName <> "ReportingOfficerBadge" _
				And generalFieldName <> "ReportingOfficerDistrict" _
				And generalFieldName <> "ReportingOfficerPlatoon" Then
					Set parentField = parentDocument.GetFirstItem(generalFieldName)
					If Not parentField Is Nothing Then
						Call rmsDocument.RemoveItem(generalFieldName)
						Call rmsDocument.CopyItem(parentField, "")
					End If
				End If
				
			End ForAll
			
			' Person fields
			ForAll personFieldName In personFields
				
				Set parentField = parentDocument.GetFirstItem(personFieldName)
				If Not parentField Is Nothing Then
					Call rmsDocument.RemoveItem(personFieldName)
					Call rmsDocument.CopyItem(parentField, "")
				End If
				
			End ForAll
			
		End If

	Elseif rmsDocument.Form(0) = "KIBRS Offense" Or rmsDocument.Form(0) = "KIBRS Incident Clearance" Or rmsDocument.Form(0) = "Supplementary" Then
		
		If rmsDocument.IsResponse Then
			Set parentDocument = rmsDocument.ParentDatabase.GetDocumentByUNID(rmsDocument.ParentDocumentUNID)
		End If
		If Not parentDocument Is Nothing Then
			
			' General fields
			Forall generalFieldName In generalFields
				
				If Not (rmsDocument.Form(0) = "Supplementary" And generalFieldName = "AllowableAuthors") Then
					Set parentField = parentDocument.GetFirstItem(generalFieldName)
					If Not parentField Is Nothing Then
						Call rmsDocument.RemoveItem(generalFieldName)
						Call rmsDocument.CopyItem(parentField, "")
					End If
				End If	
				
			End Forall
			
		End If
		
	End If
	
	' Set CFDS Unique ID
	rmsDocument.CFDSUniqueID = rmsDocument.UniversalID
	
	' Set Approval fields
	If Not rmsDocument.HasItem("ApprovalStatus") Then
		rmsDocument.ApprovalStatus = ""
	End If
	If Not rmsDocument.HasItem("ApprovalHistory") Then
		rmsDocument.ApprovalHistory = ""
	End If
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:RefreshUIDocumentAfterAttach:1:8
Sub RefreshUIDocumentAfterAttach
	
	On Error Goto ErrorHandle
	
	Dim currentWorkspace As NotesUIWorkspace
	
	Dim isEditMode As Boolean
	Dim currentField As String
	
	Dim occurrenceUIDocument As NotesUIDocument
	Dim occurrenceDocument As NotesDocument	
	Dim occurrenceDocumentUnid As String
	
	' Get handle to current workspace.
	Set currentWorkspace = New NotesUIWorkspace
	
	' Get information about state of UI.
	Set occurrenceUIDocument = currentWorkspace.CurrentDocument
	isEditMode = occurrenceUIDocument.EditMode
	currentField = occurrenceUIDocument.CurrentField
	
	' Get handle to Occurrence Document.
	Set occurrenceDocument = occurrenceUIDocument.Document
	
	' Store document UNID.
	occurrenceDocumentUnid = occurrenceDocument.UniversalID
	
	' Close and reopen document to make RT field refresh and show attachment.
	Call occurrenceDocument.Save(False, False)
	Call occurrenceUIDocument.Close(True)
	Set occurrenceDocument = currentWorkspace.CurrentDatabase.Database.GetDocumentByUNID(occurrenceDocumentUnid)
	If isEditMode Then
		
		Call currentWorkspace.EditDocument(True, occurrenceDocument, False)
		currentWorkspace.CurrentDocument.GotoField(currentField)
		Call currentWorkspace.CurrentDocument.FieldSetText("Form", currentWorkspace.CurrentDocument.FieldGetText("Form"))
		
	Else
		
		Call currentWorkspace.EditDocument(False, occurrenceDocument, False)
		
	End If
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
End Sub

'++LotusScript Development Environment:2:1:TranslateCounty:1:8
Function TranslateCounty(countyString As String) As String
	
	Select Case countyString
	Case "Allen":		TranslateCounty = "AL"
	Case "Anderson":	TranslateCounty = "AN"
	Case "Atchison":	TranslateCounty = "AT"
	Case "Barber":		TranslateCounty = "BA"
	Case "Barton":		TranslateCounty = "BT"
	Case "Bourbon":	TranslateCounty = "BB"
	Case "Brown":		TranslateCounty = "BR"
	Case "Butler":		TranslateCounty = "BU"
	Case "Chase":		TranslateCounty = "CS"
	Case "Chautauqua":	TranslateCounty = "CQ"
	Case "Cherokee":	TranslateCounty = "CK"
	Case "Cheyenne":	TranslateCounty = "CN"
	Case "Clark":		TranslateCounty = "CA"
	Case "Clay":		TranslateCounty = "CY"
	Case "Cloud":		TranslateCounty = "CD"
	Case "Coffey":		TranslateCounty = "CF"
	Case "Comanche":	TranslateCounty = "CM"
	Case "Cowley":		TranslateCounty = "CL"
	Case "Crawford":	TranslateCounty = "CR"
	Case "Decatur":	TranslateCounty = "DC"
	Case "Dickinson":	TranslateCounty = "DK"
	Case "Doniphan":	TranslateCounty = "DP"
	Case "Douglas":	TranslateCounty = "DG"
	Case "Edwards":	TranslateCounty = "ED"
	Case "Elk":		TranslateCounty = "EK"
	Case "Ellis":		TranslateCounty = "EL"
	Case "Ellsworth":	TranslateCounty = "EW"
	Case "Finney":		TranslateCounty = "FI"
	Case "Ford":		TranslateCounty = "FO"
	Case "Franklin":	TranslateCounty = "FR"
	Case "Geary":		TranslateCounty = "GE"
	Case "Gove":		TranslateCounty = "GO"
	Case "Graham":		TranslateCounty = "GH"
	Case "Grant":		TranslateCounty = "GT"
	Case "Gray":		TranslateCounty = "GY"
	Case "Greeley":	TranslateCounty = "GL"
	Case "Greenwood":	TranslateCounty = "GW"
	Case "Hamilton":	TranslateCounty = "HM"
	Case "Harper":		TranslateCounty = "HP"
	Case "Harvey":		TranslateCounty = "HV"
	Case "Haskell":	TranslateCounty = "HS"
	Case "Hodgeman":	TranslateCounty = "HG"
	Case "Jackson":	TranslateCounty = "JA"
	Case "Jefferson":	TranslateCounty = "JF"
	Case "Jewell":		TranslateCounty = "JW"
	Case "Johnson":	TranslateCounty = "JO"
	Case "Kearny":		TranslateCounty = "KE"
	Case "Kingman":	TranslateCounty = "KM"
	Case "Kiowa":		TranslateCounty = "KW"
	Case "Labette":	TranslateCounty = "LB"
	Case "Lane":		TranslateCounty = "LE"
	Case "Leavenworth":	TranslateCounty = "LV"
	Case "Lincoln":	TranslateCounty = "LC"
	Case "Linn":		TranslateCounty = "LN"
	Case "Logan":		TranslateCounty = "LG"
	Case "Lyon":		TranslateCounty = "LY"
	Case "Marion":		TranslateCounty = "MN"
	Case "Marshall":	TranslateCounty = "MS"
	Case "McPherson":	TranslateCounty = "MP"
	Case "Meade":		TranslateCounty = "ME"
	Case "Miami":		TranslateCounty = "MI"
	Case "Mitchell":	TranslateCounty = "MC"
	Case "Montgomery":	TranslateCounty = "MG"
	Case "Morris":		TranslateCounty = "MR"
	Case "Morton":		TranslateCounty = "MT"
	Case "Nemaha":		TranslateCounty = "NM"
	Case "Neosho":		TranslateCounty = "NO"
	Case "Ness":		TranslateCounty = "NS"
	Case "Norton":		TranslateCounty = "NT"
	Case "Osage":		TranslateCounty = "OS"
	Case "Osborne":	TranslateCounty = "OB"
	Case "Ottawa":		TranslateCounty = "OT"
	Case "Pawnee":		TranslateCounty = "PN"
	Case "Phillips":	TranslateCounty = "PL"
	Case "Pottawatomie":TranslateCounty = "PT"
	Case "Pratt":		TranslateCounty = "PR"
	Case "Rawlins":	TranslateCounty = "RA"
	Case "Reno":		TranslateCounty = "RN"
	Case "Republic":	TranslateCounty = "RP"
	Case "Rice":		TranslateCounty = "RC"
	Case "Riley":		TranslateCounty = "RL"
	Case "Rooks":		TranslateCounty = "RO"
	Case "Rush":		TranslateCounty = "RH"
	Case "Russell":	TranslateCounty = "RS"
	Case "Saline":		TranslateCounty = "SA"
	Case "Scott":		TranslateCounty = "SC"
	Case "Sedgwick":	TranslateCounty = "SG"
	Case "Seward":		TranslateCounty = "SW"
	Case "Shawnee":	TranslateCounty = "SN"
	Case "Sheridan":	TranslateCounty = "SD"
	Case "Sherman":	TranslateCounty = "SH"
	Case "Smith":		TranslateCounty = "SM"
	Case "Stafford":	TranslateCounty = "SF"
	Case "Stanton":	TranslateCounty = "ST"
	Case "Stevens":	TranslateCounty = "SV"
	Case "Sumner":		TranslateCounty = "SU"
	Case "Thomas":		TranslateCounty = "TH"
	Case "Trego":		TranslateCounty = "TR"
	Case "Wabaunsee":	TranslateCounty = "WB"
	Case "Wallace":	TranslateCounty = "WA"
	Case "Washington":	TranslateCounty = "WS"
	Case "Wichita":	TranslateCounty = "WH"
	Case "Wilson":		TranslateCounty = "WL"
	Case "Woodson":	TranslateCounty = "WO"
	Case "Wyandotte":	TranslateCounty = "WY"
	End Select
	
End Function

'++LotusScript Development Environment:2:1:GetAgencyAddress:1:8
Function GetAgencyAddress As Address
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim controlDocument As NotesDocument
	Dim controlView As NotesView
	
	Dim databaseFilePath As String
	
	Dim lookupDatabase As NotesDatabase
	Dim lookupView As NotesView
	Dim lookupDocument As NotesDocument
	
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	Set controlView = currentDatabase.GetView("(Control)")
	Set controlDocument = controlView.GetFirstDocument
	If Not controlDocument Is Nothing Then
		If Instr(controlDocument.LUPath(0),"\") <> 0 Then
			'Path provided in file name
			databaseFilePath = controlDocument.LUPath(0)
		Else
			'no path provided, so append path of current database
			databaseFilePath = Strleftback(currentDatabase.FilePath,"\") + "\" + controlDocument.LUPath(0)
		End If
		Set lookupDatabase = New NotesDatabase("", "")
		lookupDatabase.Open currentDatabase.Server, databaseFilePath
		If lookupDatabase.IsOpen Then
			Set lookupView = lookupDatabase.GetView("DatabaseLU")
			Set lookupDocument = lookupView.GetDocumentByKey(controlDocument.LUName(0) + "AgencyAddress",True)
			If Not lookupDocument Is Nothing Then
				Set GetAgencyAddress = New Address(lookupDocument.Field1(0), lookupDocument.Field2(0), _
				lookupDocument.Field3(0), lookupDocument.Field4(0))
			End If
		End If
	End If
	
End Function



'++LotusScript Development Environment:2:1:GetDataGroupDocuments:1:8
Public Function GetDataGroupDocuments(klerFilePath As String) As Variant
	
	On Error Goto ErrorHandle
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim dataGroupDocuments() As NotesDocument
	Dim dataGroupDocumentCount As Integer
	Dim dataGroupDocument As NotesDocument
	
	Dim klerCase As KLERCase
	Dim klerFileName As String
	Dim klerCaseGuidVal As String
	
	Dim caseReportDateString As String
	Dim caseNumString As String
	
	' Get handle to current database.
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	' Get KLER file name from file path.
	klerFileName = Strrightback(klerFilePath,"\")
	
	' Create new KLERCase object and load file.
	Set klerCase = New KLERCase	
	Call klerCase.LoadFile(klerFilePath)
	
	' Get the GuidVal of the KLER case.
	Forall caseForm In klerCase.CaseForms
		If caseForm.Formname = "Case" Then
			klerCaseGuidVal = caseForm.DataGroups("1").Attributes("GuidVal")
			Exit Forall
		End If
	End Forall
	If klerCaseGuidVal = "" Then
		Print "FAILURE... GUIDVAL is blank in file: " & klerFileName
		Exit Function
	End If
	
	' Loop through KLER case's forms and datagroups.
	Forall klerCaseForm In klerCase.CaseForms
		
		Forall klerDataGroup In klerCaseForm.DataGroups
			
			' Create datagroup document based on KLER data.
			Set dataGroupDocument = currentDatabase.CreateDocument
			dataGroupDocument.Form = "DataGroup"
			dataGroupDocument.CaseID = klerCaseGuidVal
			dataGroupDocument.RecordType = klerDataGroup.RecordType
			
			' Transfer attributes to datagroup document.
			Forall attribute In klerDataGroup.Attributes
				Call dataGroupDocument.ReplaceItemValue(Listtag(attribute), attribute)
			End Forall
			
			' Transfer page fields to datagroup document.
			Forall klerPage In klerDataGroup.Pages
				Forall klerField In klerPage.FieldValues
					If dataGroupDocument.HasItem(Listtag(klerField)) Then
						Print Listtag(klerField) & " is a repeating field"
					Else
						If ListTag(klerField) <> "collision_diagram" Then
							Call dataGroupDocument.ReplaceItemValue(Listtag(klerField), klerField)
						End If
					End If
				End Forall
			End Forall
			
			' Inherit case_report_date to other data group documents to avoid conflict with other report_date fields.
			If klerDataGroup.RecordType = "Case" Then
				caseReportDateString = dataGroupDocument.report_date(0)
				caseNumString = dataGroupDocument.case_num(0)
			Else
				dataGroupDocument.case_report_date = caseReportDateString
				dataGroupDocument.case_num = caseNumString
			End If
			
			' Add DataGroup document to array.
			Redim Preserve dataGroupDocuments(0 To dataGroupDocumentCount)
			Set dataGroupDocuments(dataGroupDocumentCount) = dataGroupDocument
			dataGroupDocumentCount = dataGroupDocumentCount + 1
			
		End Forall
		
	End Forall
	
	GetDataGroupDocuments = dataGroupDocuments
	
	Exit Function
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Function
	
End Function

'++LotusScript Development Environment:2:2:ProcessKlerKsorRecord:1:8
Sub ProcessKlerKsorRecord(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim klerKsorFieldMapping List As String
	
	Dim i As Integer
	
	Dim klerField As NotesItem
	Dim reportingOfficer As Officer
	
	' On View / Citizen / Dispatched
	Call occurrenceDocument.RemoveItem("KIBRS_CallSource")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "on_view_cbox", 		"KIBRS_CallSource", "On View")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "citizen_cbox",		"KIBRS_CallSource", "Citizen")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "dispatched_cbox",	"KIBRS_CallSource", "Dispatched")
	
	' Date / Time Offense Started, Date / Time Offense Ended
	Call ProcessKlerDateTimeFields(klerKsorDocument, occurrenceDocument, "date_started",	"time_started",	"TimeDateCommitted")
	Call ProcessKlerDateTimeFields(klerKsorDocument, occurrenceDocument, "date_ended",	"time_ended",		"TimeDateTo")
	
	' Date of Report / Time Reported
	Call ProcessKlerDateTimeFields(klerKsorDocument, occurrenceDocument, "report_date1",	"time_reported",	"DateReported")
	
	' Exceptional Clearance Date
	Call ProcessKlerDateTimeFields(klerKsorDocument, occurrenceDocument, "exp_clr_date",	"",	"KIBRS_ExClrDate")	
	
	' Exceptional Clearance
	Call occurrenceDocument.RemoveItem("KIBRS_ClrIndicator")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "death_offender_cbox", 	"KIBRS_ClrIndicator", "A")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "prosecution_denied_cbox", 	"KIBRS_ClrIndicator", "B")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "extra_denied_cbox", 		"KIBRS_ClrIndicator", "C")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "vic_no_testify_cbox", 	"KIBRS_ClrIndicator", "D")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "juv_nocustody_cbox", 		"KIBRS_ClrIndicator", "E")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "ex_clr_na_cbox", 		"KIBRS_ClrIndicator", "N")
	
	' Location of Offense	
	klerKsorFieldMapping("locn_offense_city") = "TownCity"
	klerKsorFieldMapping("locn_offense_state") = "Prov"
	klerKsorFieldMapping("locn_offense_street_category") = "StType"
	klerKsorFieldMapping("locn_offense_street_name") = "StName"
	klerKsorFieldMapping("locn_offense_street_num") = "StNumber"
	klerKsorFieldMapping("locn_offense_struct_num") = "BuildingUnitIdentifier"
	klerKsorFieldMapping("locn_offense_street_pre_dir") = "StPreDirection"
	klerKsorFieldMapping("locn_offense_street_post_dir") = "StPostDirection"
	klerKsorFieldMapping("locn_offense_zip") = "PostalCode"	
	klerKsorFieldMapping("report_area") = "PatrolArea"
	Call ProcessKlerFields(klerKsorDocument, occurrenceDocument, "", klerKsorFieldMapping)
	
	' Time Arrived / Time Cleared
	If Isdate(klerKsorDocument.time_arrived(0)) Then
		occurrenceDocument.KIBRS_ArrTime = Cdat(klerKsorDocument.time_arrived(0))
	End If
	If Isdate(klerKsorDocument.time_cleared(0)) Then
		occurrenceDocument.KIBRS_ClrTime = Cdat(klerKsorDocument.time_cleared(0))
	End If
	
	' Handle Offenses
	For i = 1 To 2
		Call ProcessKlerKsorOffense(klerKsorDocument, occurrenceDocument, Cstr(i))
	Next
	
	' Handle Victims
	Call ProcessKlerKsorVictim(klerKsorDocument, occurrenceDocument, "")
	
	' Handle Reporting Person
	Call ProcessKlerKsorRP(klerKsorDocument, occurrenceDocument, "")
	
	' Handle Property information
	If DoProcessProperty Then
		For i = 1 To 4
			Call ProcessKlerKsorProperty(klerKsorDocument, occurrenceDocument, Cstr(i))
		Next
	End If
	
	' Date / Copies To
	Erase klerKsorFieldMapping
	klerKsorFieldMapping("copies_to") = "KIBRS_CopiesTo"
	Call ProcessKlerFields(klerKsorDocument, occurrenceDocument, "", klerKsorFieldMapping)
	'	If Isdate(klerKsorDocument.report_date(0)) Then
	'		occurrenceDocument.ComposedDateTime = Cdat(klerKsorDocument.report_date(0))
	'	End If
	
	' Reporting Officer
	Set klerField = klerKsorDocument.GetFirstItem("rep_officer_badge")
	If Not klerField Is Nothing Then
		Set reportingOfficer = GetOfficerByBadgeNumber(CStr(klerField.Values(0)))
	End If
	If Not reportingOfficer Is Nothing Then
		occurrenceDocument.ReportingOfficer = reportingOfficer.Name
		occurrenceDocument.ReportingOfficerBadge = reportingOfficer.Badge
		occurrenceDocument.ReportingOfficerDistrict = reportingOfficer.District
		occurrenceDocument.ReportingOfficerPlatoon = reportingOfficer.Platoon
		occurrenceDocument.ReportingOfficerRank = reportingOfficer.Rank
	Else
		Erase klerKsorFieldMapping
		klerKsorFieldMapping("rep_officer_name") = "ReportingOfficer"
		klerKsorFieldMapping("rep_officer_badge") = "ReportingOfficerBadge"
		Call ProcessKlerFields(klerKsorDocument, occurrenceDocument, "", klerKsorFieldMapping)
	End If
	
	
	' Instrument Used for Entry
	Call occurrenceDocument.RemoveItem("KIBRS_EntryInst")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "entry_key_cbox",		"KIBRS_EntryInst", "1")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "pry_tool_cbox",		"KIBRS_EntryInst", "2")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "saw_cbox",			"KIBRS_EntryInst", "3")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "hammer_cbox",		"KIBRS_EntryInst", "4")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "bolt_cutter_cbox",	"KIBRS_EntryInst", "5")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "chopping_cbox",		"KIBRS_EntryInst", "6")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "vice_grips_cbox",	"KIBRS_EntryInst", "7")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "physical_force_cbox",	"KIBRS_EntryInst", "8")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "thrown_obj_cbox",	"KIBRS_EntryInst", "9")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "other_instr_cbox",	"KIBRS_EntryInst", "10")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "instr_na_cbox",		"KIBRS_EntryInst", "11")
	
	' Point of Entry
	Call occurrenceDocument.RemoveItem("KIBRS_POEntry")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "poe_front_cbox",	"KIBRS_POEntry", "1")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "poe_rear_cbox",	"KIBRS_POEntry", "2")	
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "poe_side_cbox",	"KIBRS_POEntry", "3")	
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "poe_roof_cbox",	"KIBRS_POEntry", "4")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "poe_cbox",		"KIBRS_POEntry", "9")
	
	' Point of Exit
	Call occurrenceDocument.RemoveItem("KIBRS_POExit")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "pox_front_cbox",	"KIBRS_POExit", "1")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "pox_rear_cbox",	"KIBRS_POExit", "2")	
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "pox_side_cbox",	"KIBRS_POExit", "3")	
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "pox_roof_cbox",	"KIBRS_POExit", "4")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "pox_na_cbox",	"KIBRS_POExit", "9")
	
	' Premise Neighborhood
	Call occurrenceDocument.RemoveItem("KIBRS_Neigh")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "rural_cbox",		"KIBRS_Neigh", "R")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "suburban_cbox",		"KIBRS_Neigh", "S")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "urban_cbox",		"KIBRS_Neigh", "B")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "uninhabited_cbox",	"KIBRS_Neigh", "U")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "premise_na_cbox",	"KIBRS_Neigh", "")
	
	' Safe Entered
	Call occurrenceDocument.RemoveItem("KIBRS_SafeDetails")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "se_yes_cbox",		"KIBRS_SafeDetails", "1")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "se_no_cbox",		"KIBRS_SafeDetails", "2")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "se_attempted_cbox",	"KIBRS_SafeDetails", "3")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "removed_cbox",		"KIBRS_SafeDetails", "4")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "peeled_cbox",		"KIBRS_SafeDetails", "5")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "exploded_cbox",		"KIBRS_SafeDetails", "6")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "combo_cbox",		"KIBRS_SafeDetails", "7")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "se_na_cbox",		"KIBRS_SafeDetails", "9")
	
	' Incident Activity
	Call occurrenceDocument.RemoveItem("KIBRS_IncidentAct")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "dv_children_cbox",	"KIBRS_IncidentAct", "C")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "dv_cbox",			"KIBRS_IncidentAct", "D")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "carjack_cbox",		"KIBRS_IncidentAct", "J")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "ia_na_cbox",		"KIBRS_IncidentAct", "N")
	
	' Handle Suspects
	For i = 1 To 2
		Call ProcessKlerKsorSuspect(klerKsorDocument, occurrenceDocument, Cstr(i))
	Next
	
	' Evidence Information
	Call occurrenceDocument.RemoveItem("KIBRS_EvidInfo")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "evid_none_cbox",		"KIBRS_EvidInfo", "None")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "evid_submitted_cbox",	"KIBRS_EvidInfo", "Submitted")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "evid_retained_cbox",	"KIBRS_EvidInfo", "Retained by Victim")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "evid_officer_cbox",	"KIBRS_EvidInfo", "Retained by Officer")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "evid_off_agency_cbox","KIBRS_EvidInfo", "Retained by Investigative Agency")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "evid_transfer_cbox",	"KIBRS_EvidInfo", "Transfer to Other Agency")
	Call ProcessKlerCheckbox(klerKsorDocument, occurrenceDocument, "", "evid_other_cbox1",	"KIBRS_EvidInfo", "Other")
	
	' Evidence Obtained	
	Call occurrenceDocument.RemoveItem("KIBRS_EvidObtained")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_prints_cbox",		"KIBRS_EvidObtained", "Latent Prints")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_other_prints_cbox",	"KIBRS_EvidObtained", "Other Prints")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_weapons_cbox",		"KIBRS_EvidObtained", "Weapons/Tools")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_photos_cbox",		"KIBRS_EvidObtained", "Photos")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_sex_cbox",			"KIBRS_EvidObtained", "Sexual Assault Kit")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_hair_cbox",			"KIBRS_EvidObtained", "Hair")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_stains_cbox",		"KIBRS_EvidObtained", "Stains")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_blood_cbox",		"KIBRS_EvidObtained", "Blood")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_semen_cbox",		"KIBRS_EvidObtained", "Semen")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_documents_cbox",		"KIBRS_EvidObtained", "Documents")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_drugs_cbox",		"KIBRS_EvidObtained", "Drugs")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_alcohol_cbox",		"KIBRS_EvidObtained", "Alcohol")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, occurrenceDocument, "", "evid_other_cbox2",		"KIBRS_EvidObtained", "Other")
	
	' Other fields
	Erase klerKsorFieldMapping
	klerKsorFieldMapping("evid_collector") = "KIBRS_EvCollector"
	klerKsorFieldMapping("evid_locn_stored") = "KIBRS_EvLocStored"
	klerKsorFieldMapping("offense_description") = "KIBRS_Brief"
	klerKsorFieldMapping("evid_other_text1") = "KIBRS_EvidInfoOther"
	klerKsorFieldMapping("evid_other_text2") = "KIBRS_EvidObtainedOther"
	Call ProcessKlerFIelds(klerKsorDocument, occurrenceDocument, "", klerKsorFieldMapping)
	
	' Save Occurrence document.
	Call SetUpRmsDocument(occurrenceDocument)
	Call occurrenceDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:SplitAddress:1:8
Sub SplitAddress(addressToSplit As String)
	
	Dim targetDoc As notesdocument
	
	Dim StreetParseList List As String
	Dim StreetDirParseList List As String	
	Dim sAddress As String
	Dim a_Address As Variant
	Dim oDoc As notesdocument
	Dim oLookup As NotesDatabase
	Dim oStreetTypes As NotesView
	Dim oDirectional As NotesView
	Dim controldoc As notesdocument
	Dim controlview As NotesView	
	Dim LookupView As notesview, LookupDoc As notesdocument, LookupCol As NotesDocumentCollection 
	Dim fieldVal As String, fieldKey As String
	Dim sNumber As Variant
	Dim i As Integer
	
	Dim db As notesdatabase
	Dim s As notessession
	
	With db
		Set oLookup = s.GetDatabase(.Server, _
		Replace(.FilePath,.FileName,"") & "/LOC_LU.nsf")
	End With
	
	If oLookup.IsOpen Then
		'Get list of street types to parse and translate
		Set LookupView = oLookup.GetView("Lookup1")
		Set LookupCol = LookupView.GetAllDocumentsByKey("StreetTypeParseList")
		Set LookupDoc = LookupCol.GetFirstDocument 
		While Not LookupDoc Is Nothing
			Forall LL In LookupDoc.field1
				If Instr(LL,"|")<>0 Then
					fieldVal = Trim(Ucase(Strleft(LL,"|")))
					fieldKey = Trim(Ucase(Strright(LL,"|")))
				Else
					fieldVal = Trim(Ucase(LL))
					fieldKey = Trim(Ucase(LL))
				End If
				StreetParseList(fieldVal) = fieldKey
			End Forall
			Set LookupDoc = LookupCol.GetNextDocument(LookupDoc)
		Wend
		
		'Get list of valid street types
		Set LookupCol = LookupView.GetAllDocumentsByKey("StreetType")
		Set LookupDoc = LookupCol.GetFirstDocument 
		While Not LookupDoc Is Nothing
			Forall LL In LookupDoc.field1
				If Instr(LL,"|")<>0 Then
					fieldVal = Trim(Strleft(LL,"|"))
					fieldKey = Trim(Ucase(Strright(LL,"|")))
				Else
					fieldVal = Trim(LL)
					fieldKey = Trim(Ucase(LL))
				End If
				StreetTypeList(fieldKey) = fieldVal
			End Forall
			Set LookupDoc = LookupCol.GetNextDocument(LookupDoc)
		Wend
		
		'Get list of street Directions to parse and translate
		Set LookupCol = LookupView.GetAllDocumentsByKey("Street Directional")
		Set LookupDoc = LookupCol.GetFirstDocument 
		While Not LookupDoc Is Nothing
			Forall LL In LookupDoc.field1
				If Instr(LL,"|")<>0 Then
					fieldVal = Ucase(Strleft(LL,"|"))
					fieldKey = Ucase(Strright(LL,"|"))
				Else
					fieldVal = Ucase(LL)
					fieldKey = Ucase(LL)
				End If
				StreetDirParseList(fieldVal) = fieldKey
			End Forall
			Set LookupDoc = LookupCol.GetNextDocument(LookupDoc)
		Wend
		
		'Build Full Address to parse
		With targetDoc
			sAddress =Trim(addressToSplit)
			a_Address = Split (sAddress," ")
			Erase oCol
			For i = 0 To Ubound(a_Address)
				If Trim(a_Address(i))<>"" Then
					oCol(Cstr(i)) = a_Address(i)
				End If
			Next
			sNumber = ParseNumber
			'Separte possible Prefix from House Number
			If Not sNumber = "" Then
				If Instr(1,sNumber,":") > 0 Then
					.StNumberSuffix = Mid$(sNumber,Instr(1,sNumber,":")+1)
					.StNumber = Mid$(sNumber,1,Instr(1,sNumber,":")-1)
				Else
					.StNumber = sNumber
				End If
			End If
			'Look for StreetTypes
			.StType = AliasLookup(SearchList(StreetParseList,True))
			'Look for PreDirectionals
			.StPreDirection = SearchList(StreetDirParseList,False)
			'Look for Post Directionals
			.StPostDirection = SearchList(StreetDirParseList,True)
			'Take the Remainder and apply it to Street name
			.StName = GetListRemainder
		End With	
	End If
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKsosrRecord:1:8
Sub ProcessKlerKsosrRecord(klerKsosrDocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim i As Integer
	
	' Offenses (2 per page)
	For i = 1 To 2
		Call ProcessKlerKsorOffense(klerKsosrDocument, occurrenceDocument, Cstr(i))
	Next
	
	' Victims (2 per page)
	For i = 1 To 2
		Call ProcessKlerKsorVictim(klerKsosrDocument, occurrenceDocument, Cstr(i))
	Next
	
	' Reporting Person (4 per page)
	For i = 1 To 4
		Call ProcessKlerKsorVictim(klerKsosrDocument, occurrenceDocument, Cstr(i))
	Next	
	
	' Property (16 per page)
	If DoProcessProperty Then
		For i = 1 To 16
			Call ProcessKlerKsorProperty(klerKsosrDocument, occurrenceDocument, Cstr(i))
		Next
	End If
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKdot850BRecord:1:8
Sub ProcessKlerKdot850BRecord(klerKdot850BDocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim klerKdot850BField As NotesItem
	Dim occurrenceField As NotesItem
	
	Dim emsList List As KdotEmsUnit
	Dim emsData As KdotEmsUnit
	
	Dim i As Integer
	
	' Violations Charged
	For i = 1 To 4
		Call ProcessKlerKdot850BViolation(klerKdot850BDocument, occurrenceDocument, Cstr(i))
	Next
	
	' Contributing Circumstances (occurrenceDocument)
	For i = 1 To 10
		
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("id_circum" & Cstr(i))
		If Not klerKdot850BField Is Nothing Then
			Call klerKdot850BField.CopyItemToDocument(occurrenceDocument, "KDOT_Contributing" & Cstr(i))
		End If
		
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("cont_circum" & Cstr(i))
		If Not klerKdot850BField Is Nothing Then
			Call klerKdot850BField.CopyItemToDocument(occurrenceDocument, "KDOT_Factor" & Cstr(i))
		End If
		
	Next
	
	' EMS information
	For i = 1 To 2
		
		Set emsData = New KdotEmsUnit
		
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("occup_ems_notified" & Cstr(i))
		If Not klerKdot850BField Is Nothing Then
			emsData.notified = klerKdot850BField.Values(0)
		End If
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("occup_ems_arrived" & Cstr(i))
		If Not klerKdot850BField Is Nothing Then
			emsData.arrived = klerKdot850BField.Values(0)
		End If		
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("occup_ems_hospital" & Cstr(i))
		If Not klerKdot850BField Is Nothing Then
			emsData.hospital = klerKdot850BField.Values(0)
		End If
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("occup_injured_taken_by" & Cstr(i))
		If Not klerKdot850BField Is Nothing Then
			emsData.takenBy = klerKdot850BField.Values(0)
		End If
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("occup_injured_taken_to" & Cstr(i))
		If Not klerKdot850BField Is Nothing Then
			emsData.takenTo = klerKdot850BField.Values(0)
		End If
		
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("occup_trans_unit" & Cstr(16+i))
		If Not klerKdot850BField Is Nothing Then
			emsData.transportUnit = klerKdot850BField.Values(0)
			If klerKdot850BField.Values(0) <> "" Then
				Set emsList(klerKdot850BField.Values(0)) = emsData
			End If
		End If
	Next
	
	' Driver information
	For i = 1 To 2
		Call ProcessKlerKdot850BDriver(klerKdot850BDocument, occurrenceDocument, Cstr(i), emsList)
	Next
	
	' Passenger information
	For i = 1 To 4
		Call ProcessKlerKdot850BPassenger(klerKdot850BDocument, occurrenceDocument, Cstr(i), emsList)
	Next
	
	' Add "KDOT Accident - Occurrence 2009" to LoadedSubForms.
	occurrenceDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Accident - Occ 2009" & ";" & Implode(occurrenceDocument.LoadedSubForms,";"),";")))
	
	' Save the Occurrence document.
	Call occurrenceDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:ImportKlerFileToOccurrence:1:8
Function ImportKlerFileToOccurrence(klerFilePath As String, occurrenceDocument As NotesDocument, showPrompts As Boolean) As Boolean
	
	On Error Goto ErrorHandle
	
	Dim klerDataGroupDocuments As Variant
	Dim klerDataGroupDocument As NotesDocument
	
	' Perform import of KLER file to get DataGroup documents.
	klerDataGroupDocuments =  GetDataGroupDocuments(klerFilePath)
	
	' Import data from DataGroup documents to Occurrence document.
	Call ProcessDataGroupDocumentsToOccurrence(klerDataGroupDocuments, occurrenceDocument, showPrompts)	
	
	' Set Import Date
	Call occurrencedocument.ReplaceItemValue("KlerImportDate", Cdat(Today()))
	
	' Arrange Property documents.
	Call ArrangePropertyDocuments(occurrenceDocument, showPrompts)
	
	Exit Function
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Function
	
End Function


'++LotusScript Development Environment:2:2:ProcessKlerKdot850BViolation:2:8
Sub ProcessKlerKdot850BViolation(klerKdot850BDocument As NotesDocument, occurrenceDocument As NotesDocument, _
	violationNumber As String)
	
	On Error Goto ErrorHandle
	
	Dim klerKdot850BFieldMapping List As String
	Dim klerKdot850BField As NotesItem
	
	Dim ticketDocument As NotesDocument
	Dim personDocument As NotesDocument
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	' Exit if there is no data entered on the form with this number.
	Set KlerKdot850BField = klerKdot850BDocument.GetFirstItem("traf_unit_nbr" & violationNumber)
	If Not KlerKdot850BField Is Nothing Then
		If KlerKdot850BField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Find existing Ticket document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKdot850BDocument.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "SupplementaryTicket" _
		And Not rmsDocument.IsDeleted Then
			If rmsDocument.KlerKdotViolationNumber(0) = klerKdot850BDocument.GuidVal(0) & "Violation" & violationNumber Then
				Set ticketDocument = rmsDocument
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
	' Create new ticket document if needed.
	If ticketDocument Is Nothing Then
		
		' Find existing Person document.
		Set rmsDocument = rmsDocumentCollection.GetFirstDocument
		While Not rmsDocument Is Nothing
			
			If rmsDocument.Form(0) = "Person/Property" Then
				Set KlerKdot850BField = klerKdot850BDocument.GetFirstItem("traf_unit_nbr" & violationNumber)
				If Not KlerKdot850BField Is Nothing Then
					If IsNumeric(KlerKdot850BField.Values(0)) Then
						If rmsDocument.KDOT_Unit(0) = CStr(CInt(KlerKdot850BField.Values(0))) _
						And InStr(Implode(rmsDocument.Type), "Driver") > 0 Then
							Set personDocument = rmsDocument
						End If
					Else
						If rmsDocument.KDOT_Unit(0) = KlerKdot850BField.Values(0) _
						And InStr(Implode(rmsDocument.Type), "Driver") > 0 Then
							Set personDocument = rmsDocument
						End If
					End If
				End If
			End If
			
			Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
		Wend
		If personDocument Is Nothing Then
			Exit Sub
		End If
		
		Set ticketDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		ticketDocument.Form = "SupplementaryTicket"
		ticketDocument.OccurrenceNumber = occurrenceDocument.OccurrenceNumber(0)
		
		' Get key fields to link RMS Document and KLER Document.
		ticketDocument.KLERCaseID = klerKdot850BDocument.CaseID(0)
		ticketDocument.KLERGUID = klerKdot850BDocument.GuidVal(0)
		ticketDocument.KlerKdotViolationNumber = klerKdot850BDocument.GuidVal(0) & "Violation" & violationNumber
		
		Call ticketDocument.MakeResponse(personDocument)
		
	End If
	
	' Ticket fields
	KlerKdot850BFieldMapping("violation") = "Charge"
	KlerKdot850BFieldMapping("citation") = "TicketNumber"
	Call ProcessKlerFields(klerKdot850BDocument, ticketDocument, violationNumber, KlerKdot850BFieldMapping)
	
	' Save Ticket document.
	Call SetUpRmsDocument(ticketDocument)
	Call ticketDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKsarNarrative:1:8
Sub ProcessKlerKsarNarrative(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim klerKsarFieldMapping List As String
	Dim klerKsarField As NotesItem
	Dim clearanceDocument As NotesDocument
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	Set klerKsarField = klerKsarDocument.GetFirstItem("narrative")
	If Not klerKsarField Is Nothing Then
		If klerKsarField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Find existing Supplementary document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKsarDocument.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Supplementary" _
		And Not rmsDocument.IsDeleted Then
			If rmsDocument.KlerKsarClearanceNumber(0) = klerKsarDocument.GuidVal(0) & "Clearance" & "1" _
			Or rmsDocument.KlerKsarClearanceNumber(0) = klerKsarDocument.GuidVal(0) & "Clearance" & "2" _
			Or rmsDocument.KlerKsarClearanceNumber(0) = klerKsarDocument.GuidVal(0) & "Clearance" & "3" Then
				Set clearanceDocument = rmsDocument
				clearanceDocument.KIBRS_AffNarrative = klerKsarDocument.narrative(0)
				Call clearanceDocument.Save(False, False)
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKsorProperty:1:8
Sub ProcessKlerKsorProperty(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument, propertyNumber As String)
	
	On Error GoTo ErrorHandle
	
	Dim rmsKlerView As NotesView
	Dim ksorDocumentCollection As NotesDocumentCollection
	Dim ksorDocument As NotesDocument	
	Dim klerKsorFieldMapping List As String
	Dim propertyDocument As NotesDocument
	Dim klerKsorField As NotesItem
	Dim isRecovery As Boolean
	Dim isSeized As Boolean
	
	' Exit if there is no property entered on the KSOR form with this number.
	Dim foundProperty As Boolean
	Set klerKsorField = klerKsorDocument.GetFirstItem("typeloss" & propertyNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) <> "" Then
			foundProperty = True
		End If	
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("type_loss" & propertyNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) <> "" Then
			foundProperty = True
		End If	
	End If
	If Not foundProperty Then
		Exit Sub
	End If
	
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set ksorDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKsorDocument.CaseID(0), True)
	Set ksorDocument = ksorDocumentCollection.GetFirstDocument
	While Not ksorDocument Is Nothing
		
		If (ksorDocument.Form(0) = "SupplementaryProperty" _
		Or ksorDocument.Form(0) = "SupplementaryMV" _
		Or ksorDocument.Form(0) = "SupplementaryFraudDoc" _
		Or ksorDocument.Form(0) = "SupplementaryBicycle") _
		And Not ksorDocument.IsDeleted Then
			
			If ksorDocument.HasItem("KlerKsorPropertyNumber") Then
				If ksorDocument.KlerKsorPropertyNumber(0) = klerKsorDocument.GuidVal(0) & "Property" & propertyNumber Then
					Set propertyDocument = ksorDocument
				End If
			End If
			
			Set klerKsorField = klerKsorDocument.GetFirstItem("prop_description" & propertyNumber)
			If Not klerKsorField Is Nothing Then
				If ksorDocument.Item(0) = klerKsorField.Values(0) Then
					Set propertyDocument = ksorDocument
				End If
			End If
			
		End If
		
		Set ksorDocument = ksorDocumentCollection.GetNextDocument(ksorDocument)
	Wend
	
	If propertyDocument Is Nothing Then
		
		Set propertyDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		propertyDocument.Form = "SupplementaryProperty"
		propertyDocument.OccurrenceNumber = occurrenceDocument.OccurrenceNumber(0)
		
		' Get key fields to link RMS Person Document and KLER Person Document.
		propertyDocument.KLERCaseID = klerKsorDocument.CaseID(0)
		propertyDocument.KLERGUID = klerKsorDocument.GuidVal(0)
		propertyDocument.KlerKsorPropertyNumber = klerKsorDocument.GuidVal(0) & "Property" & propertyNumber
		
		propertyDocument.PMake = ""
		propertyDocument.PModel = ""
		propertyDocument.PSerialNum = ""
		propertyDocument.Description = ""
		
		Call propertyDocument.MakeResponse(occurrenceDocument)
	End If
	
	If GetKibrsSubmitDefault Then
		If Not propertyDocument.HasItem("KIBRS_Submit") Then
			propertyDocument.KIBRS_Submit = "Y"
		End If	
	End If
	
	' Handle regular Property fields.
	klerKsorFieldMapping("drug_code") = "KIBRS_PropType"
	klerKsorFieldMapping("prop_description") = "Item"
	klerKsorFieldMapping("measure") = "KIBRS_DrugMeasure"
	Call ProcessKlerFields(klerKsorDocument, propertyDocument, propertyNumber, klerKsorFieldMapping)
	
	If klerKsorDocument.HasItem("typeloss" & propertyNumber) Then
		Set klerKsorField = klerKsorDocument.GetFirstItem("typeloss" & propertyNumber)
		If klerKsorField.Values(0) = "5" Or klerKsorField.Values(0) = "6" Then
			Call klerKsorField.CopyItemToDocument(propertyDocument, "RecType")
			isRecovery =  True
			If klerKsorField.Values(0) = "6" Then
				isSeized = True
			End If
		Else
			Call klerKsorField.CopyItemToDocument(propertyDocument, "LossType")
		End If
	End If
	If klerKsorDocument.HasItem("type_loss" & propertyNumber) Then
		Set klerKsorField = klerKsorDocument.GetFirstItem("type_loss" & propertyNumber)
		If klerKsorField.Values(0) = "5" Or klerKsorField.Values(0) = "6" Then
			Call klerKsorField.CopyItemToDocument(propertyDocument, "RecType")
			isRecovery =  True
			If klerKsorField.Values(0) = "6" Then
				isSeized = True
			End If
		Else
			Call klerKsorField.CopyItemToDocument(propertyDocument, "LossType")
		End If
	End If
	
	Dim quantity As Double
	If klerKsorDocument.HasItem("qty" & propertyNumber) Then
		Set klerKsorField = klerKsorDocument.GetFirstItem("qty" & propertyNumber)
		If IsNumeric(klerKsorField.Values(0)) Then
			quantity = quantity + CDbl(klerKsorField.Values(0))
		End If
	End If
	If klerKsorDocument.HasItem("fraction" & propertyNumber) Then
		Set klerKsorField = klerKsorDocument.GetFirstItem("fraction" & propertyNumber)
		If IsNumeric(klerKsorField.Values(0)) Then
			quantity = quantity + CDbl(klerKsorField.Values(0))
		End If
	End If
	If Not isSeized Then
		propertyDocument.Quantity = quantity
	End If
	If isRecovery Then
		propertyDocument.RecQuantity = quantity
	End If
	
	If klerKsorDocument.HasItem("Value" & propertyNumber) Then
		Set klerKsorField = klerKsorDocument.GetFirstItem("Value" & propertyNumber)
		If IsNumeric(klerKsorField.Values(0)) Then
			If isRecovery Then
				propertyDocument.PRecValue = CDbl(klerKsorField.Values(0))
			Else
				propertyDocument.PValue = CDbl(klerKsorField.Values(0))
			End If
		End If
	End If
	
	' Handle date-type Property fields.
	If klerKsorDocument.HasItem("date_recovered" & propertyNumber) Then
		Set klerKsorField = klerKsorDocument.GetFirstItem("date_recovered" & propertyNumber)
		If IsDate(klerKsorField.Values(0)) Then
			propertyDocument.PRecDate = CDat(klerKsorField.Values(0))
		End If
	End If
	
	' Reporting Officer
	Dim reportingOfficer As Officer
	Set klerKsorField = klerKsorDocument.GetFirstItem("rep_officer_badge")
	If Not klerKsorField Is Nothing Then
		Set reportingOfficer = GetOfficerByBadgeNumber(CStr(klerKsorField.Values(0)))
	End If
	If Not reportingOfficer Is Nothing Then
		propertyDocument.ReportingOfficer = reportingOfficer.Name
		propertyDocument.ReportingOfficerBadge = reportingOfficer.Badge
		propertyDocument.ReportingOfficerDistrict = reportingOfficer.District
		propertyDocument.ReportingOfficerPlatoon = reportingOfficer.Platoon
		propertyDocument.ReportingOfficerRank = reportingOfficer.Rank
	Else
		Erase klerKsorFieldMapping
		propertyDocument.ReportingOfficer = ""
		propertyDocument.ReportingOfficerBadge = ""
		propertyDocument.ReportingOfficerDistrict = ""
		propertyDocument.ReportingOfficerPlatoon = ""
		propertyDocument.ReportingOfficerRank = ""
		klerKsorFieldMapping("rep_officer_name") = "ReportingOfficer"
		klerKsorFieldMapping("rep_officer_badge") = "ReportingOfficerBadge"
		Call ProcessKlerFields(klerKsorDocument, propertyDocument, "", klerKsorFieldMapping)
	End If
	
	' Save Property document.
	Call SetUpRmsDocument(propertyDocument)
	Call propertyDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & CStr( GetThreadInfo(1) ) & |, Line: | & CStr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerHP133Record:1:8
Sub ProcessKlerHP133Record(klerHp133Document As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim rmsKlerView As NotesView
	Dim rmsKlerViewKey(1 To 2) As String
	
	Dim supplementaryDocument As NotesDocument
	Dim supplementaryField As NotesRichTextItem
	
	Dim klerField As NotesItem
	Dim reportingOfficer As Officer
	Dim klerHP133FieldMapping List As String
	
	Dim allowableAuthorsTemp As Variant
	Dim allowableAuthorsField As NotesItem
	
	Dim foundSuppMatch As Boolean
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	If rmsKlerView Is Nothing Then
		' ERROR: If view does not exist, give error msg.
	End If	
	rmsKlerViewKey(1) = Cstr(klerHp133Document.CaseID(0))
	rmsKlerViewKey(2) = Cstr(klerHp133Document.GUIDVAL(0))
	rmsKlerView.Refresh
	Set supplementaryDocument = rmsKlerView.GetDocumentByKey(rmsKlerViewKey, True)
	If supplementaryDocument Is Nothing Then
		foundSuppMatch = False
	ElseIf supplementaryDocument.IsDeleted Then
		foundSuppMatch = False
	Else
		foundSuppMatch = True
	End If
	
	If Not foundSuppMatch Then
		
		Set supplementaryDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		supplementaryDocument.Form = "Supplementary"
		supplementaryDocument.OccurrenceNumber = occurrenceDocument.OccurrenceNumber(0)
		
		' Get key fields to link RMS Supplementary Document and KLER HP133 Document.
		supplementaryDocument.KLERCaseID = klerHp133Document.CaseID(0)
		supplementaryDocument.KLERGUID = klerHp133Document.GUIDVAL(0)
		
		' Subject (Only set when creating new doc)
		supplementaryDocument.Subject = "HP133"
		
		' Make Supplementary document a response to the Occurrence.
		Call supplementaryDocument.MakeResponse(occurrenceDocument)
		
	End If
	
	' Set up general fields.
	Call SetUpRmsDocument(supplementaryDocument)
	
	' Supplementary Report Date
	If Isdate(klerHp133Document.report_date1(0)) Then
		supplementaryDocument.SuppDate = Cdat(klerHp133Document.report_date1(0))
	End If
	
	' Supplementary Body
	Set supplementaryField = New NotesRichTextItem(supplementaryDocument, "SupplementaryInfo")
	supplementaryField.AppendText(klerHp133Document.narrative(0))
	
	' Reporting Officer
	Set klerField = klerHp133Document.GetFirstItem("rep_officer_badge")
	If Not klerField Is Nothing Then
		Set reportingOfficer = GetOfficerByBadgeNumber(CStr(klerField.Values(0)))
	End If
	If Not reportingOfficer Is Nothing Then
		supplementaryDocument.ReportingOfficer = reportingOfficer.Name
		supplementaryDocument.ReportingOfficerBadge = reportingOfficer.Badge
		supplementaryDocument.ReportingOfficerDistrict = reportingOfficer.District
		supplementaryDocument.ReportingOfficerPlatoon = reportingOfficer.Platoon
		supplementaryDocument.ReportingOfficerRank = reportingOfficer.Rank
	Else
		Erase klerHP133FieldMapping
		klerHP133FieldMapping("rep_officer_name") = "ReportingOfficer"
		klerHP133FieldMapping("rep_officer_badge") = "ReportingOfficerBadge"	
		klerHP133FieldMapping("rep_officer_troop") = "ReportingOfficerPlatoon"
		klerHP133FieldMapping("rep_officer_zone") = "ReportingOfficerDistrict"
		Call ProcessKlerFields(klerHp133Document, supplementaryDocument, "", klerHP133FieldMapping)
	End If
	Call supplementaryDocument.RemoveItem("AllowableAuthors")
	If supplementaryDocument.ReportingOfficer(0) <> "" Then
		allowableAuthorsTemp = Split("[Statistician]/[Supervisors]/"+supplementaryDocument.ReportingOfficer(0),"/")
	Else
		allowableAuthorsTemp = Split("[Statistician]/[Supervisors]","/")
	End If
	Set allowableAuthorsField = New NotesItem(supplementaryDocument, "AllowableAuthors", allowableAuthorsTemp, AUTHORS)
	allowableAuthorsField.IsSummary = True
	
	' Subject
	supplementaryDocument.SpecificSubject = "Standard"
	
	' Save Supplementary document.
	Call supplementaryDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerCheckbox:2:8
Sub ProcessKlerCheckbox(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerFieldNumber As String, _
klerFieldName As String, rmsFieldName As String, rmsFieldValue As String)
	
	On Error Goto ErrorHandle
	
	Dim klerField As NotesItem
	Dim rmsField As NotesItem
	
	Set klerField = klerDocument.GetFirstItem(klerFieldName & klerFieldNumber)
	If Not klerField Is Nothing Then
		If klerField.Values(0) = "Y" Then
			
			Set rmsField = rmsDocument.GetFirstItem(rmsFieldName)
			If Not rmsField Is Nothing Then
				rmsField.Values = rmsFieldValue
			Else
				Set rmsField = New NotesItem(rmsDocument, rmsFieldName, rmsFieldValue)
				rmsField.IsSummary = True
			End If
			
		End If
	End If
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:KlerEditAndImport:1:8
Sub KlerEditAndImport(occurrenceDocument As NotesDocument)
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim klerWrapper As KlerWrapper
	
	' Get handle to current databse.
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	' Create new KLER wrapper object based on Occurrence document.
	Set klerWrapper = New KlerWrapper(occurrenceDocument, True)
	
	' Detach existing KLER file.
	Call klerWrapper.DetachXmlFile
	
	' Edit KLER file.
	Call klerWrapper.EditXmlFile

	' Attach KLER file.
	Call AttachKlerFileToOccurrence(klerWrapper.OutputPath, klerWrapper.CaseDocument)
	
	' Import KLER file.
	Call ImportKlerFileToOccurrence(klerWrapper.OutputPath, klerWrapper.CaseDocument, True)
	
	' Save occurrence document.
	Call occurrenceDocument.Save(False, False)
	
End Sub

'++LotusScript Development Environment:2:1:GetKlerFileDialog:1:8
Function GetKlerFileDialog() As String
	
	On Error Goto ErrorHandle
	
	Dim currentSession As NotesSession
	Dim currentWorkspace As NotesUIWorkspace
	Dim klerDirectoryString As String
	Dim openFileDialogResponse As Variant
	
	' Get handle to current session and workspace.
	Set currentSession = New NotesSession
	Set currentWorkspace = New NotesUIWorkspace
	
	' Get previously opened KLER directory.
	klerDirectoryString = currentSession.GetEnvironmentString("KlerDirectory")
	
	' Prompt for file.
	openFileDialogResponse = currentWorkspace.OpenFileDialog(False, "Select KLER File", _
	"KLER File|*.kler", klerDirectoryString)
	
	If Not Isempty(openFileDialogResponse) Then
		
		' Set KLER directory.
		klerDirectoryString = Strleftback(openFileDialogResponse(0), "\")
		Call currentSession.SetEnvironmentVar("KlerDirectory", klerDirectoryString)
		
		' Return directory and file.
		GetKlerFileDialog = openFileDialogResponse(0)
		
	End If
	
	Exit Function
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Function
	
End Function

'++LotusScript Development Environment:2:2:ProcessKlerDecimalFields:2:8
Sub ProcessKlerDecimalFields(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerFieldNumber As String, _
	klerKsorFieldMapping List As String)
	
	On Error GoTo ErrorHandle
	
	Dim klerField As NotesItem
	Dim rmsField As NotesItem
	
	ForAll rmsFieldName In klerKsorFieldMapping
		
		Set klerField = klerDocument.GetFirstItem(ListTag(rmsFieldName) & klerFieldNumber)
		If Not klerField Is Nothing Then
			If IsNumeric(klerField.Values(0)) Then
				Set rmsField = New NotesItem(rmsDocument, rmsFieldName, "")
				rmsField.IsSummary = True
				rmsField.Values = Cdbl(klerField.Values(0))
			End If
		End If
		
	End ForAll
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & CStr( GetThreadInfo(1) ) & |, Line: | & CStr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerDC66Record:2:8
' Not Used
Sub ProcessKlerDC66Record(klerDC66Document As NotesDocument, occurrenceDocument As NotesDocument)
	
	Dim driverDocument As NotesDocument
	Dim ownerDocument As NotesDocument
	Dim vehicleDocument As NotesDocument
	
	Dim klerDC66Field As NotesItem
	Dim klerDC66FieldMapping List As String
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	' Find existing Vehicle document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerDC66Document.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "SupplementaryMV" _
		And Not rmsDocument.IsDeleted Then
			Set klerDC66Field = klerDC66Document.GetFirstItem("Unit_Number1")
			If Not klerDC66Field Is Nothing And rmsDocument.HasItem("KLERRecordID") Then
				If rmsDocument.KLERRecordID(0) = klerDC66Field.Values(0) Then
					Set vehicleDocument = rmsDocument
				End If
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
	' If vehicle does not exist, create it.
	If vehicleDocument Is Nothing Then
		
		Set vehicleDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		vehicleDocument.Form = "SupplementaryMV"
		vehicleDocument.OccurrenceNumber = occurrenceDocument.OccurrenceNumber(0)
		
		' Get key fields to link RMS document and KLER document.
		vehicleDocument.KlerCaseID = klerDC66Document.CaseID(0)
		vehicleDocument.KlerGuid = klerDC66Document.GuidVal(0)
		vehicleDocument.KlerRecordID = klerDC66Document.Unit_Number1(0)
		
		' Make Vehicle document a response to the appropriate Person.
		Set rmsDocument = rmsDocumentCollection.GetFirstDocument
		While Not rmsDocument Is Nothing
			
			If rmsDocument.Form(0) = "Person/Property" Then
				Set klerDC66Field = klerDC66Document.GetFirstItem("sa_num")
				If Not klerDC66Field Is Nothing Then
					If rmsDocument.KlerRecordID(0) = klerDC66Field.Values(0) Then
						Set driverDocument = rmsDocument
						Call vehicleDocument.MakeResponse(driverDocument)
					End If					
				End If
				Set klerDC66Field = klerDC66Document.GetFirstItem("sa_num1")
				If Not klerDC66Field Is Nothing Then
					If rmsDocument.KlerRecordID(0) = klerDC66Field.Values(0) Then
						Set ownerDocument = rmsDocument
						Call vehicleDocument.MakeResponse(ownerDocument)
					End If
				End If
			End If
			
			Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
		Wend
		
		' Exit if corresponding Person document cannot be found.
		If Not vehicleDocument.IsResponse Then
			Exit Sub
		End If
		
	End If
	
	' Driver Information
	If Not driverDocument Is Nothing Then
		
		klerDC66FieldMapping("lname") = "Surname"
		klerDC66FieldMapping("fname") = "Given1"
		klerDC66FieldMapping("middle") = "Given2"
		klerDC66FieldMapping("drlic") = "DLNumber"
		klerDC66FieldMapping("drlic_st") = "DLIssuedBy"
		Call ProcessKlerFields(klerDC66Document, driverDocument, "", klerDC66FieldMapping)
		Set klerDC66Field = klerDC66Document.GetFirstItem("dob")
		If Not klerDC66Field Is Nothing Then
			If Isdate(klerDC66Field.Values(0)) Then
				driverDocument.DOB = Cdat(klerDC66Field.Values(0))
			End If
		End If
		
		Call driverDocument.Save(False, False)
		
	End If
	
	' Vehicle Information
'	Erase klerDC66FieldMapping
'	klerDC66FieldMapping("veh_year") = ""
'	klerDC66FieldMapping("vma_code") = "TEST"
'	klerDC66FieldMapping("vmo_code") = "TEST"
'	klerDC66FieldMapping("plate") = "TEST"
'	klerDC66FieldMapping("plate_county") = "TEST"
'	klerDC66FieldMapping("state") = "TEST"
'	klerDC66FieldMapping("tagyr") = "TEST"
'	klerDC66FieldMapping("vin") = "TEST"
'	klerDC66FieldMapping("ins_co") = "TEST"
'	klerDC66FieldMapping("ins_pol") = "TEST"
	
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKsorSuspect:2:8
Sub ProcessKlerKsorSuspect(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument, _
suspectNumber As String)
	
	On Error Goto ErrorHandle
	
	Dim klerKsorFieldMapping List As String
	Dim klerKsorField As NotesItem
	Dim klerKsorVinField As NotesItem
	Dim klerKsorVehicleField As NotesItem
	Dim victimField As NotesItem
	Dim i As Integer
	Dim hasPersonDescriptors As Boolean
	Dim suspectDocument As NotesDocument
	Dim suspectVehicleDocument As NotesDocument
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	' Exit if there is no matching suspect number.
	Set klerKsorField = klerKsorDocument.GetFirstItem("suspect_num" & suspectNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "" Then
			Exit Sub			
		End If
	Else
		Exit Sub
	End If
	
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKsorDocument.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Person/Property" _
		And Not rmsDocument.IsDeleted Then
			If rmsDocument.Hasitem("SuspectNumber") then
				If rmsDocument.SuspectNumber(0) = klerKsorField.Values(0) Then
					Set suspectDocument = rmsDocument
				End If
			End if
		' Match existing vehicle to suspect vehicle via VIN.
		Elseif rmsDocument.Form(0) = "SupplementaryMV" Then
			Set klerKsorVinField = klerKsorDocument.GetFirstItem("susp" & suspectNumber & "_vin")
			If Not klerKsorVinField Is Nothing And rmsDocument.HasItem("VINNum") Then
				If rmsDocument.VINNum(0) = klerKsorVinField.Values(0) Then
					Set suspectVehicleDocument = rmsDocument
				End If
			End If
			If rmsDocument.HasItem("KLERRecordID") Then
				
				' Look for suspect vehicle without Vehicle folder entry. 
				If rmsDocument.KLERRecordID(0) = "V" & suspectNumber Then
					Set suspectVehicleDocument = rmsDocument
				End If
				
				' Look for suspect vehicle with Vehicle folder entry.
				Set klerKsorVehicleField = klerKsorDocument.GetFirstItem("vehicle_share" & suspectNumber)
				If Not klerKsorVehicleField Is Nothing Then
					If rmsDocument.KLERRecordID(0) = klerKsorVehicleField.Values(0) Then
						Set suspectVehicleDocument = rmsDocument
					End If
				End If
				
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
	' Create new Suspect document if there is no document in RMS.
	If suspectDocument Is Nothing Then		
		
		Set suspectDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		suspectDocument.Form = "Person/Property"
		
		' Get key fields to link RMS Document and KLER Document.
		suspectDocument.KLERCaseID = klerKsorDocument.CaseID(0)
		suspectDocument.KLERGUID = klerKsorDocument.GuidVal(0)
		
		suspectDocument.SuspectNumber = klerKsorField.Values(0)
		
		Call suspectDocument.MakeResponse(occurrenceDocument)
		
	End If
	
	' Handle normal Person fields.
	klerKsorFieldMapping("susp" & suspectNumber & "_lname") = "Surname"
	klerKsorFieldMapping("susp" & suspectNumber & "_fname") = "Given1"
	klerKsorFieldMapping("susp" & suspectNumber & "_middle") = "Given2"
	klerKsorFieldMapping("susp" & suspectNumber & "_homephone") = "HomePhone"
	klerKsorFieldMapping("susp" & suspectNumber & "_workphone") = "BusinessPhone"
	klerKsorFieldMapping("susp" & suspectNumber & "_race") = "Race"
	klerKsorFieldMapping("susp" & suspectNumber & "_sex") = "Sex"
	klerKsorFieldMapping("susp" & suspectNumber & "_employer") = "Employer"	
	klerKsorFieldMapping("susp" & suspectNumber & "_street_num") = "StNumber"
	klerKsorFieldMapping("susp" & suspectNumber & "_street_pre_dir") = "StPreDirection"
	klerKsorFieldMapping("susp" & suspectNumber & "_struct_num") = "BuildingUnitIdentifier"
	klerKsorFieldMapping("susp" & suspectNumber & "_street_name") = "StName"
	klerKsorFieldMapping("susp" & suspectNumber & "_street_category") = "StType"
	klerKsorFieldMapping("susp" & suspectNumber & "_street_post_dir") = "StPostDirection"
	klerKsorFieldMapping("susp" & suspectNumber & "_city") = "TownCity"
	klerKsorFieldMapping("susp" & suspectNumber & "_state") = "Prov"
	klerKsorFieldMapping("susp" & suspectNumber & "_zip") = "PostalCode"
	Call ProcessKlerFields(klerKsorDocument, suspectDocument, "", klerKsorFieldMapping)
	
	' DOB
	Set klerKsorField = klerKsorDocument.GetFirstItem("susp" & suspectNumber & "_dob")
	If Not klerKsorField Is Nothing Then
		If Isdate(klerKsorField.Values(0)) Then
			suspectDocument.DOB = Cdat(klerKsorField.Values(0))
		End If
	End If
	
	' Person Descriptors fields
	Erase klerKsorFieldMapping
	klerKsorFieldMapping("susp" & suspectNumber & "_ethnicity") = "Ethnicity"
	klerKsorFieldMapping("susp" & suspectNumber & "_hair") = "HairColour"
	klerKsorFieldMapping("susp" & suspectNumber & "_eyes") = "EyeColour"
	Call ProcessKlerFields(klerKsorDocument, suspectDocument, "", klerKsorFieldMapping)	
	
	Set klerKsorField = klerKsorDocument.GetFirstItem("susp" & suspectNumber & "_residency")
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "R" Then
			suspectDocument.ResidentIndicator = "Resident"
			hasPersonDescriptors = True	
		Elseif klerKsorField.Values(0) = "N" Then
			suspectDocument.ResidentIndicator = "Non-Resident"
			hasPersonDescriptors = True	
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("susp" & suspectNumber & "_height")
	If Not klerKsorField Is Nothing Then
		If Isnumeric(klerKsorField.Values(0)) Then
			suspectDocument.Height = Cint(klerKsorField.Values(0))
			hasPersonDescriptors = True
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("susp" & suspectNumber & "_weight")
	If Not klerKsorField Is Nothing Then
		If Isnumeric(klerKsorField.Values(0)) Then
			suspectDocument.Weight = Cint(klerKsorField.Values(0))
			hasPersonDescriptors = True
		End If
	End If
	
	' Alias
	Dim aliasArray() As String
	Dim aliasCount As Integer
	For i = 1 To 4
		Set klerKsorField = klerKsorDocument.GetFirstItem("susp" & suspectNumber & "_alias" & Cstr(i))
		If Not klerKsorField Is Nothing Then
			If klerKsorField.Values(0) <> "" Then
				aliasCount = aliasCount + 1
				Redim Preserve aliasArray(1 To i)
				aliasArray(i) = klerKsorField.Values(0)
			End If
		End If
	Next
	If aliasCount >= 1 Then
		suspectDocument.Alias = aliasArray
	End If
	
	' Suspect involvement type.	
	suspectDocument.TypeList = Fulltrim(Arrayunique(Split("Suspect" & ";" & Implode(suspectDocument.TypeList,";"),";")))
	
	' Save Suspect document.
	Call SetUpRmsDocument(suspectDocument)
	Call suspectDocument.Save(False, False)
	
	' Exit if there is no vehicle information.
	Set klerKsorField = klerKsorDocument.GetFirstItem("susp" & suspectNumber & "_vma_code")
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Vehicle
	If suspectVehicleDocument Is Nothing Then
		
		Set suspectVehicleDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		suspectVehicleDocument.Form = "SupplementaryMV"
		suspectVehicleDocument.OccurrenceNumber = occurrenceDocument.OccurrenceNumber(0)
		' TODO: Other fields? Allowable authors? Maybe copy from occ.
		
		' Get key fields to link RMS Vehicle Document and KLER KSOR Document.
		suspectVehicleDocument.KLERCaseID = klerKsorDocument.CaseID(0)
		suspectVehicleDocument.KLERGUID = klerKsorDocument.GUIDVAL(0)
		suspectVehicleDocument.KLERRecordID = "V" & suspectNumber
		
		Call suspectVehicleDocument.MakeResponse(suspectDocument)
		
	End If
	
	' Vehicle fields
	Erase klerKsorFieldMapping
	klerKsorFieldMapping("susp" & suspectNumber & "_plate") = "LicNum"
	klerKsorFieldMapping("susp" & suspectNumber & "_vma_code") = "VMake"
	klerKsorFieldMapping("susp" & suspectNumber & "_veh_year") = "ModelYr"
	klerKsorFieldMapping("susp" & suspectNumber & "_vmo_code") = "VModel"
	klerKsorFieldMapping("susp" & suspectNumber & "_vco_code") = "Colour"
	klerKsorFieldMapping("susp" & suspectNumber & "_veh_style") = "Style"
	klerKsorFieldMapping("susp" & suspectNumber & "_tagyr") = "LicYear"
	klerKsorFieldMapping("susp" & suspectNumber & "_veh_state") = "ProvState"
	klerKsorFieldMapping("susp" & suspectNumber & "_vin") = "VINNum"
	Call ProcessKlerFields(klerKsorDocument, suspectVehicleDocument, "", klerKsorFieldMapping)
	
	' Save Suspect Vehicle document.
	Call SetUpRmsDocument(suspectVehicleDocument)
	Call suspectVehicleDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ExecuteAndWaitV2:1:8
Sub ExecuteAndWaitV2(filePath As String)
	
	Dim sei As SHELLEXECUTEINFO
	Dim haWnd As Long	
	Dim X As Long
	
	haWnd = GetActiveWindow()

	sei.cbSize = Len(sei)
	sei.fMask = SEE_MASK_NOCLOSEPROCESS
	sei.hwnd = haWnd
	sei.lpVerb = "open"
	sei.lpFile = filePath
	sei.lpParameters = ""
	sei.lpDirectory = StrLeftBack(filePath, "\", 5) 'Separates the path from the name
	sei.nShow = SW_SHOWMAXIMIZED
	sei.hInstApp = 0
	sei.lpIDList = 0
	sei.lpClass = ""
	sei.hkeyClass = 0
	sei.dwHotKey = 0
	sei.hIcon = 0
	sei.hProcess = 0

	X = ShellExecuteEx(sei)
	X = WaitForSingleObject(sei.hProcess, INFINITE)
	X = CloseHandle(sei.hProcess)
	
End Sub



'++LotusScript Development Environment:2:1:GetOfficerByBadgeNumber:1:8
Function GetOfficerByBadgeNumber(badgeNumber As String) As Officer
	
	On Error Goto ErrorHandle
	
	Dim currentSession As New NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim controlView As NotesView
	Dim controlDocument As NotesDocument
	
	Dim localLookupsDatabase As NotesDatabase
	Dim employeeView As NotesView
	Dim employeeDocument As NotesDocument
	
	' Get handle to current database.
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	' Opens the Local Lookups database based on the LUPath value from RMS's Control Document.
	Set controlView = currentDatabase.GetView("(Control)")
	If Not controlView Is Nothing Then
		Set controlDocument = controlView.GetFirstDocument
	End If
	If Not controlDocument Is Nothing Then
		Set LocalLookupsDatabase = currentSession.GetDatabase( _
		currentDatabase.Server, _
		Replace(currentDatabase.FilePath, currentDatabase.FileName,"") & "/" + controlDocument.LUPath(0) _
		)
	End If
	
	If Not localLookupsDatabase Is Nothing Then	
		If localLookupsDatabase.IsOpen Then
			Set employeeView = localLookupsDatabase.GetView("Employee")
		End If
	End If
	
	If Not employeeView Is Nothing Then
		Set employeeDocument = employeeView.GetDocumentByKey(badgeNumber, True)
	End If
	
	If Not employeeDocument Is Nothing Then
		Set GetOfficerByBadgeNumber = New Officer
		GetOfficerByBadgeNumber.Name = employeeDocument.Field1(0)
		GetOfficerByBadgeNumber.Rank = employeeDocument.Field2(0)
		GetOfficerByBadgeNumber.Badge = employeeDocument.Field3(0)
		GetOfficerByBadgeNumber.District = employeeDocument.Field4(0)
		GetOfficerByBadgeNumber.Platoon = employeeDocument.Field5(0)
	End If
	
	Exit Function
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Function
	
End Function

'++LotusScript Development Environment:2:1:Encode:1:8
Function Encode(DataStream As String) As String
	Dim oUtility
	Set oUtility = CreateObject("KlerUtility.KlerData")
	Encode = oUtility.EncodeBuffer(DataStream)
	Set oUtility = Nothing
End Function
' this creates the windows process and waits for it to finish before continuing on

'++LotusScript Development Environment:2:2:ArrangePropertyDocuments:1:8
Sub ArrangePropertyDocuments(occurrenceDocument As NotesDocument, showPrompts As Boolean)
	
	On Error GoTo ErrorHandle
	
	Dim currentWorkspace As NotesUIWorkspace
	Dim currentDatabase As NotesDatabase
	
	Dim propertyCount As Integer
	Dim propertyTmp As Variant
	Dim propertyArray() As String
	
	Dim personCount As Integer
	Dim personTmp As Variant
	Dim personArray() As String
	
	Dim responseCollection As NotesDocumentCollection
	Dim responseDocument As NotesDocument
	
	Dim newParentDocument As NotesDocument
	
	Dim propertyEvalString As String
	Dim personEvalString As String
	
	Dim dialogDocument As NotesDocument
	Dim dialogOK As Boolean
	
	Set currentWorkspace = New NotesUIWorkspace
	Set currentDatabase = occurrenceDocument.ParentDatabase 
	
	propertyEvalString = {PropertyTmp:=@If(Form="SupplementaryProperty";} & _
	{@Implode(@Trim((@Implode(@Unique(@Trim(LossType:RecType:MiscOccType:PStatus));"/")+": "):} & _
	{@Text(LQtyTmp):LQtyMTmp:PMake:PModel:Item:PSerialNum);" ");"");} & _
	{MVTmp:=@If(Form="SupplementaryMV";} & _
	{@Implode(@Trim((@Implode(@Unique(@Trim(VehLossType:VehRecType:VehStatus:LossType:RecType));"/")+": "):} & _
	{LicNum:VMake:VModel:Style:Colour);" ");"");} & _
	{@If(Form="SupplementaryProperty";PropertyTmp;Form="SupplementaryMV";MVTmp;"")}
	
	personEvalString = {@If(CompanyName!="";CompanyName;@Implode(@Trim(Surname:@Trim(Given1+" "+Given2+" "+Given3));", "))} & _
	{+@If(Dob!="";" ("+@Text(@Date(DOB))+")";"")}
	
	Set responseCollection = occurrenceDocument.Responses
	Set responseDocument = responseCollection.GetFirstDocument
	While Not responseDocument Is Nothing 
		
		If Not responseDocument.IsDeleted Then
			
			If responseDocument.Form(0) = "SupplementaryProperty" _
			Or responseDocument.Form(0) = "SupplementaryMV"  Then
				
				Set newParentDocument = SetPropertyParent(responseDocument, occurrenceDocument)
				If newParentDocument Is Nothing Then				
					If responseDocument.Form(0) = "SupplementaryProperty" Then
						propertyTmp = Evaluate(propertyEvalString, responseDocument)
					Elseif responseDocument.Form(0) = "SupplementaryMV" Then
						propertyTmp = Evaluate(propertyEvalString, responseDocument)
					End If
					propertyCount = propertyCount + 1
					Redim Preserve propertyArray(1 To propertyCount) As String
					propertyArray(propertyCount) = Replace(propertyTmp(0), ";", "") & "|" & responseDocument.UniversalID
				End If
				
			Elseif responseDocument.Form(0) = "Person/Property" Then
				
				personTmp = Evaluate(personEvalString, responseDocument)
				
				personCount = personCount + 1
				Redim Preserve personArray(1 To personCount) As String
				personArray(personCount) = Replace(personTmp(0), ";", "") & "|" & responseDocument.UniversalID
				
			End If		
			
		End If
		
		Set responseDocument = responseCollection.GetNextDocument(responseDocument)
	Wend
	
	Dim unidArray As Variant
	
	Dim propertyUnid As String
	Dim propertyDocument As NotesDocument
	
	Dim personUnid As String
	Dim personDocument As NotesDocument
	
	If propertyCount > 0 And personCount > 0 And showPrompts Then
		Set dialogDocument = New NotesDocument(currentDatabase)
		dialogDocument.PersonList = personArray
		dialogDocument.PropertyList = propertyArray
		dialogDocument.OriginalPropertyList = propertyArray
		Call currentWorkspace.DialogBox("(Dialog - KLER Property)", True, True, True, _
		False, False, False, "KLER Property Assignment", dialogDocument, True)
		
		If dialogDocument.HasItem("AssignmentList") Then
			Forall assignedProperty In dialogDocument.AssignmentList
				If assignedProperty <> "" Then
					unidArray = Split(assignedProperty, "|")
					propertyUnid = unidArray(0)
					personUnid = unidArray(1)
					
					Set propertyDocument = currentDatabase.GetDocumentByUNID(propertyUnid)
					Set personDocument = currentDatabase.GetDocumentByUNID(personUnid)
					Call propertyDocument.MakeResponse(personDocument)
					Call SetUpRmsDocument(propertyDocument)
					Call propertyDocument.Save(False, False)
				End If
			End Forall			
		End If
	End If
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & CStr( GetThreadInfo(1) ) & |, Line: | & CStr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:DoProcessProperty:5:8
%REM
	Function DoProcessProperty
	Description: Comments for Function
%END REM
Function DoProcessProperty As Boolean
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim controlView As NotesView
	Dim controlDocument As NotesDocument
	
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	Set controlView = currentDatabase.GetView("(Control)")
	If Not controlView Is Nothing Then
		Set controlDocument = controlView.GetFirstDocument
	End If
	
	If Not controlDocument Is Nothing Then
		
		If controlDocument.HasItem("KLER_ProcessProperty") Then
			
			If controlDocument.KLER_ProcessProperty(0) = "Y" Then
				DoProcessProperty = True
			ElseIf controlDocument.KLER_ProcessProperty(0) = "N" Then
				DoProcessProperty = False
			Else
				DoProcessProperty = True
			End If
			
		Else
			
			DoProcessProperty = True
			
		End If
		
	Else
		
		DoProcessProperty = True
		
	End If
	
End Function

'++LotusScript Development Environment:2:2:ProcessKlerKsarOther:1:8
Sub ProcessKlerKsarOther(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument) 
	
	On Error Goto ErrorHandle
	
	Dim klerKsarField As NotesItem
	
	' Supporting Documents
	Call occurrenceDocument.RemoveItem("KIBRS_SupDocs")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "commitment_cbox", "KIBRS_SupDocs", "Commitment Order")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "copy_cbox", "KIBRS_SupDocs", "Copy of Bond")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "med_rel_cbox", "KIBRS_SupDocs", "Medical Release")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "judge_cbox", "KIBRS_SupDocs", "Judge's Notes")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "body_cbox", "KIBRS_SupDocs", "Body Receipt")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "custody_cbox", "KIBRS_SupDocs", "Custody Slip")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "sixhr_cbox", "KIBRS_SupDocs", "Six-Hour Hold")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "nta_cbox1", "KIBRS_SupDocs", "NTAS")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "incident_rep_cbox", "KIBRS_SupDocs", "Incident Report")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "evide_stored_cbox", "KIBRS_SupDocs", "Evidence Stored")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "prints_cbox", "KIBRS_SupDocs", "Prints-Photos Taken")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, occurrenceDocument, "", "other_cbox4", "KIBRS_SupDocs", "Other")
	Set klerKsarField = klerKsarDocument.GetFirstItem("other_cbox4")
	If Not klerKsarField Is Nothing Then
		If klerKsarField.Values(0) = "Y" Then
			Set klerKsarField = klerKsarDocument.GetFirstItem("other_text4")
			If Not klerKsarField Is Nothing Then
				occurrenceDocument.KIBRS_SupDocsOther = klerKsarField.Values(0)
			End If
		End If
	End If
	
	' Save Occurrence document.
	Call occurrenceDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:AttachKlerFileToOccurrence:1:8
Sub AttachKlerFileToOccurrence(klerFilePath As String, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim klerAttachmentRichTextItem As NotesRichTextItem
	
	' Attach KLER file
	If occurrenceDocument.HasItem("KlerAttachment") Then
		Set klerAttachmentRichTextItem = occurrenceDocument.GetFirstItem("KlerAttachment")
		If occurrenceDocument.HasEmbedded Then
			Forall o In klerAttachmentRichTextItem.EmbeddedObjects
				If o.Type = EMBED_ATTACHMENT Then
					Call o.Remove
				End If
			End Forall
		End If
	End If
	Set klerAttachmentRichTextItem = occurrenceDocument.GetFirstItem("KlerAttachment")
	If klerAttachmentRichTextItem Is Nothing Then
		Set klerAttachmentRichTextItem = New NotesRichTextItem(occurrenceDocument, "KlerAttachment")
	End If
	Call klerAttachmentRichTextItem.EmbedObject(EMBED_ATTACHMENT, "", klerFilePath)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKsprProperty:5:8
%REM
	Sub ProcessKLERKSPRProperty
	Description: Comments for Sub
%END REM
Sub ProcessKlerKsprProperty(klerKsprDocument As NotesDocument, occurrenceDocument As NotesDocument, propertyNumber As String)
	
	On Error GoTo ErrorHandle
	
	Dim klerKsprField As NotesItem
	Dim propertyDocument As NotesDocument
	Dim klerKsprFieldMapping List As String	
	
	' Exit if there is no property entered on the KSPR form with this number.
	Set klerKsprField = klerKsprDocument.GetFirstItem("prop_desc" & propertyNumber)
	If Not klerKsprField Is Nothing Then
		If klerKsprField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' If this property document has already been created, merge the documents else creeate a new one
	Set propertyDocument = GetMatchingPropertyItem(occurrenceDocument, klerKsprDocument, propertyNumber)
	If  propertyDocument Is Nothing Then
		
		Set propertyDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		
		propertyDocument.OccurrenceNumber = occurrenceDocument.OccurrenceNumber(0)
		
		' Get key fields to link RMS Person Document and KLER Person Document.
		propertyDocument.KLERCaseID = klerKsprDocument.CaseID(0)
		propertyDocument.KLERGUID = klerKsprDocument.GuidVal(0)
		Call propertyDocument.MakeResponse(occurrenceDocument)
		propertyDocument.Form = "SupplementaryProperty"
		
    	' Officer
		Dim reportingOfficer As Officer
		Set klerKsprField = klerKsprDocument.GetFirstItem("rep_officer_name")
		If Not klerKsprField Is Nothing Then
			Set reportingOfficer = GetOfficerByName(CStr(klerKsprField.Values(0)))
		End If
		If Not reportingOfficer Is Nothing Then
			propertyDocument.ReportingOfficer = reportingOfficer.Name
			propertyDocument.ReportingOfficerBadge = reportingOfficer.Badge
			propertyDocument.ReportingOfficerDistrict = reportingOfficer.District
			propertyDocument.ReportingOfficerPlatoon = reportingOfficer.Platoon
			propertyDocument.ReportingOfficerRank = reportingOfficer.Rank
		End If
	
	End If
	
	klerKsprFieldMapping("prop_desc") = "Item"
	klerKsprFieldMapping("type_loss") = "LossType"
	klerKsprFieldMapping("prop_code") = "KIBRS_PropType"
	klerKsprFieldMapping("prop_quantity") = "Quantity"
	klerKsprFieldMapping("prop_value") = "Pvalue"
	klerKsprFieldMapping("date_recovered") = "PRecDate"
	klerKsprFieldMapping("prop_model") = "PModel"
	klerKsprFieldMapping("prop_ncic_num") = "NCICCPICRef"
	klerKsprFieldMapping("prop_serial_num") = "PSerialNum"
	Call ProcessKlerFields(klerKsprDocument, propertyDocument, propertyNumber, klerKsprFieldMapping)
	Call SetUpRmsDocument(propertyDocument)
	
	' Save Property document.	
	Call propertyDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & CStr( GetThreadInfo(1) ) & |, Line: | & CStr(Erl)
	
	Exit Sub
	
End Sub



'++LotusScript Development Environment:2:1:ParseNumber:1:8
Private Function ParseNumber() As String
	Dim i As Integer
	Dim j  As Integer
	Dim sNumber As String	
	
	On Error Goto ErrorThrower
	
	For i = 0 To 2			'Check only the first few items.  If these fail then pass back nothing
		If Iselement(oCol(i)) Then
			If Isnumeric(Mid$(oCol(i),1,1)) Then
				For j = 1 To Len(oCol(i))
					If Isnumeric(Mid$(oCol(i),j,1)) Then
						sNumber = sNumber & Mid$(oCol(i),j,1)
						
					Else
						sNumber = sNumber & ":" & Mid$(oCol(i),j)
						ParseNumber = sNumber
						Erase oCol(i)
						Exit Function
					End If
				Next
				Erase oCol(i)
				ParseNumber = sNumber
				Exit Function
			End If
		End If
	Next	
	ParseNumber = sNumber
	
	Exit Function
	
ErrorThrower:
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	Exit Function
End Function

'++LotusScript Development Environment:2:1:ProcessKlerCaseRecord:1:8
Function ProcessKlerCaseRecord(klerCaseDocument As NotesDocument, occurrenceDocument As NotesDocument, showPrompts As Boolean) As Boolean
	
	On Error Goto ErrorHandle
	
	Dim klerCaseFieldMapping List As String
	Dim klerField As NotesItem
	Dim klerCaseNum As String
	Dim reportingOfficer As Officer
	
	Dim currentWorkspace As NotesUIWorkspace
	
	' Get handle to current workspace.
	Set currentWorkspace = New NotesUIWorkspace
	
	' Check Occurrence Number against Case Number in KLER file.
	Set klerField = klerCaseDocument.GetFirstItem("case_num")
	If Not klerField Is Nothing Then
		klerCaseNum = klerField.Values(0)
	End If
	If klerCaseNum <> occurrenceDocument.OccurrenceNumber(0) And showPrompts Then
		
		ProcessKlerCaseRecord = Cbool(currentWorkspace.Prompt(2, "Confirm Import", _
		"The Case Number of the selected KLER file is different from the Occurrence Number of the selected Occurrence." & Chr(10) & _
		"KLER Case Number: " & klerCaseNum & Chr(10) & _
		"Occurrence Number: " & occurrenceDocument.OccurrenceNumber(0) & Chr(10) & _
		"Would you like to proceed?"))
		
		If Not ProcessKlerCaseRecord Then
			Exit Function
		End If
		
	End If
	ProcessKlerCaseRecord = True
	
	' Get key fields to link RMS Occurrence Document and KLER Case Document.
	occurrenceDocument.KLERCaseID = klerCaseDocument.CaseID(0)
	occurrenceDocument.KLERGUID = klerCaseDocument.GUIDVAL(0)
	
	' Map occurrence fields from RMS Occurrence to KLER Case.
	klerCaseFieldMapping("location_city") = "TownCity"
	klerCaseFieldMapping("location_state") = "Prov"
	klerCaseFieldMapping("location_street_name") = "StName"
	klerCaseFieldMapping("location_street_num") = "StNumber"
	klerCaseFieldMapping("location_zip") = "PostalCode"
	Call ProcessKlerFields(klerCaseDocument, occurrenceDocument, "", klerCaseFieldMapping)
	
	' Reporting Officer
	Set klerField = klerCaseDocument.GetFirstItem("radio_num")
	If Not klerField Is Nothing Then
		Set reportingOfficer = GetOfficerByBadgeNumber(Cstr(klerField.Values(0)))
	End If
	If Not reportingOfficer Is Nothing Then
		occurrenceDocument.ReportingOfficer = reportingOfficer.Name
		occurrenceDocument.ReportingOfficerBadge = reportingOfficer.Badge
		occurrenceDocument.ReportingOfficerDistrict = reportingOfficer.District
		occurrenceDocument.ReportingOfficerPlatoon = reportingOfficer.Platoon
		occurrenceDocument.ReportingOfficerRank = reportingOfficer.Rank
	Else
		Erase klerCaseFieldMapping
		klerCaseFieldMapping("reporting_officer") = "ReportingOfficer"
		klerCaseFieldMapping("radio_num") = "ReportingOfficerBadge"	
		klerCaseFieldMapping("troop") = "ReportingOfficerPlatoon"
		klerCaseFieldMapping("zone") = "ReportingOfficerDistrict"
		Call ProcessKlerFields(klerCaseDocument, occurrenceDocument, "", klerCaseFieldMapping)
	End If
	
	' Handle date fields.	
	Call ProcessKlerDateTimeFields(klerCaseDocument, occurrenceDocument, "report_date",		"report_time",		"DateReported")
'	Call ProcessKlerDateTimeFields(klerCaseDocument, occurrenceDocument, "report_date",		"report_time",		"ComposedDateTime")
	Call ProcessKlerDateTimeFields(klerCaseDocument, occurrenceDocument, "incident_date",	"incident_time",	"TimeDateCommitted")
	
	' Save Occurrence document.
	Call SetUpRmsDocument(occurrenceDocument)
	Call occurrenceDocument.Save(False, False)
	
	Exit Function
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Function
	
End Function

'++LotusScript Development Environment:2:2:ProcessAddressFields:1:8
Sub ProcessAddressFields(targetDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim v As Variant
	
	v = Evaluate(|@Trim(StPreDirection + " " + StName +  " " + StType + " " + StPostDirection)|, targetDocument)
	Call targetDocument.ReplaceItemValue("Street", v(0))
	v = Evaluate(|@Trim(StNumber + " " + StNumberSuffix)|, targetDocument)
	Call targetDocument.ReplaceItemValue("StreetNumber", v(0))
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessDataGroupDocumentsToOccurrence:1:8
Sub ProcessDataGroupDocumentsToOccurrence(klerDataGroupDocuments As Variant, occurrenceDocument As NotesDocument, showPrompts As Boolean)
	
	On Error Goto ErrorHandle
	
	Dim klerCaseSuccess As Boolean
	Dim klerDataGroupDocument As NotesDocument
	
	' Loop through collection of KLER DataGroup objects. This should be all documents relating to this case.
	Forall tempDataGroupDocument In klerDataGroupDocuments
		
		Set klerDataGroupDocument = tempDataGroupDocument
		
		Select Case klerDataGroupDocument.RecordType(0)
		Case "Case":
			klerCaseSuccess = ProcessKlerCaseRecord(klerDataGroupDocument, occurrenceDocument, showPrompts)
			If Not klerCaseSuccess Then
				Exit Sub
			End If
		Case "Person":		Call ProcessKlerPersonRecord(klerDataGroupDocument, occurrenceDocument)
		End Select
		
	End Forall
	
	Forall tempDataGroupDocument In klerDataGroupDocuments
		
		Set klerDataGroupDocument = tempDataGroupDocument
		
		Select Case klerDataGroupDocument.RecordType(0)
		Case "Vehicle":	Call ProcessKLERVehicleRecord(klerDataGroupDocument, occurrenceDocument)
		End Select
		
	End Forall
	
	Forall tempDataGroupDocument In klerDataGroupDocuments
		
		Set klerDataGroupDocument = tempDataGroupDocument
		
		Select Case klerDataGroupDocument.RecordType(0)
		Case "KSOR":		Call ProcessKlerKsorRecord(klerDataGroupDocument, occurrenceDocument)
		Case "KSOSR":		Call ProcessKlerKsosrRecord(klerDataGroupDocument, occurrenceDocument)
		Case "KSAR":		Call ProcessKlerKsarRecord(klerDataGroupDocument, occurrenceDocument)
		Case "KSPR":		Call ProcessKlerKsprRecord(klerDataGroupDocument, occurrenceDocument)
		Case "KDOT_850A":	Call ProcessKlerKdot850ARecord(klerDataGroupDocument, occurrenceDocument)
		Case "KDOT_850B":	Call ProcessKlerKdot850BRecord(klerDataGroupDocument, occurrenceDocument)
		Case "KDOT_851":	Call ProcessKlerKdot851Record(klerDataGroupDocument, occurrenceDocument)
		Case "KDOT_852":	Call ProcessKlerKdot852Record(klerDataGroupDocument, occurrenceDocument)
		Case "KDOT_854":	Call ProcessKlerKdot854Record(klerDataGroupDocument, occurrenceDocument)
		Case "KDOT_855":	' Informational page
		Case "HP_122":		' Courtesty MV Accident Report
		Case "HP_129":		Call ProcessKlerHp129Record(klerDataGroupDocument, occurrenceDocument)
		Case "HP_132":		' Response To Resistance Report
		Case "HP_133":		Call ProcessKlerHp133Record(klerDataGroupDocument, occurrenceDocument)
		Case "HP_134":		' Tow Storage / Vehicle Inventory Report
		Case "HP_155":		' Supplement Checklist
		Case "HP_211":		' Crash Information Exchange
		Case "HP_250":		Call ProcessKlerHp250Record(klerDataGroupDocument, occurrenceDocument)
		Case "HP_261":		' Vehicle Pursuit Report
		Case "DC_66":		' Vehicle Insurance Information
		Case Else:		' Unknown Record Type encountered.
		End Select
		
	End Forall
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:GetKlerDatabase:1:8
Function GetKlerDatabase() As NotesDatabase
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim controlView As NotesView
	Dim controlDocument As NotesDocument
	
	Dim klerReplicaID As String
	
	' Get handle to current database.
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	' Get handle to Control Document.
	Set controlView = currentDatabase.GetView("(Control)")
	If controlView Is Nothing Then
		Exit Function
	End If
	Set controlDocument = controlView.GetFirstDocument
	If controlDocument Is Nothing Then
		Exit Function
	End If
	
	' Get Replica ID of KLER Database from Control Document.
	If controlDocument.HasItem("KLERReplicaID") Then
		klerReplicaID = controlDocument.KLERReplicaID(0)
	End If
	
	' klerReplicaID = "8525783:D0056FABB"	' KLER Template
	klerReplicaID = "862578B9:006A8E0E"	' Tonganoxie PD
	
	' Get handle to KLER Database.
	If klerReplicaID <> "" Then
		Set GetKlerDatabase = New NotesDatabase("", "")
		klerReplicaID = Replace(klerReplicaID, ":", "")
'		Call GetKlerDatabase.OpenByReplicaID(currentDatabase.Server, klerReplicaID)
		Call GetKlerDatabase.OpenByReplicaID("KLER/EnterpolHosted", klerReplicaID)
	End If
	
End Function

'++LotusScript Development Environment:2:1:FormatPhoneNumber:1:8
Function FormatPhoneNumber(unformattedPhoneNumber As String)
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim controlView As NotesView
	Dim controlDocument As NotesDocument
	
	Dim formattedPhoneNumber As String
	
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	Set controlView = currentDatabase.GetView("(Control)")
	If Not controlView Is Nothing Then
		Set controlDocument = controlView.GetFirstDocument
	End If
	
	If Not controlDocument Is Nothing Then
		
		If controlDocument.HasItem("KLER_PhoneNumberType") Then
			
			formattedPhoneNumber = Replace(unformattedPhoneNumber, "(", "")
			formattedPhoneNumber = Replace(formattedPhoneNumber, ")", "")
			formattedPhoneNumber = Replace(formattedPhoneNumber, "-", "")
			formattedPhoneNumber = Replace(formattedPhoneNumber, " ", "")
			
			If Len(formattedPhoneNumber) <> 10 Then
				
				FormatPhoneNumber = unformattedPhoneNumber
				
			Elseif controlDocument.KLER_PhoneNumberType(0) = "PD" Then	' Parentheses and dashes
				
				FormatPhoneNumber = "(" & Left(formattedPhoneNumber, 3) & ") " & Mid(formattedPhoneNumber, 4, 3) & "-" & Right(formattedPhoneNumber, 4)
				
			Elseif controlDocument.KLER_PhoneNumberType(0) = "D" Then ' Dashes
				
				FormatPhoneNumber = Left(formattedPhoneNumber, 3) & "-" & Mid(formattedPhoneNumber, 4, 3) & "-" & Right(formattedPhoneNumber, 4)
				
			Elseif controlDocument.KLER_PhoneNumberType(0) = "N" Then ' Nothing
				
				FormatPhoneNumber = formattedPhoneNumber
				
			Else
				
				FormatPhoneNumber = unformattedPhoneNumber
			
			End If
			
		Else
			
			FormatPhoneNumber = unformattedPhoneNumber
			
		End If
		
	Else
		
		FormatPhoneNumber = unformattedPhoneNumber		
		
	End If
	
End Function



'++LotusScript Development Environment:2:1:SetPropertyParent:1:8
Function SetPropertyParent(propertyDocument As NotesDocument, occurrenceDocument As NotesDocument) As NotesDocument
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim currentParentDocument As NotesDocument
	
	Dim responseCollection As NotesDocumentCollection
	Dim responseDocument As NotesDocument
	
	Dim personCount As Integer
	Dim onlyPersonDocument As NotesDocument
	
	Set currentSession = New NotesSession
	Set currentDatabase = occurrenceDocument.ParentDatabase
	
	Set currentParentDocument = currentDatabase.GetDocumentByUNID(propertyDocument.ParentDocumentUNID)
	If currentParentDocument.Form(0) = "Person/Property" Then
		Set SetPropertyParent = currentParentDocument
		Exit Function
	End If
	
	Set responseCollection = occurrenceDocument.Responses
	Set responseDocument = responseCollection.GetFirstDocument
	While Not responseDocument Is Nothing
		
		If responseDocument.Form(0) = "Person/Property" Then
			personCount = personCount + 1
			Set onlyPersonDocument = responseDocument
		End If
		
		Set responseDocument = responseCollection.GetNextDocument(responseDocument)
	Wend
	
	If personCount = 1 Then
		Set SetPropertyParent = onlyPersonDocument
		Call propertyDocument.MakeResponse(onlyPersonDocument)
		Call propertyDocument.Save(False, False)
		Exit Function
	End If
	
End Function


'++LotusScript Development Environment:2:1:GetOfficerByName:5:8
%REM
	Function GetOfficerByName
	Description: Comments for Function
%END REM
Function GetOfficerByName(officerName As String) As Officer
	On Error GoTo ErrorHandle
	
	Dim currentSession As New NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim controlView As NotesView
	Dim controlDocument As NotesDocument
	
	Dim localLookupsDatabase As NotesDatabase
	Dim employeeView As NotesView
	Dim employeeDocument As NotesDocument
	
	' Get handle to current database.
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	' Opens the Local Lookups database based on the LUPath value from RMS's Control Document.
	Set controlView = currentDatabase.GetView("(Control)")
	If Not controlView Is Nothing Then
		Set controlDocument = controlView.GetFirstDocument
	End If
	If Not controlDocument Is Nothing Then
		Set LocalLookupsDatabase = currentSession.GetDatabase( _
		currentDatabase.Server, _
		Replace(currentDatabase.FilePath, currentDatabase.FileName,"") & "/" + controlDocument.LUPath(0) _
		)
	End If
	
	If Not localLookupsDatabase Is Nothing Then	
		If localLookupsDatabase.IsOpen Then
			Set employeeView = localLookupsDatabase.GetView("Employeebyname")
		End If
	End If
	
	If Not employeeView Is Nothing Then
		Set employeeDocument = employeeView.GetDocumentByKey(officerName, True)
	End If
	
	If Not employeeDocument Is Nothing Then
		Set GetOfficerByName = New Officer
		GetOfficerByName.Name = employeeDocument.Field1(0)
		GetOfficerByName.Rank = employeeDocument.Field2(0)
		GetOfficerByName.Badge = employeeDocument.Field3(0)
		GetOfficerByName.District = employeeDocument.Field4(0)
		GetOfficerByName.Platoon = employeeDocument.Field5(0)
	End If
	
	Exit Function
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & CStr( GetThreadInfo(1) ) & |, Line: | & CStr(Erl)
	
	Exit Function
End Function



'++LotusScript Development Environment:2:1:GetCaseNumberFromKlerFile:1:8
Function GetCaseNumberFromKlerFile(klerFilePath As String) As String
	
	On Error GoTo ErrorHandle
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim dataGroupDocuments() As NotesDocument
	Dim dataGroupDocumentCount As Integer
	Dim dataGroupDocument As NotesDocument
	
	Dim klerCase As KLERCase

	Dim caseNumString As String
	
	' Get handle to current database.
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	' Create new KLERCase object and load file.
	Set klerCase = New KLERCase	
	Call klerCase.LoadFile(klerFilePath)
		
	' Loop through KLER case's forms and datagroups.
	ForAll klerCaseForm In klerCase.CaseForms
		
		ForAll klerDataGroup In klerCaseForm.DataGroups
			
			ForAll klerPage In klerDataGroup.Pages
				If IsElement(klerPage.FieldValues("case_num")) Then
					caseNumString = klerPage.FieldValues("case_num")
				End If
			End ForAll
								
		End ForAll
		
	End ForAll
	
	GetCaseNumberFromKlerFile = caseNumString

Done:	
	Exit Function
	
ErrorHandle:
	
	If Err = 4602 Then
		Resume Done
	Else
		Error Err, Err & " " & Error & Chr(13) &_
		|Module: | & CStr( GetThreadInfo(1) ) & |, Line: | & CStr(Erl)	
	End If
	
	Exit Function
	
End Function

'++LotusScript Development Environment:2:2:ProcessKlerHP129Record:5:8
%REM
	Sub ProcessKlerHP129Record
	Description: Comments for Sub
%END REM
Sub ProcessKlerHP129Record(klerHp129Document As NotesDocument, occurrenceDocument As NotesDocument)
		
	On Error GoTo ErrorHandle
	
	Dim klerHp129FieldMapping List As String
	Dim klerHp129Field As NotesItem
	
	Dim i As Integer
	Dim personDocument As NotesDocument
	Dim hasPersonDescriptors As Boolean
	
	Dim evaluateTemp As Variant
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
		
	' Find existing Person document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerHp129Document.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Person/Property" _
		And Not rmsDocument.IsDeleted Then
			
			Set klerHp129Field = klerHp129Document.GetFirstItem("person_share1")
			If Not klerHp129Field Is Nothing And rmsDocument.HasItem("KLERRecordID") Then
				If rmsDocument.KLERRecordID(0) = klerHp129Field.Values(0) Then
					Set personDocument = rmsDocument
				End If
			End If
						
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
	
	' Create new document if there is no document in RMS.
	If personDocument Is Nothing Then
		
		Set personDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		personDocument.Form = "Person/Property"
		
		' Get key fields to link RMS Document and KLER Document.
		personDocument.KLERCaseID = klerHp129Document.CaseID(0)
		personDocument.KLERGUID = klerHp129Document.GuidVal(0)
		
		Call personDocument.MakeResponse(occurrenceDocument)
		
	End If
	
	Call ProcessKlerDateTimeFields(klerHp129Document, personDocument, "incident_date", "incident_time", "KAIR_ContactDateTime")
	
	evaluateTemp = Evaluate( _
	|StreetNumber := incident_location_street_num;| & _
	|Street := @Trim(incident_location_street_pre_dir + " " + incident_location_street_name +  " " + incident_location_street_category + " " + incident_location_street_post_dir);| & _
	|LocDisplay := incident_location_street_occ_num;| & _
	|@Implode(@Trim(@Implode(@Trim(StreetNumber:Street);" "):@Implode(@Trim(incident_location_city:incident_location_state);", "));", "):LocDisplay|, _
	klerHp129Document)
	personDocument.KAIR_Location = evaluateTemp(0)
	
	' incident_location_street_num, incident_location_struct_num, incident_location_street_pre_dir, incident_location_street_name, incident_location_street_post_dir, incident_location_street_occ_code, incident_location_street_occ_num, incident_location_state, incident_location_city, incident_location_zip
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "weaving_cbox", 			"KAIR_LanePosition", "Weaving")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "weaving_across_cbox",		"KAIR_LanePosition", "WeavingLanes")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "straddling_center_cbox",	"KAIR_LanePosition", "Straddling")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "turning_cbox",			"KAIR_LanePosition", "WideTurn")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "almost_striking_cbox",	"KAIR_LanePosition", "Striking")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "swerving_cbox",			"KAIR_LanePosition", "Swerving")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "drifting_cbox",			"KAIR_LanePosition", "Drifting")
		
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "stopping_cbox", 			"KAIR_Speed", "Stopping")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "accelerating_cbox",		"KAIR_Speed", "Accelerating")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "varying_speed_cbox",		"KAIR_Speed", "VaryingSpeed")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "slow_speed_cbox",			"KAIR_Speed", "SlowSpeed")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "other_cbox",				"KAIR_Speed", "Other")
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "driving_opposing_cbox",	"KAIR_VigilanceProblems", "opposing")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "slow_response_cbox",		"KAIR_VigilanceProblems", "SlowSignals")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "slow_failure_cbox",		"KAIR_VigilanceProblems", "OfficerSignals")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "stoping_inlane_cbox",		"KAIR_VigilanceProblems", "StoppingNoReason")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "headlights_off_cbox",		"KAIR_VigilanceProblems", "NoHeadlights")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "failure_to_signal_cbox",	"KAIR_VigilanceProblems", "TurnSignals")
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "following_too_closely_cbox",		"KAIR_JudgmentProblems", "FollowingClosely")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "improper_lane_change_cbox",		"KAIR_JudgmentProblems", "LaneChange")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "illegal_improper_turn_cbox",		"KAIR_JudgmentProblems", "IllegalTurn")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "designated_roadway_cbox",			"KAIR_JudgmentProblems", "OtherRoadway")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "stopping_inappropriately_cbox",	"KAIR_JudgmentProblems", "ResponseToOfficer")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "inappropriate_or_unusual_cbox",	"KAIR_JudgmentProblems", "behavior")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "appearing_impaired_cbox",			"KAIR_JudgmentProblems", "AppearImpaired")
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "weather_cloudy_cbox",	"KAIR_Weather", "Cloudy")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "windy_cbox",			"KAIR_Weather", "Windy")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "rain_fog_cbox",		"KAIR_Weather", "Rain")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "fog_cbox",			"KAIR_Weather", "Fog")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "snow_cbox",			"KAIR_Weather", "Snow")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "sleet_cbox",			"KAIR_Weather", "Sleet")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "other_weather_cbox",	"KAIR_Weather", "Other")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "inmotion_normal_cbox1", "KAIR_ReactionToEmergencyEquip", "Normal")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "inmotion_slow_cbox1", "KAIR_ReactionToEmergencyEquip", "Slow")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "inmotion_other_cbox1", "KAIR_ReactionToEmergencyEquip", "Other")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "stopped_yes_cbox", "KAIR_StoppedVehicleProperly", "Yes")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "stopped_no_cbox", "KAIR_StoppedVehicleProperly", "No")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "stopped_other_cbox", "KAIR_StoppedVehicleProperly", "Other")
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "leaning_on_vehicle",			"KAIR_PersonalContact", "Leaning")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "difficulty_vehicle_controls",	"KAIR_PersonalContact", "VehicleControls")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "repeating_questions",			"KAIR_PersonalContact", "Repeating")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "incorrect_info",				"KAIR_PersonalContact", "IncorrectInformation")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "fumbled_with_dl",				"KAIR_PersonalContact", "Fumbling")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "slow_respond",				"KAIR_PersonalContact", "SlowReaction")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "odor_alcoholic_beverage",		"KAIR_PersonalContact", "Odor")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "unsteady_balance",			"KAIR_PersonalContact", "Swaying")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "difficulty_exit",				"KAIR_PersonalContact", "Exiting")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "speech_slurred",				"KAIR_PersonalContact", "Slurred")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "drugsalcohol_yes_cbox",	"KAIR_AlcDrugParaphInVehicle", "Yes")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "drugsalcohol_no_cbox",		"KAIR_AlcDrugParaphInVehicle", "No")
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "eyes_bloodshot_cbox",	"KAIR_Eyes", "Bloodshot")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "eyes_water_cbox",		"KAIR_Eyes", "Watery")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "eyes_glazed_cbox",	"KAIR_Eyes", "Glazed")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "eyes_droopy_cbox",	"KAIR_Eyes", "Droopy")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "eyes_normal_cbox",	"KAIR_Eyes", "Normal")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "eyes_other_cbox",		"KAIR_Eyes", "Other")
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_polite_cbox",			"KAIR_AttitudeActions", "Polite")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_cooperative_cbox",	"KAIR_AttitudeActions", "Cooperative")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "actions_hiccoughing_cbox","KAIR_AttitudeActions", "Hiccoughing")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_excited_cbox",		"KAIR_AttitudeActions", "Excited")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_indifferent_cbox",	"KAIR_AttitudeActions", "Indifferent")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "profanity_cbox",			"KAIR_AttitudeActions", "Profanity")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_talkative_cbox",		"KAIR_AttitudeActions", "Talkative")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_insulting_cbox",		"KAIR_AttitudeActions", "Insulting")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_carefree_cbox",		"KAIR_AttitudeActions", "Carefree")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_cocky_cbox",			"KAIR_AttitudeActions", "Cocky")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_sleepy_cbox",			"KAIR_AttitudeActions", "Sleepy")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_combative_cbox",		"KAIR_AttitudeActions", "Combative")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_abusive_cbox",		"KAIR_AttitudeActions", "Abusive")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_antogonistic_cbox",	"KAIR_AttitudeActions", "Antagonistic")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "actions_laughing_cbox",	"KAIR_AttitudeActions", "Laughing")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "actions_crying_cbox",		"KAIR_AttitudeActions", "Crying")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "actions_belching_cbox",	"KAIR_AttitudeActions", "Belching")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "actions_vomiting_cbox",	"KAIR_AttitudeActions", "Vomiting")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "atd_other_cbox",			"KAIR_AttitudeActions", "Other")
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "clothing_stained_cbox",		"KAIR_Clothing", "Stained")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "clothing_dirty_cbox",			"KAIR_Clothing", "Dirty")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "clothing_wet_cbox",			"KAIR_Clothing", "Wet")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "clothing_unbuttoned_cbox",	"KAIR_Clothing", "Unbuttoned")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "clothing_unzipped_cbox",		"KAIR_Clothing", "Unzipped")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "clothing_other_cbox",			"KAIR_Clothing", "Other")
	
	Erase klerHp129FieldMapping
	klerHp129FieldMapping("other_text") = "KAIR_Speed_Other"
	klerHp129FieldMapping("description") = "KAIR_Weather_Other"
	klerHp129FieldMapping("reaction_time") = "KAIR_Reaction_Other"
	klerHp129FieldMapping("stopped_comments") = "KAIR_StoppedVehicle_Other"
	klerHp129FieldMapping("alcohol_drugs_text") = "KAIR_AlcDrugParaphDescription"
	klerHp129FieldMapping("eyes_comments") = "KAIR_EyesOther"
	klerHp129FieldMapping("atd_comments") = "KAIR_AttitudeOther"
	klerHp129FieldMapping("clothing_other_text") = "KAIR_ClothingOther"
	klerHp129FieldMapping("clothing_description") = "KAIR_ClothingDescription"
	klerHp129FieldMapping("footwear_description") = "KAIR_FootWear"
	Call ProcessKlerFields(klerHp129Document, personDocument, "", klerHp129FieldMapping)
			
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "eyes_track_yes_cbox",			"KAIR_HGN", "1")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "pupils_yes_cbox",				"KAIR_HGN", "2")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "resting_nystagmus_yes_cbox",	"KAIR_HGN", "3")
		
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "Left1",	"KAIR_HGN_SmoothPursuit", "Left")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "Right1",	"KAIR_HGN_SmoothPursuit", "Right")
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "Left2",	"KAIR_HGN_MaxDev", "Left")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "Right2",	"KAIR_HGN_MaxDev", "Right")
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "Left3",	"KAIR_HGN_PriorTo45", "Left")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "Right3",	"KAIR_HGN_PriorTo45", "Right")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "vertical_nystag_yes_cbox", "KAIR_HGN_VerticalNystagmus", "Y")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "vertical_nystag_no_cbox", "KAIR_HGN_VerticalNystagmus", "N")

	Erase klerHp129FieldMapping
	klerHp129FieldMapping("nystagmus_look") = "KAIR_HGN_Stimulus"
	klerHp129FieldMapping("total") = "KAIR_HGN_Total"
	klerHp129FieldMapping("comments") = "KAIR_WT_Comments"
	Call ProcessKlerFields(klerHp129Document, personDocument, "", klerHp129FieldMapping)
	
	Erase klerHp129FieldMapping
	klerHp129FieldMapping("loses_balance") = "KAIR_WT_LosesBalance"
	klerHp129FieldMapping("starts_before") = "KAIR_WT_StartEarly"
	klerHp129FieldMapping("scoring_pad1") = "KAIR_WT_StopWhileWalking"
	klerHp129FieldMapping("scoring_pad2") = "KAIR_WT_NoHeelToe"
	klerHp129FieldMapping("scoring_pad3") = "KAIR_WT_StepOffLine"
	klerHp129FieldMapping("scoring_pad4") = "KAIR_WT_UsesArms"
	klerHp129FieldMapping("scoring_pad5") = "KAIR_WT_ImproperTurn"
	klerHp129FieldMapping("scoring_pad6") = "KAIR_WT_WrongNumberOfSteps"
	klerHp129FieldMapping("scoring_pad7") = "KAIR_WT_StopWhileWalking_1"
	klerHp129FieldMapping("scoring_pad8") = "KAIR_WT_NoHeelToe_1"
	klerHp129FieldMapping("scoring_pad9") = "KAIR_WT_StepOffLine_1"
	klerHp129FieldMapping("scoring_pad10") = "KAIR_WT_UsesArms_1"
	klerHp129FieldMapping("scoring_pad12") = "KAIR_WT_WrongNumberOfSteps_1"
	klerHp129FieldMapping("score_total") = "KAIR_WT_Total"
	Call ProcessKlerNumericFields(klerHp129Document, personDocument, "", klerHp129FieldMapping)
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "cannot_do_test1", "KAIR_WT_CantDoTest", "Y")
	
	Erase klerHp129FieldMapping
	klerHp129FieldMapping("footstep_bot_l") = "KAIR_WT_Starting"
	klerHp129FieldMapping("footstep_top_l") = "KAIR_WT_Turn"
	klerHp129FieldMapping("footstep_bot1") = "KAIR_WT_Step_1"
	klerHp129FieldMapping("footstep_bot2") = "KAIR_WT_Step_2"
	klerHp129FieldMapping("footstep_bot3") = "KAIR_WT_Step_3"
	klerHp129FieldMapping("footstep_bot4") = "KAIR_WT_Step_4"
	klerHp129FieldMapping("footstep_bot5") = "KAIR_WT_Step_5"
	klerHp129FieldMapping("footstep_bot6") = "KAIR_WT_Step_6"
	klerHp129FieldMapping("footstep_bot7") = "KAIR_WT_Step_7"
	klerHp129FieldMapping("footstep_bot8") = "KAIR_WT_Step_8"
	klerHp129FieldMapping("footstep_bot9") = "KAIR_WT_Step_9"
	klerHp129FieldMapping("footstep_top1") = "KAIR_WT_Step_10"
	klerHp129FieldMapping("footstep_top2") = "KAIR_WT_Step_11"
	klerHp129FieldMapping("footstep_top3") = "KAIR_WT_Step_12"
	klerHp129FieldMapping("footstep_top4") = "KAIR_WT_Step_13"
	klerHp129FieldMapping("footstep_top5") = "KAIR_WT_Step_14"
	klerHp129FieldMapping("footstep_top6") = "KAIR_WT_Step_15"
	klerHp129FieldMapping("footstep_top7") = "KAIR_WT_Step_16"
	klerHp129FieldMapping("footstep_top8") = "KAIR_WT_Step_17"
	klerHp129FieldMapping("footstep_top9") = "KAIR_WT_Step_18"
	Call ProcessKlerFields(klerHp129Document, personDocument, "", klerHp129FieldMapping)
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "cannot_do_test2", "KAIR_OLS_CantDoTest", "Y")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "leg_raise_right_cbox", "KAIR_OLS_LegRaised", "R")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "leg_raise_left_cbox", "KAIR_OLS_LegRaised", "L")

	Erase klerHp129FieldMapping
	klerHp129FieldMapping("legscoring_pad1") = "KAIR_OLS_SwaysWhileBalancing"
	klerHp129FieldMapping("legscoring_pad2") = "KAIR_OLS_UsesArms"
	klerHp129FieldMapping("legscoring_pad3") = "KAIR_OLS_Hopping"
	klerHp129FieldMapping("legscoring_pad4") = "KAIR_OLS_PutFootDown"
	klerHp129FieldMapping("legtest_total") = "KAIR_OLS_Total"
	Call ProcessKlerNumericFields(klerHp129Document, personDocument, "", klerHp129FieldMapping)
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "consent_given_yes_cbox", "KAIR_ADV_ICA_Given", "Yes")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "consent_given_no_cbox", "KAIR_ADV_ICA_Given", "No")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "consent_read_yes_cbox", "KAIR_ADV_ICA_Read", "Yes")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "consent_read_no_cbox", "KAIR_ADV_ICA_Read", "No")
	
	Erase klerHp129FieldMapping
	klerHp129FieldMapping("consent_time") = "KAIR_ADV_ICA_Time"
	klerHp129FieldMapping("cdl_time") = "KAIR_ADV_CDL5_Time"
	Call ProcessKlerFields(klerHp129Document, personDocument, "", klerHp129FieldMapping)
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "cdl_yes_cbox", "KAIR_ADV_CDL5_Given", "Yes")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "cdl_no_cbox", "KAIR_ADV_CDL5_Given", "No")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "cdl_read_yes_cbox", "KAIR_ADV_CDL5_Read", "Yes")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "cdl_read_no_cbox", "KAIR_ADV_CDL5_Read", "No")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "mouth_yes_cbox", "KAIR_ChemTest_Mouth", "Y")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "mouth_no_cbox", "KAIR_ChemTest_Mouth", "N")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "visual_inspect_yes_cbox", "KAIR_ChemTest_MouthInspected", "Y")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "visual_inspect_no_cbox", "KAIR_ChemTest_MouthInspected", "N")
	
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "chem_test_blood_cbox",	"KAIR_ChemTest_TypeOfTest", "Blood")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "breath_cbox",				"KAIR_ChemTest_TypeOfTest", "Breath")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "chem_test_urine_cbox",	"KAIR_ChemTest_TypeOfTest", "Urine")
	Call ProcessKlerCheckboxMulti(klerHp129Document, personDocument, "", "refused_cbox",			"KAIR_ChemTest_TypeOfTest", "Refused")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "breath_test_8000_cbox", "KAIR_ChemTest_BreathType", "8000")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "breath_test_other_cbox", "KAIR_ChemTest_BreathType", "Other")
		
	evaluateTemp = Evaluate( _
	|StreetNumber := location_street_num;| & _
	|Street := @Trim(location_street_pre_dir + " " + location_street_name +  " " + location_street_category + " " + location_street_post_dir);| & _
	|LocDisplay := location_street_occ_num;| & _
	|@Implode(@Trim(@Implode(@Trim(StreetNumber:Street);" "):@Implode(@Trim(location_city:location_state);", "));", "):LocDisplay|, _
	klerHp129Document)
	personDocument.KAIR_ChemTest_TestLocation = evaluateTemp(0)
	
	Call ProcessKlerDateTimeFields(klerHp129Document, personDocument, "sample_taken_date", "sample_taken_time", "KAIR_ChemTest_DateTime")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "additional_test_yes_cbox", "KAIR_ChemTest_AdditionalTest", "Y")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "additional_test_no_cbox", "KAIR_ChemTest_AdditionalTest", "N")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "pbt_yes_cbox", "KAIR_ChemTest_PBT", "Y")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "pbt_no_cbox", "KAIR_ChemTest_PBT", "N")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "pbt_refused_cbox", "KAIR_ChemTest_PBT", "R")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "alc_yes_cbox", "KAIR_ChemTest_AlcoholPresent", "Y")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "alc_no_cbox", "KAIR_ChemTest_AlcoholPresent", "N")
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "dre_yes_cbox", "KAIR_ChemTest_DRENotified", "Y")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "dre_no_cbox", "KAIR_ChemTest_DRENotified", "N")
	
	Erase klerHp129FieldMapping
	klerHp129FieldMapping("breath_test_other_desc") = "KAIR_ChemTest_BreathOther"
	klerHp129FieldMapping("witness_lname") = "KAIR_ChemTest_TestWitness"
	klerHp129FieldMapping("observ_time_started") = "KAIR_ChemTest_ObservationStarted"
	klerHp129FieldMapping("sample_taken_by_lname") = "KAIR_ChemTest_SampleTakenBy"
	klerHp129FieldMapping("analyzed_by") = "KAIR_ChemTest_AnalyzedByName"
	klerHp129FieldMapping("agency_name") = "KAIR_ChemTest_AgencyAnalyzedBy"
	Call ProcessKlerFields(klerHp129Document, personDocument, "", klerHp129FieldMapping)
	
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "drugs_yes_cbox", "KAIR_ChemTest_DrugsPresent", "Y")
	Call ProcessKlerCheckbox(klerHp129Document, personDocument, "", "drugs_no_cbox", "KAIR_ChemTest_DrugsPresent", "N")
	
	Erase klerHp129FieldMapping
	klerHp129FieldMapping("testresults") = "KAIR_ChemTest_BreathTestResult"
	Call ProcessKlerFields(klerHp129Document, personDocument, "", klerHp129FieldMapping)
	
	Call ProcessKlerDateTimeFields(klerHp129Document, personDocument, "chem_test_date", "chem_test_time", "KAIR_ChemTest_AnalyzedDateTime")
	
	Call ProcessKlerDateTimeFields(klerHp129Document, personDocument, "pa_interview_date", "pa_interview_time", "KAIR_Interview_MirandaDateTime")
	
	Erase klerHp129FieldMapping
	klerHp129FieldMapping("pa_vehicle") = "KAIR_Interview_q1"
	klerHp129FieldMapping("pa_where_going") = "KAIR_Interview_q2"
	klerHp129FieldMapping("pa_coming_from") = "KAIR_Interview_q3"
	klerHp129FieldMapping("pa_road_on") = "KAIR_Interview_q4"
	klerHp129FieldMapping("pa_direction") = "KAIR_Interview_q5"
	klerHp129FieldMapping("pa_date_time") = "KAIR_Interview_q6"
	klerHp129FieldMapping("pa_drinking") = "KAIR_Interview_q7"
	klerHp129FieldMapping("pa_what") = "KAIR_Interview_q8"
	klerHp129FieldMapping("pa_how_much") = "KAIR_Interview_q9"
	klerHp129FieldMapping("pa_where_drinking") = "KAIR_Interview_q10"
	klerHp129FieldMapping("pa_time_started") = "KAIR_Interview_q11"
	klerHp129FieldMapping("pa_time_stop") = "KAIR_Interview_q12"
	klerHp129FieldMapping("pa_operate_veh") = "KAIR_Interview_q13"
	klerHp129FieldMapping("pa_under_influence_now") = "KAIR_Interview_q14"
	klerHp129FieldMapping("pa_injured_or_ill") = "KAIR_Interview_q15"
	klerHp129FieldMapping("pa_what_injuries") = "KAIR_Interview_q16"
	klerHp129FieldMapping("pa_accident") = "KAIR_Interview_q17"
	klerHp129FieldMapping("pa_drinking_since") = "KAIR_Interview_q18"
	klerHp129FieldMapping("pa_dr_recently") = "KAIR_Interview_q19"
	klerHp129FieldMapping("pa_when") = "KAIR_Interview_q20"
	klerHp129FieldMapping("pa_why1") = "KAIR_Interview_q20_a"
	klerHp129FieldMapping("pa_medicines") = "KAIR_Interview_q21"
	klerHp129FieldMapping("pa_what_medicine") = "KAIR_Interview_q22"
	klerHp129FieldMapping("pa_diabeti") = "KAIR_Interview_q23"
	klerHp129FieldMapping("pa_insulin") = "KAIR_Interview_q24"
	klerHp129FieldMapping("pa_last_dose") = "KAIR_Interview_q25"
	klerHp129FieldMapping("pa_epileptic") = "KAIR_Interview_q26"
	klerHp129FieldMapping("pa_false_teeth") = "KAIR_Interview_q27"
	klerHp129FieldMapping("pa_last_sleep") = "KAIR_Interview_q28"
	klerHp129FieldMapping("pa_how_many_hours") = "KAIR_Interview_q29"
	klerHp129FieldMapping("pa_last_eat") = "KAIR_Interview_q30"
	klerHp129FieldMapping("pa_see_doctor") = "KAIR_Interview_q31"
	klerHp129FieldMapping("pa_why2") = "KAIR_Interview_q32"
	klerHp129FieldMapping("pa_comments") = "KAIR_Interview_Comments"
	Call ProcessKlerFields(klerHp129Document, personDocument, "", klerHp129FieldMapping)
	
	personDocument.KAIR_Interview_q6_a = ""
	Set klerHp129Field = klerHp129Document.GetFirstItem("pa_actual_date")
	If Not klerHp129Field Is Nothing Then
		personDocument.KAIR_Interview_q6_a = klerHp129Field.Values(0)
	End If
	Set klerHp129Field = klerHp129Document.GetFirstItem("pa_actual_time")
	If Not klerHp129Field Is Nothing Then
		personDocument.KAIR_Interview_q6_a = personDocument.KAIR_Interview_q6_a(0) & " " & klerHp129Field.Values(0)
	End If
	
	' Involvement type.	
	personDocument.TypeList = FullTrim(ArrayUnique(Split("Accused" & ";" & Implode(personDocument.TypeList,";"),";")))
	
	' Subform
	personDocument.LoadedSubForms = FullTrim(ArrayUnique(Split("Alcohol Influence KS" & ";" & Implode(personDocument.LoadedSubForms,";"),";")))
	
	' Save Person document.
	Call SetUpRmsDocument(personDocument)
	Call personDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & CStr( GetThreadInfo(1) ) & |, Line: | & CStr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:CreateGuid:1:8
Function CreateGuid As String
	
	Dim length As Integer
	Dim radix As Integer
	
	length = 0
	radix = 0
	
 	'Private array of chars to use
	Dim chars As Variant
	Chars = Split("0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z", ",")
	Dim i As Integer
	
	Dim theuuid(36) As String
	
	If length>0 Then 
		'Compact form
		
		If radix=0 Then radix = Ubound(chars)
		
		For i = 1 To length
			theuuid(i) = chars(Rnd()*(radix-1))
		Next
		
	Else
		'RFC4122, version 4 form
		Dim r As Double
		
      		'rfc4122 requires these characters
		
		theuuid(9) = "-"
		theuuid(14) = "-"
		theuuid(19) = "-"
		theuuid(24) = "-"
		
		theuuid(15) = "4"
		
		'Fill in random data.  At i=20 set the high bits of clock sequence as
	     	'per rfc4122, sec. 4.1.5
		For i = 1 To 36
			If theuuid(i)="" Then
				r = Round(Rnd()*15,0)
				
				If i=20 Then
					theuuid(i) = chars( ( r And &H3 ) Or &H8 )
				Else
					theuuid(i) = chars( r And &HF )
				End If
			End If
		Next
	End If
	
	CreateGuid = Join(theuuid, "")
End Function





'++LotusScript Development Environment:2:2:ProcessKlerKsarClearance:2:8
Sub ProcessKlerKsarClearance(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument, _
	clearanceFieldNumber As String)
	
	On Error Goto ErrorHandle
	
	Dim klerKsarFieldMapping List As String
	Dim klerKsarField As NotesItem
	Dim arresteeField As NotesItem
	Dim i As Integer	
	Dim hasPersonDescriptors As Boolean
	Dim clearanceDocument As NotesDocument
	Dim arresteeDocument As NotesDocument
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	' Exit if there is no Clearance with this number (based on Case Number field).
	Set klerKsarField = klerKsarDocument.GetFirstItem("casenum" & clearanceFieldNumber)
	If Not klerKsarField Is Nothing Then
		If klerKsarField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Exit if there is no Arrestee number.
	Set klerKsarField = klerKsarDocument.GetFirstItem("arrestee_num")
	If Not klerKsarField Is Nothing Then
		If klerKsarField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Find existing Clearance document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKsarDocument.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "KIBRS Incident Clearance" _
		And Not rmsDocument.IsDeleted Then
			If rmsDocument.KlerKsarClearanceNumber(0) = klerKsarDocument.GuidVal(0) & "Clearance" & clearanceFieldNumber Then
				Set clearanceDocument = rmsDocument
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
	If clearanceDocument Is Nothing Then
		
		' Find existing Arrestee document.
		Set rmsDocument = rmsDocumentCollection.GetFirstDocument
		While Not rmsDocument Is Nothing
			
			If rmsDocument.Form(0) = "Person/Property" Then
				Set klerKsarField = klerKsarDocument.GetFirstItem("arrestee_num")
				If Not klerKsarField Is Nothing Then
					If rmsDocument.ArresteeNumber(0) = klerKsarField.Values(0) Then
						Set arresteeDocument = rmsDocument
					End If
				End If
			End If
			
			Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
		Wend
		If arresteeDocument Is Nothing Then
			Exit Sub
		End If
		
		Set clearanceDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		clearanceDocument.Form = "KIBRS Incident Clearance"
		clearanceDocument.OccurrenceNumber = occurrenceDocument.OccurrenceNumber(0)
		
		' Get key fields to link RMS Document and KLER Document.
		clearanceDocument.KLERCaseID = klerKsarDocument.CaseID(0)
		clearanceDocument.KlerKsarClearanceNumber = klerKsarDocument.GuidVal(0) & "Clearance" & clearanceFieldNumber
		
		Call clearanceDocument.MakeResponse(arresteeDocument)
		
	End If
	
	' Case Number
	klerKsarFieldMapping("casenum") = "KIBRS_OccNumClr"
	klerKsarFieldMapping("additional_charges") = "KIBRS_AdditionalCharges"
	klerKsarFieldMapping("local_code") = "KIBRS_LocalCode"
	Call ProcessKlerFields(klerKsarDocument, clearanceDocument, clearanceFieldNumber, klerKsarFieldMapping)
	
	' Date of Incident
	Call ProcessKlerDateTimeFields(klerKsarDocument, clearanceDocument, "incident_date" & clearanceFieldNumber, "", "KIBRS_OccDateClr")
	
	' Type of Theft
	Call clearanceDocument.RemoveItem("KIBRS_TheftType")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "type_coin_mach_cbox",	"KIBRS_TheftType", "M")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "from_building_cbox",	"KIBRS_TheftType", "B")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "mv_parts_cbox",		"KIBRS_TheftType", "A")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "shoplift_cbox",		"KIBRS_TheftType", "L")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "pocket_cbox",			"KIBRS_TheftType", "P")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "purse_cbox",			"KIBRS_TheftType", "S")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "embezzle_cbox",		"KIBRS_TheftType", "E")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "poss_stolen_cbox",		"KIBRS_TheftType", "T")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "motor_vehicle_cbox",	"KIBRS_TheftType", "V")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "theft_from_mv_cbox",	"KIBRS_TheftType", "F")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "all_other_cbox",		"KIBRS_TheftType", "O")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "na_cbox",				"KIBRS_TheftType", "N")
	
	' Statute
	Dim clearanceStatute As Statute
	Set clearanceStatute = GetStatuteAndCharge(klerKsarDocument, clearanceFieldNumber)
	If Not clearanceStatute Is Nothing Then
		clearanceDocument.Statute = clearanceStatute.Statute
		clearanceDocument.Charge = clearanceStatute.Charge
		clearanceDocument.Chapter = clearanceStatute.Chapter
		clearanceDocument.Section = clearanceStatute.Section
		clearanceDocument.Sub1 = clearanceStatute.Sub1
		clearanceDocument.Sub2 = clearanceStatute.Sub2
		clearanceDocument.Sub3 = clearanceStatute.Sub3
		clearanceDocument.Sub4 = clearanceStatute.Sub4
		clearanceDocument.OffenseCode = clearanceStatute.OffenseCode
		If clearanceStatute.OffenseCode = "" Then
			clearanceDocument.KIBRS_MostSerious = ""
		Else
			If Not clearanceDocument.HasItem("KIBRS_MostSerious") Then
				clearanceDocument.KIBRS_MostSerious = "1"
			End If	
		End If
	Else
		If Not clearanceDocument.HasItem("KIBRS_MostSerious") Then
			clearanceDocument.KIBRS_MostSerious = ""
		End If
	End If
	
	' View Display
	clearanceDocument.ViewDisplay = "KIBRS Incident Cleared: " & clearanceDocument.KIBRS_OccNumClr(0) & " (" & _
	Cstr(clearanceDocument.KIBRS_OccDateClr(0)) & ") " & clearanceDocument.Charge(0)
	
	' Attempted / Completed
	Call clearanceDocument.RemoveItem("KIBRS_ComplCode")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "attempted_cbox", "KIBRS_ComplCode", "A")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "completed_cbox", "KIBRS_ComplCode", "C")
	
	' Aid/Abet, Conspiracy, Solicitation
	Call clearanceDocument.RemoveItem("KIBRS_AidingCode")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "aid_abet_cbox",	"KIBRS_AidingCode", "X")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "conspiracy_cbox",	"KIBRS_AidingCode", "C")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "solicitation_cbox",	"KIBRS_AidingCode", "S")
	
	' Clearance Indicator
	Call clearanceDocument.RemoveItem("KIBRS_ClrIndicator")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "count_cbox",			"KIBRS_ClrIndicator", "C")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "multiple_cbox",		"KIBRS_ClrIndicator", "M")
	Call ProcessKlerCheckbox(klerKsarDocument, clearanceDocument, clearanceFieldNumber, "outside_agency_cbox",	"KIBRS_ClrIndicator", "O")
	
	' Save KIBRS Incident Clearance document.
	Call SetUpRmsDocument(clearanceDocument)
	Call clearanceDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:KlerCloneCreateEditAndImport:1:8
Function KlerCloneCreateEditAndImport(occurrenceDocument As NotesDocument) As Boolean
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim klerWrapper As KlerWrapper
	
	' Get handle to current databse.
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	' Set up KlerWrapper object.
	Set klerWrapper = New KlerWrapper(occurrenceDocument, True)
	
	' Prompt user for Clone information.
	If Not klerWrapper.GetCloneInformation Then
		KlerCloneCreateEditAndImport = False
		Exit Function
	Else
		KlerCloneCreateEditAndImport = True
	End If
	
	' Create KLER file.
	Call klerWrapper.CreateXmlFile
	
	' Edit KLER file.
	Call klerWrapper.EditXmlFile
	
	' Attach KLER file.
	Call AttachKlerFileToOccurrence(klerWrapper.OutputPath, klerWrapper.CaseDocument)
	
	' Import KLER file.
	Call ImportKlerFileToOccurrence(klerWrapper.OutputPath, klerWrapper.CaseDocument, True)
		
	' Save occurrence document.
	Call occurrenceDocument.Save(False, False)
	
End Function


'++LotusScript Development Environment:2:1:GetClonePersonsAndVehicles:1:8
Function GetClonePersonsAndVehicles As NotesDocument
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	Dim currentWorkspace As NotesUIWorkspace
	
	Dim dialogDocument As NotesDocument
	Dim dialogOK As Boolean	
	
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	Set currentWorkspace = New NotesUIWorkspace
	
	Set dialogDocument = New NotesDocument(currentDatabase)
	dialogOK = currentWorkspace.DialogBox("(Dialog - KLER Cloning)", True, True, False, _
	False, False, False, "KLER Person and Vehicle Clone", dialogDocument, True)
	
	If dialogOK Then
		If dialogDocument.HasItem("CreateKSOR") Then
			If dialogDocument.CreateKSOR(0) <> "Y" Then
				If MessageBox("Are you creating a KSOR with this KLER report?", 4 + 32, "Create KSOR?") = 6 Then
					dialogDocument.CreateKSOR = "Y"
				End If
			End If
		End If 	
		Set GetClonePersonsAndVehicles = dialogDocument
	End If
	
End Function

'++LotusScript Development Environment:2:2:ExecuteWithoutWait:5:8
%REM
	Sub ExecuteWithoutWait
	Description: Comments for Sub
%END REM
Sub ExecuteWithoutWait(filePath As String)
	
	Dim sei As SHELLEXECUTEINFO
	Dim haWnd As Long	
	Dim X As Long
	
	haWnd = GetActiveWindow()

	sei.cbSize = Len(sei)
	sei.fMask = SEE_MASK_NOCLOSEPROCESS
	sei.hwnd = haWnd
	sei.lpVerb = "open"
	sei.lpFile = filePath
	sei.lpParameters = ""
	sei.lpDirectory = StrLeftBack(filePath, "\", 5) 'Separates the path from the name
	sei.nShow = SW_SHOWMAXIMIZED
	sei.hInstApp = 0
	sei.lpIDList = 0
	sei.lpClass = ""
	sei.hkeyClass = 0
	sei.dwHotKey = 0
	sei.hIcon = 0
	sei.hProcess = 0

	X = ShellExecuteEx(sei)
'	X = WaitForSingleObject(sei.hProcess, INFINITE)
	X = CloseHandle(sei.hProcess)
	
End Sub

'++LotusScript Development Environment:2:1:AliasLookup:1:8
Function AliasLookup(key As String) As String
	If Iselement(StreetTypeList(Ucase(key))) Then
		AliasLookup = StreetTypeList(Ucase(key))
	Else
		AliasLookup = key
	End If
End Function



'++LotusScript Development Environment:2:2:ProcessKlerKdot851Record:1:8
Sub ProcessKlerKdot851Record(klerKdot851Document As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim rmsKlerView As NotesView
	Dim rmsKlerViewKey(1 To 2) As String
	
	Dim supplementaryDocument As NotesDocument
	Dim supplementaryString As String
	Dim supplementaryField As NotesRichTextItem
	
	Dim klerKdot851FieldMapping List As String
	Dim klerKdot851Field As NotesItem
	
	Dim reportOfficer As officer
	Dim allowableAuthorsTemp As Variant
	Dim allowableAuthorsField As NotesItem
	
	Dim i As Integer
	
	Dim foundSuppMatch As Boolean
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	If rmsKlerView Is Nothing Then
		' ERROR: If view does not exist, give error msg.
	End If
	rmsKlerViewKey(1) = Cstr(klerKdot851Document.CaseID(0))
	rmsKlerViewKey(2) = Cstr(klerKdot851Document.GuidVal(0))
	rmsKlerView.Refresh
	Set supplementaryDocument = rmsKlerView.GetDocumentByKey(rmsKlerViewKey, True)
	If supplementaryDocument Is Nothing Then
		foundSuppMatch = False
	ElseIf supplementaryDocument.IsDeleted Then
		foundSuppMatch = False
	Else
		foundSuppMatch = True
	End If
	
	If Not foundSuppMatch Then
		
		Set supplementaryDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		supplementaryDocument.Form = "Supplementary"
		supplementaryDocument.OccurrenceNumber = occurrenceDocument.OccurrenceNumber(0)
		
		' Get key fields to link RMS Document and KLER Document.
		supplementaryDocument.KLERCaseID = klerKdot851Document.CaseID(0)
		supplementaryDocument.KLERGUID = klerKdot851Document.GuidVal(0)
		
		' Subject (Only set when creating new doc)
		supplementaryDocument.Subject = "Accident Narrative"
		
		' Make Supplementary document a response to the Occurrence.
		Call supplementaryDocument.MakeResponse(occurrenceDocument)
		
	End If
	
	' Set up general fields.
	Call SetUpRmsDocument(supplementaryDocument)
	
	' Reporting Officer / Allowable Author
	Set klerKdot851Field = klerKdot851Document.GetFirstItem("inv_officer_badge_id")
	If Not klerKdot851Field Is Nothing Then
		If klerKdot851Field.Values(0) <> "" Then
			
			Set reportOfficer = GetOfficerByBadgeNumber(Cstr(klerKdot851Field.Values(0)))
			If Not reportOfficer Is Nothing Then
				
				Call supplementaryDocument.ReplaceItemValue("ReportingOfficer", reportOfficer.Name)
				Call supplementaryDocument.ReplaceItemValue("ReportingOfficerBadge", reportOfficer.Badge)
				Call supplementaryDocument.ReplaceItemValue("ReportingOfficerDistrict", reportOfficer.District)
				Call supplementaryDocument.ReplaceItemValue("ReportingOfficerPlatoon", reportOfficer.Platoon)
				Call supplementaryDocument.ReplaceItemValue("ReportingOfficerRank", reportOfficer.Rank)
				
				Call supplementaryDocument.RemoveItem("AllowableAuthors")
				allowableAuthorsTemp = Split("[Statistician]/[Supervisors]/"+reportOfficer.Name,"/")
				Set allowableAuthorsField = New NotesItem(supplementaryDocument, "AllowableAuthors", allowableAuthorsTemp, AUTHORS)
				allowableAuthorsField.IsSummary = True
				
			Else
				
				klerKdot851FieldMapping("inv_officer_name") = "ReportingOfficer"
				klerKdot851FieldMapping("inv_officer_badge_id") = "ReportingOfficerBadge"
				supplementaryDocument.ReportingOfficerDistrict = ""
				supplementaryDocument.ReportingOfficerPlatoon = ""
				supplementaryDocument.ReportingOfficerRank = ""
				Call ProcessKlerFields(klerKdot851Document, supplementaryDocument, "", klerKdot851FieldMapping)
				
			End If
		End If		
	End If
	
	' Supplementary Text
	For i = 1 To 2
		Set klerKdot851Field = klerKdot851Document.GetFirstItem("narrative" & Cstr(i))
		If Not klerKdot851Field Is Nothing Then
			supplementaryString = supplementaryString + klerKdot851Field.Values(0)
		End If
	Next
	If supplementaryString = "" Then
		Exit Sub
	End If
	Set supplementaryField = New NotesRichTextItem(supplementaryDocument, "SupplementaryInfo")
	supplementaryField.AppendText(supplementaryString)
	
	' Specific Subject
	supplementaryDocument.SpecificSubject = "KDOT Narrative"	
	
	' Save Supplementary document.	
	Call supplementaryDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKsorVictim:2:8
Sub ProcessKlerKsorVictim(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument, _
victimNumber As String)
	
	On Error GoTo ErrorHandle
	
	Dim klerKsorFieldMapping List As String
	Dim klerKsorField As NotesItem
	Dim victimField As NotesItem
	Dim i As Integer
	Dim victimDocument As NotesDocument
	Dim hasPersonDescriptors As Boolean
	Dim suspectDocument As NotesDocument
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	' Exit if there is no Victim with this number.
	Set klerKsorField = klerKsorDocument.GetFirstItem("victim_num" & victimNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Find existing Victim document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKsorDocument.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Person/Property" _
		And Not rmsDocument.IsDeleted Then
			
			If victimNumber <> "" Then	
				Set klerKsorField = klerKsorDocument.GetFirstItem("person_share" & CStr(CInt(victimNumber)))
			Else
				Set klerKsorField = klerKsorDocument.GetFirstItem("person_share1")
			End If
			If Not klerKsorField Is Nothing And rmsDocument.HasItem("KLERRecordID") Then
				If rmsDocument.KLERRecordID(0) = klerKsorField.Values(0) Then
					Set victimDocument = rmsDocument
				End If
			End If
			
			If Not victimDocument Is Nothing Then
				Set klerKsorField = klerKsorDocument.GetFirstItem("victim_num" & victimNumber)
				If Not klerKsorField Is Nothing Then
					If rmsDocument.HasItem("VictimNumber") Then
						If rmsDocument.VictimNumber(0) = klerKsorField.Values(0) Then
							Set victimDocument = rmsDocument
						End If
					End If
				End If
			End If
						
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
	' Create new document if there is no document in RMS.
	If victimDocument Is Nothing Then		
		
		Set victimDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		victimDocument.Form = "Person/Property"
		
		' Get key fields to link RMS Document and KLER Document.
		victimDocument.KLERCaseID = klerKsorDocument.CaseID(0)
		victimDocument.KLERGUID = klerKsorDocument.GuidVal(0)
		
		Call victimDocument.MakeResponse(occurrenceDocument)
		
	End If
	
	' Victim Number
	klerKsorFieldMapping("victim_num") = "VictimNumber"
	Call ProcessKlerFields(klerKsorDocument, victimDocument, victimNumber, klerKsorFieldMapping)
	
	' Type of Victim
	Call victimDocument.RemoveItem("KIBRS_VictimType")
	Call ProcessKlerCheckbox(klerKsorDocument, victimDocument, victimNumber, "individual_cbox",	"KIBRS_VictimType", "I")
	Call ProcessKlerCheckbox(klerKsorDocument, victimDocument, victimNumber, "business_cbox",		"KIBRS_VictimType", "B")
	Call ProcessKlerCheckbox(klerKsorDocument, victimDocument, victimNumber, "society_cbox",		"KIBRS_VictimType", "S")
	Call ProcessKlerCheckbox(klerKsorDocument, victimDocument, victimNumber, "fin_inst_cbox",		"KIBRS_VictimType", "F")
	Call ProcessKlerCheckbox(klerKsorDocument, victimDocument, victimNumber, "relig_org_cbox",	"KIBRS_VictimType", "R")
	Call ProcessKlerCheckbox(klerKsorDocument, victimDocument, victimNumber, "government_cbox",	"KIBRS_VictimType", "G")
	Call ProcessKlerCheckbox(klerKsorDocument, victimDocument, victimNumber, "other_vic_cbox",	"KIBRS_VictimType", "O")
	Call ProcessKlerCheckbox(klerKsorDocument, victimDocument, victimNumber, "unknown_vic_cbox",	"KIBRS_VictimType", "U")
	
	' Victim of Offense Number
	Dim responseCollection As NotesDocumentCollection
	Dim responseDocument As NotesDocument
	Dim offenseDocument As NotesDocument
	Dim offenseVariant As Variant
	Dim victimOffense() As String
	Dim victimOffenseCount As Integer
	For i = 1 To 10
		Set klerKsorField = klerKsorDocument.GetFirstItem("vic_offnum" & CStr(i) & "_cbox" & victimNumber)
		If Not klerKsorField Is Nothing Then
			If klerKsorField.Values(0) = "Y" Then
				Set offenseDocument = Nothing				
				Set responseCollection = occurrenceDocument.Responses
				Set responseDocument = responseCollection.GetFirstDocument
				While Not responseDocument Is Nothing
					If responseDocument.Form(0) = "KIBRS Offense" Then
						If responseDocument.OffenseNumber(0) = i Then
							Set offenseDocument = responseDocument
						End If
					End If
					Set responseDocument = responseCollection.GetNextDocument(responseDocument)
				Wend
				If Not offenseDocument Is Nothing Then
					offenseVariant = Evaluate({@Text(OffenseNumber) + ") " + @Implode(@Trim(@Explode(@Explode(@Right(@Left(Charge; ":"); " "); ";"); ",")); "/")}, offenseDocument)
					ReDim Preserve victimOffense(0 To victimOffenseCount)
					victimOffense(victimOffenseCount) = offenseVariant(0)
					victimOffenseCount = victimOffenseCount + 1
				End If
			End If
		End If
	Next
	victimDocument.KIBRS_Offenses = victimOffense
	
	' Victim fields
	Erase klerKsorFieldMapping
	klerKsorFieldMapping("vic_fname" & victimNumber) = "Given1"
	klerKsorFieldMapping("vic_middle" & victimNumber) = "Given2"
	klerKsorFieldMapping("vic_city" & victimNumber) = "TownCity"
	klerKsorFieldMapping("vic_state" & victimNumber) = "Prov"
	klerKsorFieldMapping("vic" & victimNumber & "_street_category") = "StType"
	klerKsorFieldMapping("vic" & victimNumber & "_street_name") = "StName"
	klerKsorFieldMapping("vic" & victimNumber & "_street_num") = "StNumber"
	klerKsorFieldMapping("vic" & victimNumber & "_struct_num") = "BuildingUnitIdentifier"
	klerKsorFieldMapping("vic" & victimNumber & "_street_pre_dir") = "StPreDirection"
	klerKsorFieldMapping("vic" & victimNumber & "_street_post_dir") = "StPostDirection"
	klerKsorFieldMapping("vic_zip" & victimNumber) = "PostalCode"
	klerKsorFieldMapping("vic_race" & victimNumber) = "Race"	
	klerKsorFieldMapping("vic_sex" & victimNumber) = "Sex"
	klerKsorFieldMapping("vic_drlic" & victimNumber) = "DLNumber"
	klerKsorFieldMapping("vic_drlic_st" & victimNumber) = "DLIssuedBy"
	klerKsorFieldMapping("vic_employer" & victimNumber) = "Employer"
	
	' If this is an organization, then set Commercial/Business fields instead of regular name fields.
	Dim isCommercialBusiness As Boolean
	Set klerKsorField = klerKsorDocument.GetFirstItem("business_cbox" & victimNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "Y" Then
			isCommercialBusiness = True
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("society_cbox" & victimNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "Y" Then
			isCommercialBusiness = True
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("fin_inst_cbox" & victimNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "Y" Then
			isCommercialBusiness = True
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("relig_org_cbox" & victimNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "Y" Then
			isCommercialBusiness = True
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("government_cbox" & victimNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "Y" Then
			isCommercialBusiness = True
		End If
	End If	
	
	If isCommercialBusiness Then
		
		klerKsorFieldMapping("vic_lname" & victimNumber) = "CompanyName"
		klerKsorFieldMapping("vic_telephone" & victimNumber) = "CompanyPhone"
		
		' Commercial/Business involvement type.
		victimDocument.TypeList = FullTrim(ArrayUnique(Split("Commercial/Business" & ";" & Implode(victimDocument.TypeList,";"),";")))
	
	Else
		
		klerKsorFieldMapping("vic_lname" & victimNumber) = "Surname"
		klerKsorFieldMapping("vic_telephone" & victimNumber) = "HomePhone"
		klerKsorFieldMapping("vic_workphone" & victimNumber) = "BusinessPhone"
		
	End If
	
	Call ProcessKlerFields(klerKsorDocument, victimDocument, "", klerKsorFieldMapping)
	
	' Date of Birth
	Set klerKsorField = klerKsorDocument.GetFirstItem("vic_dob" & victimNumber)
	If Not klerKsorField Is Nothing Then
		If IsDate(klerKsorField.Values(0)) Then
			victimDocument.DOB = CDat(klerKsorField.Values(0))
		End If
	End If
	
	' Person Descriptor fields
	Erase klerKsorFieldMapping
	klerKsorFieldMapping("vic_ethnic" & victimNumber) = "Ethnicity"
	klerKsorFieldMapping("vic_hair" & victimNumber) = "HairColour"
	klerKsorFieldMapping("vic_eyes" & victimNumber) = "EyeColour"
	ForAll victimFieldName In klerKsorFieldMapping
		
		Set klerKsorField = klerKsorDocument.GetFirstItem(ListTag(victimFieldName))
		If Not klerKsorField Is Nothing Then
			If klerKsorField.Values(0) <> "" Then
				Call victimDocument.CopyItem(klerKsorField, victimFieldName)
				hasPersonDescriptors = True
			End If
		End If
		
	End ForAll
	
	' Residency
	If victimNumber <> "" Then
		Set klerKsorField = klerKsorDocument.GetFirstItem("residency")
	Else
		Set klerKsorField = klerKsorDocument.GetFirstItem("vic_residency" & victimNumber)
	End If
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) <> "" Then
			If klerKsorField.Values(0) = "R" Then			
				victimDocument.ResidentIndicator = "Resident"			
			Else
				victimDocument.ResidentIndicator = "Non-Resident"
			End If
			hasPersonDescriptors = True
		End If
	End If
	
	' Height / Weight
	Set klerKsorField = klerKsorDocument.GetFirstItem("vic_height" & victimNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) <> "" Then
			If IsNumeric(klerKsorField.Values(0)) Then
				victimDocument.Height = CInt(klerKsorField.Values(0))
				hasPersonDescriptors = True
			End If
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("vic_weight" & victimNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) <> "" Then
			If IsNumeric(klerKsorField.Values(0)) Then
				victimDocument.Weight = CInt(klerKsorField.Values(0))
				hasPersonDescriptors = True
			End If
		End If
	End If
	
	' Add Person Descriptors subform if needed.
	If hasPersonDescriptors Then
		victimDocument.LoadedSubForms = FullTrim(ArrayUnique(Split("Person Descriptors" & ";" & Implode(victimDocument.LoadedSubForms,";"),";")))
	End If
	
	' Contributing Circumstances
	Dim contributingCircumstances() As String
	Dim contributingCircumstancesCount As Integer
	If victimNumber <> "" Then
		Set klerKsorField = klerKsorDocument.GetFirstItem("vic_circum1_" & victimNumber)
	Else
		Set klerKsorField = klerKsorDocument.GetFirstItem("vic_circum1")
	End If
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) <> "" Then
			contributingCircumstancesCount = contributingCircumstancesCount + 1
			ReDim Preserve contributingCircumstances(1 To contributingCircumstancesCount)
			contributingCircumstances(contributingCircumstancesCount) = klerKsorField.Values(0)
		End If
	End If
	If victimNumber <> "" Then
		Set klerKsorField = klerKsorDocument.GetFirstItem("vic_circum2_" & victimNumber)
	Else
		Set klerKsorField = klerKsorDocument.GetFirstItem("vic_circum2")
	End If
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) <> "" Then
			contributingCircumstancesCount = contributingCircumstancesCount + 1
			ReDim Preserve contributingCircumstances(1 To contributingCircumstancesCount)
			contributingCircumstances(contributingCircumstancesCount) = klerKsorField.Values(0)
		End If
	End If
	If contributingCircumstancesCount >= 1 Then
		victimDocument.KIBRS_CircContrib = contributingCircumstances
	End If
	
	' Victim Relationship to Suspects
	For i = 1 To 10
		
		If victimNumber <> "" Then
			Set klerKsorField = klerKsorDocument.GetFirstItem("vic_rel_suspect" & CStr(i) & "_" & victimNumber)
		Else
			Set klerKsorField = klerKsorDocument.GetFirstItem("vic_rel_suspect" & CStr(i))
		End If
		
		Set suspectDocument = GetKlerSuspectByNumber(occurrenceDocument, i)
		
		If Not suspectDocument Is Nothing Then
			
			If i = 1 Then
				victimDocument.KIBRS_RelatedTo = CStr(suspectDocument.UniversalID)
			Else
				Set victimField = New NotesItem(victimDocument, "KIBRS_RelatedTo_" & CStr(i-1), CStr(suspectDocument.UniversalID))
				victimField.IsSummary = True
			End If
			
		End If
		
		If Not klerKsorField Is Nothing Then
			
			If i = 1 Then
				victimDocument.KIBRS_Relation = klerKsorField.Values(0)
			Else
				Set victimField = New NotesItem(victimDocument, "KIBRS_Relation_" & CStr(i-1), klerKsorField.Values(0))
				victimField.IsSummary = True
			End If
			
		End If
		
	Next
	
	' Type of Injury
	Dim typeInjury() As String
	Dim typeInjuryCount As Integer
	For i = 1 To 5
		
		If victimNumber <> "" Then
			Set klerKsorField = klerKsorDocument.GetFirstItem("vic_injury" & CStr(i) & "_" & victimNumber)
		Else
			Set klerKsorField = klerKsorDocument.GetFirstItem("vic_injury" & CStr(i))
		End If
		
		If Not klerKsorField Is Nothing Then
			If klerKsorField.Values(0) <> "" Then
				typeInjuryCount = typeInjuryCount + 1
				ReDim Preserve typeInjury(1 To i)
				typeInjury(i) = klerKsorField.Values(0)
			End If
		End If
	Next
	victimDocument.KIBRS_InjuryLevel = typeInjury	
	
	' Victim involvement type.	
	victimDocument.TypeList = FullTrim(ArrayUnique(Split("Victim" & ";" & Implode(victimDocument.TypeList,";"),";")))
	
	' KIBRS Victim Subform
	victimDocument.LoadedSubForms = FullTrim(ArrayUnique(Split("UCRVictim" & ";" & Implode(victimDocument.LoadedSubForms,";"),";")))
	
	' Save Victim document.
	Call SetUpRmsDocument(victimDocument)
	Call victimDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & CStr( GetThreadInfo(1) ) & |, Line: | & CStr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerDateTimeFields:2:8
Sub ProcessKlerDateTimeFields(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerDateFieldName As String, _
klerTimeFieldName As String, rmsDateTimeFieldName As String)
	
	On Error Goto ErrorHandle
	
	Dim klerDateField As NotesItem
	Dim klerTimeField As NotesItem
	Dim rmsDateTimeField As NotesItem
	
	If klerDateFieldName <> "" Then
		Set klerDateField = klerDocument.GetFirstItem(klerDateFieldName)
	End If
	If klerTimeFieldName <> "" Then
		Set klerTimeField = klerDocument.GetFirstItem(klerTimeFieldName)
	End If
	
	If Not klerDateField Is Nothing Then
		If Not klerTimeField Is Nothing Then
			If Isdate(klerDateField.Values(0)) Then
				If Isdate(klerTimeField.Values(0)) Then
					Call rmsDocument.ReplaceItemValue(rmsDateTimeFieldName, _
					Cdat(klerDateField.Values(0) & " " & klerTimeField.Values(0)))
				Else
					Call rmsDocument.ReplaceItemValue(rmsDateTimeFieldName, _
					Cdat(klerDateField.Values(0)))
				End If
			End If
		Else
			If Isdate(klerDateField.Values(0)) Then
				Call rmsDocument.ReplaceItemValue(rmsDateTimeFieldName, _
				Cdat(klerDateField.Values(0)))
			End If
		End If
	End If
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:SetKlerDefaultFilePath:1:8
Sub SetKlerDefaultFilePath(klerDefaultFilePath As String)
	
	Dim currentSession As NotesSession
	
	Set currentSession = New NotesSession
	
	Call currentSession.SetEnvironmentVar("KlerDefaultFilePath", klerDefaultFilePath)
	
End Sub


'++LotusScript Development Environment:2:1:GetKlerSuspectByNumber:1:8
Function GetKlerSuspectByNumber(occurrenceDocument As NotesDocument, suspectNumber As Integer) As NotesDocument
	
	On Error Goto ErrorHandle
	
	Dim responseDocumentCollection As NotesDocumentCollection
	Dim responseDocument As NotesDocument
	
	Set responseDocumentCollection = occurrenceDocument.Responses
	Set responseDocument = responseDocumentCollection.GetFirstDocument
	While Not responseDocument Is Nothing
		
		If Not responseDocument.IsDeleted Then
			If responseDocument.Form(0) = "Person/Property" _
			And responseDocument.HasItem("SuspectNumber") Then
				If IsNumeric(responseDocument.SuspectNumber(0)) Then
					If CInt(responseDocument.SuspectNumber(0)) = suspectNumber Then
						Set GetKlerSuspectByNumber = responseDocument
						Exit Function
					End If
				End If
			End If				
		End If
		
		
		Set responseDocument = responseDocumentCollection.GetNextDocument(responseDocument)
	Wend
	
	Exit Function
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Function
	
End Function



'++LotusScript Development Environment:2:2:ProcessKlerFields:2:8
Sub ProcessKlerFields(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerFieldNumber As String, _
klerKsorFieldMapping List As String)
	
	On Error Goto ErrorHandle
	
	Dim klerField As NotesItem
	Dim rmsField As NotesItem
	
	Forall rmsFieldName In klerKsorFieldMapping
		
		Set klerField = klerDocument.GetFirstItem(Listtag(rmsFieldName) & klerFieldNumber)
		If Not klerField Is Nothing Then
			Call rmsDocument.CopyItem(klerField, rmsFieldName)
		End If
		
	End Forall
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKsarVehicle:1:8
Sub ProcessKlerKsarVehicle(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim klerKsarFieldMapping List As String
	Dim klerKsarField As NotesItem
	
	Dim vehicleDocument As NotesDocument
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	Dim evaluateTemp As Variant
	
	' Exit if no vehicle is listed.
	Set klerKsarField = klerKsarDocument.GetFirstItem("vehicle_share1")
	If Not klerKsarField Is Nothing Then
		If klerKsarField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Find existing Vehicle document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKsarDocument.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "SupplementaryMV" _
		And Not rmsDocument.IsDeleted Then
			Set klerKsarField = klerKsarDocument.GetFirstItem("vehicle_share1")
			If rmsDocument.HasItem("KlerRecordID") Then
				If rmsDocument.KlerRecordID(0) = klerKsarField.Values(0) Then
					Set vehicleDocument = rmsDocument
				End If
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend	
	If vehicleDocument Is Nothing Then
		Exit Sub
	End If
	
	' Vehicle fields
	klerKsarFieldMapping("veh_year") = "ModelYr"
	klerKsarFieldMapping("vma_code") = "VMake"
	klerKsarFieldMapping("vmo_code") = "VModel"
	klerKsarFieldMapping("veh_style") = "Style"
	klerKsarFieldMapping("vco_code") = "Colour"
	klerKsarFieldMapping("vin") = "VINNum"
	klerKsarFieldMapping("towco") = "TowComp"
	klerKsarFieldMapping("locn_key") = "KeyLocation"
	klerKsarFieldMapping("tagyr") = "LicYear"
	klerKsarFieldMapping("state") = "ProvState"
	klerKsarFieldMapping("location_veh") = "VehStored"
	klerKsarFieldMapping("plate") = "LicNum"
	klerKsarFieldMapping("condition_veh") = "VehCond"
	klerKsarFieldMapping("tow_driver_name") = "TowDriver"
	klerKsarFieldMapping("o_street_num") = "RO_StreetNumber"
	klerKsarFieldMapping("o_city") = "RO_TownCity"
	klerKsarFieldMapping("o_state") = "RO_Prov"
	klerKsarFieldMapping("o_zip") = "RO_PostalCode"
	klerKsarFieldMapping("released_to_name") = "MVPropRelTo"
	Call ProcessKlerFields(klerKsarDocument, vehicleDocument, "", klerKsarFieldMapping)
	
	' Owner Name
	Dim ownerName(1 To 3) As String	
	If klerKsarDocument.HasItem("owner") Then
		ownerName(1) = klerKsarDocument.owner(0)
	End If
	If klerKsarDocument.HasItem("owner_fname") Then
		
		ownerName(2) = klerKsarDocument.owner_fname(0)
	End If
	If klerKsarDocument.HasItem("owner_middle") Then
		ownerName(3) = klerKsarDocument.owner_middle(0)
	End If
	vehicleDocument.RO_Name = Implode(Fulltrim(ownerName), " ")
	
	' Owner Address
	evaluateTemp = Evaluate(|o_street_num|, klerKsarDocument)
	vehicleDocument.RO_StreetNumber = evaluateTemp(0)
	evaluateTemp = Evaluate(|@Trim(o_street_pre_dir + " " + o_street_name +  " " + o_street_category + " " + o_street_post_dir)|, klerKsarDocument)
	vehicleDocument.RO_Address = evaluateTemp(0)
	
	' Released To Date / Time
	If Isdate(klerKsarDocument.released_to_date(0)) Then
		If Isdate(klerKsarDocument.released_to_time(0)) Then
			vehicleDocument.MVRelDateTime = Cdat(klerKsarDocument.released_to_date(0) & " " & klerKsarDocument.released_to_time(0))
		Else
			vehicleDocument.MVRelDateTime = Cdat(klerKsarDocument.released_to_date(0))
		End If
	End If
	
	' Released To Address
	evaluateTemp = Evaluate( _
	|StreetNumber := released_to_street_num;| & _
	|Street := @Trim(released_to_street_pre_dir + " " + released_to_street_name +  " " + released_to_street_category + " " + released_to_street_post_dir);| & _
	|LocDisplay := released_to_struct_num;| & _
	|@Implode(@Trim(@Implode(@Trim(StreetNumber:Street);" "):@Implode(@Trim(released_to_city:released_to_state);", "));", "):LocDisplay|, _
	klerKsarDocument)
	vehicleDocument.MVPropRelToAddress = evaluateTemp(0)
	
	' Save Vehicle document.
	Call SetUpRmsDocument(vehicleDocument)
	Call vehicleDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ExecuteAndWait:1:8
Sub ExecuteAndWait(cmdline)
	Dim NameOfProc As PROCESS_INFORMATION
	Dim NameStart As STARTUPINFO
	Dim X As Long
	NameStart.wShowWindow = SW_SHOW
	NameStart.dwFlags = STARTF_USESHOWWINDOW
	NameStart.cb = Len(NameStart)
	X = CreateProcessA(0&, cmdline, 0&, 0&, 1&, NORMAL_PRIORITY_CLASS,0&, 0&, NameStart, NameOfProc)
	X = WaitForSingleObject(NameOfProc.hProcess, INFINITE)
	X = CloseHandle(NameOfProc.hProcess)
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKdot850ARecord:1:8
Sub ProcessKlerKdot850ARecord(klerKdot850ADocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim klerKdot850AField As NotesItem
	Dim klerKdot850AFieldMapping List As String
	
	Dim occurrenceField As NotesItem
	
	Dim evaluateTemp As Variant
	
	Dim i As Integer
	
	' General
	klerKdot850AFieldMapping("reporting_severity") = "KDOT_AccidentSeverity"
	klerKdot850AFieldMapping("co_abbrev") = "KDOT_County"
	klerKdot850AFieldMapping("city_name") = "KDOT_City"	
	klerKdot850AFieldMapping("block_nbr") = "KDOT_BlockNo"
	
	' On Road
	klerKdot850AFieldMapping("on_road_pfx_dir") = "KDOT_OnRoadDirPfx"
	klerKdot850AFieldMapping("on_road_name") = "KDOT_OnRoad"
	klerKdot850AFieldMapping("on_road_type") = "KDOT_OnRoadType"
	klerKdot850AFieldMapping("on_road_sfx_dir") = "KDOT_OnRoadDirSfx"
	
	' From / At
	Call occurrenceDocument.RemoveItem("KDOT_CrossStreetLoc")
	Call ProcessKlerCheckbox(klerKdot850ADocument, occurrenceDocument, "", "from_flag", "KDOT_CrossStreetLoc", "From")
	Call ProcessKlerCheckbox(klerKdot850ADocument, occurrenceDocument, "", "at_flag", "KDOT_CrossStreetLoc", "At")
	
	' Cross Road
	klerKdot850AFieldMapping("at_road_distance_uom") = "KDOT_MeasurementUnits"
	klerKdot850AFieldMapping("at_road_direction") = "KDOT_Direction"	
	klerKdot850AFieldMapping("at_road_pfx_dir") = "KDOT_CrossRoadDirPfx"
	klerKdot850AFieldMapping("at_road_name") = "KDOT_CrossRoad"
	klerKdot850AFieldMapping("at_road_type") = "KDOT_CrossRoadType"
	klerKdot850AFieldMapping("at_road_sfx_dir") = "KDOT_CrossRoadDirSfx"
	
	' Narrative / Photos By
	klerKdot850AFieldMapping("narrative") = "AccidentSynopsis"
	klerKdot850AFieldMapping("photos_by") = "KDOT_PhotosBy"
	Call ProcessKlerFields(klerKdot850ADocument, occurrenceDocument, "", klerKdot850AFieldMapping)
	
	' Numeric fields
	Erase klerKdot850AFieldMapping
	klerKdot850AFieldMapping("on_road_speed") = "KDOT_Speed1"
	klerKdot850AFieldMapping("at_road_speed") = "KDOT_Speed2"	
	klerKdot850AFieldMapping("officer_milepost") = "KDOT_MilePost"
	Call ProcessKlerNumericFields(klerKdot850ADocument, occurrenceDocument, "", klerKdot850AFieldMapping)
	
	Erase klerKdot850AFieldMapping
	klerKdot850AFieldMapping("at_road_distance") = "KDOT_CrossStreetDist"
	Call ProcessKlerDecimalFields(klerKdot850ADocument, occurrenceDocument, "", klerKdot850AFieldMapping)
		
	' KDOT Report Type
	Call occurrenceDocument.RemoveItem("KDOT_ReportType")
	Call ProcessKlerCheckboxMulti(klerKdot850ADocument, occurrenceDocument, "", "dui_flag",			"KDOT_ReportType", "DUI")
	Call ProcessKlerCheckboxMulti(klerKdot850ADocument, occurrenceDocument, "", "acc_hit_and_run_flag",	"KDOT_ReportType", "Hit & Run Accident")
	Call ProcessKlerCheckboxMulti(klerKdot850ADocument, occurrenceDocument, "", "priv_prop_flag",		"KDOT_ReportType", "Private Property")
	
	' Date/Time of Accident, Notification, and Arrival
	Call ProcessKlerDateTimeFields(klerKdot850ADocument, occurrenceDocument, "accident_date",	"accident_time",	"TimeDateCommitted")
	Call ProcessKlerDateTimeFields(klerKdot850ADocument, occurrenceDocument, "date_notified",	"time_notified",	"DateReported")
	Call ProcessKlerDateTimeFields(klerKdot850ADocument, occurrenceDocument, "date_arrv", 	"time_arrv",		"KDOT_TimeArrived")	
	
	' Property Damage #1 & #2
	For i = 1 To 2
		
		Erase klerKdot850AFieldMapping
		klerKdot850AFieldMapping("prop_damage_flag") = "KDOT_ObjectDamagedKDOT" & Cstr(i)
		klerKdot850AFieldMapping("object_damaged") = "KDOT_ObjectDamaged" & Cstr(i)
		klerKdot850AFieldMapping("owner_lname") = "KDOT_ObjectOwnerLastName" & Cstr(i)
		klerKdot850AFieldMapping("owner_fname") = "KDOT_ObjectOwnerFirstName" & Cstr(i)
		klerKdot850AFieldMapping("owner_mid_name") = "KDOT_ObjectOwnerMiddleName" & Cstr(i)		
		klerKdot850AFieldMapping("owner_phone") = "KDOT_ObjectOwnerPersonalPhone" & Cstr(i)
		klerKdot850AFieldMapping("owner_work_phone") = "KDOT_ObjectOwnerWorkPhone" & Cstr(i)		
		klerKdot850AFieldMapping("owner_city") = "KDOT_ObjectOwnerCity" & Cstr(i)
		klerKdot850AFieldMapping("owner_state") = "KDOT_ObjectOwnerState" & Cstr(i)
		klerKdot850AFieldMapping("owner_zip") = "KDOT_ObjectOwnerZip" & Cstr(i)
		Call ProcessKlerFields(klerKdot850ADocument, occurrenceDocument, Cstr(i), klerKdot850AFieldMapping)
		
		evaluateTemp = Evaluate( _
		|StreetNumber := owner_street_num| & Cstr(i) & |;| & _
		|Street := @Trim(owner_street_pre_dir| & Cstr(i) & | + " " + owner_street_name| & Cstr(i) & | +  " " + owner_street_category| & Cstr(i) & | + " " + owner_street_post_dir| & Cstr(i) & |);| & _
		|LocDisplay := owner_struct_num| & Cstr(i) & |;| & _
		|@Implode(@Trim(@Implode(@Trim(StreetNumber:Street);" "):LocDisplay);" ")|, _
		klerKdot850ADocument)
		Set occurrenceField = New NotesItem(occurrenceDocument, "KDOT_ObjectOwnerAddress" & Cstr(i), evaluateTemp(0))
		occurrenceField.IsSummary = True
		
	Next
	
	' Other Fields
	Erase klerKdot850AFieldMapping
	klerKdot850AFieldMapping("on_road_const") = "KDOT_ConstructionZone1"
	klerKdot850AFieldMapping("at_road_const") = "KDOT_ConstructionZone2"
	klerKdot850AFieldMapping("kdot_work_zone_flag") = "KDOT_ConstructionZoneKDOT"
	klerKdot850AFieldMapping("work_zone_loc") = "KDOT_ConstructionZoneLocation"
	klerKdot850AFieldMapping("work_zone_cat") = "KDOT_ConstructionZoneCategory"
	klerKdot850AFieldMapping("work_zone_cat_other") = "KDOT_ConstructionZoneOther"
	klerKdot850AFieldMapping("light_cond") = "KDOT_Light"
	klerKdot850AFieldMapping("weather_cond") = "KDOT_Weather"
	klerKdot850AFieldMapping("weather_other") = "KDOT_WeatherOther"
	klerKdot850AFieldMapping("on_road_surface") = "KDOT_SurfaceType1"
	klerKdot850AFieldMapping("at_road_surface") = "KDOT_SurfaceType2"
	klerKdot850AFieldMapping("on_road_cond") = "KDOT_SurfaceCond1"
	klerKdot850AFieldMapping("at_road_cond") = "KDOT_SurfaceCond2"
	klerKdot850AFieldMapping("accident_loc") = "KDOT_AccLoc"
	klerKdot850AFieldMapping("accident_loc_other") = "KDOT_AccLocOther"
	klerKdot850AFieldMapping("intersec_type") = "KDOT_IntersectionType"
	klerKdot850AFieldMapping("accident_class_fhe") = "KDOT_AccClass1"
	klerKdot850AFieldMapping("accident_class_mhe") = "KDOT_AccClass2"
	klerKdot850AFieldMapping("fixed_object_struck_fhe") = "KDOT_Object1"
	klerKdot850AFieldMapping("fixed_object_struck_mhe") = "KDOT_Object2"
	klerKdot850AFieldMapping("collision_fhe") = "KDOT_Collision1"
	klerKdot850AFieldMapping("collision_mhe") = "KDOT_Collision2"
	klerKdot850AFieldMapping("on_road_nbr_lanes") = "KDOT_NumberOfLanes1"
	klerKdot850AFieldMapping("at_road_nbr_lanes") = "KDOT_NumberOfLanes2"
	klerKdot850AFieldMapping("on_road_char") = "KDOT_RoadChar1"
	klerKdot850AFieldMapping("at_road_char") = "KDOT_RoadChar2"
	klerKdot850AFieldMapping("special_jur_code") = "KDOT_SpecialJurisdiction"
	klerKdot850AFieldMapping("special_jur_code_other") = "KDOT_SpecialJurisdictionOther"
	Call ProcessKlerFields(klerKdot850ADocument, occurrenceDocument, "", klerKdot850AFieldMapping)
	
	' Surface Type Other
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("on_road_surface")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("weather_other1")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_SurfaceType1Other = klerKdot850AField.Values(0)
			End If
		End If
	End If
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("at_road_surface")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("weather_other1")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_SurfaceType2Other = klerKdot850AField.Values(0)
			End If
		End If
	End If
	
	' Surface Condition Other
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("on_road_cond")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("weather_other2")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_SurfaceCond1Other = klerKdot850AField.Values(0)
			End If
		End If
	End If
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("at_road_cond")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("weather_other2")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_SurfaceCond2Other = klerKdot850AField.Values(0)
			End If
		End If
	End If
	
	' Road Special Features
	Dim roadSpecialFeaturesArray(1 To 3)
	For i = 1 To 3
		Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("road_spec_0" & Cstr(i) & "_code")
		If Not klerKdot850AField Is Nothing Then
			roadSpecialFeaturesArray(i) = klerKdot850AField.Values(0)
		End If
	Next
	occurrenceDocument.KDOT_RoadSpec = Fulltrim(roadSpecialFeaturesArray)
	
	' Accident Class - Animal Type Other
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("accident_class_fhe")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("animal_type")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_AnimalClass1 = klerKdot850AField.Values(0)
			End If
		End If
	End If
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("accident_class_mhe")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("animal_type")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_AnimalClass2 = klerKdot850AField.Values(0)
			End If
		End If
	End If
	
	' Accident Class - Other Object
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("accident_class_fhe")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("accident_class_other")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_AccClassOther1 = klerKdot850AField.Values(0)
			End If
		End If
	End If
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("accident_class_mhe")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("accident_class_other")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_AccClassOther2 = klerKdot850AField.Values(0)
			End If
		End If
	End If
	
	' Fixed Object - Other
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("accident_class_fhe")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("fixed_object_other")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_ObjectOther1 = klerKdot850AField.Values(0)
			End If
		End If
	End If
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("accident_class_mhe")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("fixed_object_other")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_ObjectOther2 = klerKdot850AField.Values(0)
			End If
		End If
	End If
	
	' Collision with Vehicle - Other
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("collision_fhe")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("collision_other")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_CollisionOther1 = klerKdot850AField.Values(0)
			End If
		End If
	End If
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("collision_mhe")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("collision_other")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_CollisionOther2 = klerKdot850AField.Values(0)
			End If
		End If
	End If	
	
	' Traffic Controls
	For i = 1 To 5
		Erase klerKdot850AFieldMapping
		klerKdot850AFieldMapping("traf_control_0" & Cstr(i) & "_type") = "KDOT_TraffType_" & Cstr(i)
		klerKdot850AFieldMapping("traf_control_0" & Cstr(i) & "_ok") = "KDOT_TraffFunc_" & Cstr(i)
		Call ProcessKlerFields(klerKdot850ADocument, occurrenceDocument, "", klerKdot850AFieldMapping)
		
		Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("traf_control_0" & Cstr(i) & "_onat")
		If Not klerKdot850AField Is Nothing Then
			If klerKdot850AField.Values(0) = "O" Then
				Set occurrenceField = occurrenceDocument.GetFirstItem("KDOT_TraffOA_" & Cstr(i))
				If Not occurrenceField Is Nothing Then
					occurrenceField.Values = "On"
				Else
					Set occurrenceField = New NotesItem(occurrenceDocument, "KDOT_TraffOA_" & CStr(i), "On")
					occurrenceField.IsSummary = True					
				End If
			Elseif klerKdot850AField.Values(0) = "A" Then
				Set occurrenceField = occurrenceDocument.GetFirstItem("KDOT_TraffOA_" & CStr(i))
				If Not occurrenceField Is Nothing Then
					occurrenceField.Values = "At"
				Else
					Set occurrenceField = New NotesItem(occurrenceDocument, "KDOT_TraffOA_" & CStr(i), "At")
					occurrenceField.IsSummary = True
				End If
				
			End If
		End If
	Next
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("traf_control_other")
	If Not klerKdot850AField Is Nothing Then
		occurrenceDocument.KDOT_TrafficTypeOther = klerKdot850AField.Values(0)
	End If
	
	' Roadway Number of Lanes - Other
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("on_road_nbr_lanes")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("road_nbr_lanes_other")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_NumberOfLanes1Other = klerKdot850AField.Values(0)
			End If
		End If
	End If
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("at_road_nbr_lanes")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("road_nbr_lanes_other")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_NumberOfLanes2Other = klerKdot850AField.Values(0)
			End If
		End If
	End If
	
	' Road Character - Other
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("on_road_char")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("road_char_other")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_RoadChar1Other = klerKdot850AField.Values(0)
			End If
		End If
	End If
	Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("at_road_char")
	If Not klerKdot850AField Is Nothing Then
		If klerKdot850AField.Values(0) <> "" Then
			Set klerKdot850AField = klerKdot850ADocument.GetFirstItem("road_char_other")
			If Not klerKdot850AField Is Nothing Then
				occurrenceDocument.KDOT_RoadChar2Other = klerKdot850AField.Values(0)
			End If
		End If
	End If
	
	' Collision Diagram
	' The Collision Diagram is contained in the collision_diagram XML element. It is some type of encoded data from Easy Street Draw via an
	' ActiveX component used in the KLER software. The exact format is not known by the KLER developer, only by the company behind Easy
	' Street Draw. It is probably not an image but rather an ESD file.
	
	' Add "KDOT Accident - Occurrence 2009" to LoadedSubForms.
	occurrenceDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Accident - Occ 2009" & ";" & Implode(occurrenceDocument.LoadedSubForms,";"),";")))
	
	' Save the Occurrence document.
	Call occurrenceDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:GetKibrsSubmitDefault:5:8
%REM
	Function GetKibrsSubmitDefault
	Description: Comments for Function
%END REM
Function GetKibrsSubmitDefault() As Boolean
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim controlDocument As NotesDocument
	Dim controlView As NotesView
	
	Dim databaseFilePath As String
	
	Dim lookupDatabase As NotesDatabase
	Dim lookupView As NotesView
	Dim lookupDocument As NotesDocument
	
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	GetKibrsSubmitDefault = True
	
	Set controlView = currentDatabase.GetView("(Control)")
	Set controlDocument = controlView.GetFirstDocument
	If Not controlDocument Is Nothing Then
		If controlDocument.HasItem("KLER_KIBRS_Submit") Then
			If controlDocument.KLER_KIBRS_Submit(0) = "N" Then
				GetKibrsSubmitDefault = False
			End If
		End If
	End If
	
End Function

'++LotusScript Development Environment:2:1:GetKlerDefaultFilePath:1:8
Function GetKlerDefaultFilePath() As String
	
	Dim currentSession As NotesSession
	
	Set currentSession = New NotesSession
	
	GetKlerDefaultFilePath = currentSession.GetEnvironmentString("KlerDefaultFilePath")	
	
End Function

'++LotusScript Development Environment:2:2:ProcessKlerKdot854Passenger:2:8
Sub ProcessKlerKdot854Passenger(klerKdot854Document As NotesDocument, occurrenceDocument As NotesDocument, _
passengerNumber As String, emsList List As KdotEmsUnit)
	
	On Error Goto ErrorHandle
	
	Dim klerKdot854FieldMapping List As String
	Dim klerKdot854Field As NotesItem
	
	Dim passengerDocument As NotesDocument
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	Dim emsUnit As KdotEmsUnit
	
	Dim i As Integer
	
	' Exit if there is no data entered on the form with this number.
	Set klerKdot854Field = klerKdot854Document.GetFirstItem("person_share" & Cstr(6+29*(Cint(passengerNumber)-1)))
	If Not klerKdot854Field Is Nothing Then
		If klerKdot854Field.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Find existing Passenger document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKdot854Document.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Person/Property" _
		And Not rmsDocument.IsDeleted Then
			Set klerKdot854Field = klerKdot854Document.GetFirstItem("person_share" & Cstr(6+29*(Cint(passengerNumber)-1)))
			If rmsDocument.KLERRecordID(0) = klerKdot854Field.Values(0) Then
				Set passengerDocument = rmsDocument
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	If passengerDocument Is Nothing Then
		Exit Sub
	End If
	
	' Set Involvement Type
	passengerDocument.TypeList = Fulltrim(Arrayunique(Split("Passenger" & ";" & Implode(passengerDocument.TypeList,";"),";")))
	
	klerKdot854FieldMapping("occup_seat_type") = "KDOT_SeatType"	
	klerKdot854FieldMapping("occup_safety_equip") = "KDOT_SafetyEquip"
	klerKdot854FieldMapping("occup_ejected") = "KDOT_EjectTrap"
	klerKdot854FieldMapping("occup_injury_severity") = "KDOT_InjurySeverity"
	klerKdot854FieldMapping("occup_eject_path") = "KDOT_EjectPath"	
	klerKdot854FieldMapping("occup_extricated_flag") = "KDOT_Extrication"
	Call ProcessKlerFields(klerKdot854Document, passengerDocument, Cstr(2+Cint(passengerNumber)), klerKdot854FieldMapping)
	
	' EMS Unit
	For i = 1 To 4
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("occup_trans_unit" & Cstr(16+i))
		If Not klerKdot854Field Is Nothing Then
			Set emsUnit = emsList(klerKdot854Field.Values(0))
			If Not emsUnit Is Nothing Then
				Set klerKdot854Field = klerKdot854Document.GetFirstItem("occup_trans_unit" & passengerNumber)
				If Not klerKdot854Field Is Nothing Then
					If emsUnit.transportUnit = klerKdot854Field.Values(0) Then
						passengerDocument.KDOT_EMSUnit = emsUnit.takenBy
						passengerDocument.KDOT_TakenTo = emsUnit.takenTo
						If Isdate(emsUnit.notified) Then
							passengerDocument.KDOT_EMSNotified = Cdat(emsUnit.notified)
						End If
						If Isdate(emsUnit.arrived) Then
							passengerDocument.KDOT_EMSArrived = Cdat(emsUnit.arrived)
						End If
						If Isdate(emsUnit.hospital) Then
							passengerDocument.KDOT_EMSHospital = Cdat(emsUnit.hospital)
						End If
					End If
				End If
			End If
		End If
	Next
	
	' Add "KDOT Accident - Person 2009" subform if needed.
	passengerDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Accident - Person 2009" & ";" & Implode(passengerDocument.LoadedSubForms,";"),";")))
	
	' Save Passenger document.
	Call passengerDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerVehicleRecord:1:8
Sub ProcessKlerVehicleRecord(klerVehicleDocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim rmsKlerView As NotesView
	Dim rmsKlerViewKey(1 To 2) As String
	Dim vehicleDocument As NotesDocument
	
	Dim personDocumentCollection As NotesDocumentCollection
	Dim personDocument As NotesDocument
	Dim hasKDOT As Boolean
	
	Dim klerVehicleFieldMapping List As String
	Dim klerField As NotesItem
	
	Dim foundVehicleMatch As Boolean
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	If rmsKlerView Is Nothing Then
		' ERROR: If view does not exist, give error msg.
	End If	
	rmsKlerViewKey(1) = Cstr(klerVehicleDocument.CaseID(0))
	rmsKlerViewKey(2) = Cstr(klerVehicleDocument.GUIDVAL(0))
	rmsKlerView.Refresh
	Set vehicleDocument = rmsKlerView.GetDocumentByKey(rmsKlerViewKey, True)
	If vehicleDocument Is Nothing Then
		foundVehicleMatch = False
	ElseIf vehicleDocument.IsDeleted Then
		foundVehicleMatch = False
	Else
		foundVehicleMatch = True
	End If
	
	If Not foundVehicleMatch Then
		
		Set vehicleDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		vehicleDocument.Form = "SupplementaryMV"
		
		' Get key fields to link RMS Vehicle Document and KLER Vehicle Document.
		vehicleDocument.KLERCaseID = klerVehicleDocument.CaseID(0)
		vehicleDocument.KLERGUID = klerVehicleDocument.GUIDVAL(0)
		vehicleDocument.KLERRecordID = klerVehicleDocument.RecordId(0)
		
		' Make Vehicle document a response to the Driver.
		Set personDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerVehicleDocument.CaseID(0), True)
		Set personDocument = personDocumentCollection.GetFirstDocument
		While Not personDocument Is Nothing
			
			If personDocument.HasItem("KDOT_Unit") Then
				If Isnumeric(klerVehicleDocument.traffic_unit_num(0)) Then
					If personDocument.KDOT_Unit(0) = Cstr(Cint(klerVehicleDocument.traffic_unit_num(0))) _
					And InStr(Implode(personDocument.Type), "Driver") > 0 Then
						Call vehicleDocument.MakeResponse(personDocument)
					End If
				Else
					If personDocument.KDOT_Unit(0) <> "" _ 
					And personDocument.KDOT_Unit(0) = klerVehicleDocument.traffic_unit_num(0) _
					And InStr(Implode(personDocument.Type), "Driver") > 0 Then
						Call vehicleDocument.MakeResponse(personDocument)
					End If
				End If
			End If
			
			Set personDocument = personDocumentCollection.GetNextDocument(personDocument)
		Wend
		
		' If no Driver is found, make Vehicle document a response to any document with the same unit number.
		If Not vehicleDocument.IsResponse Then
			Set personDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerVehicleDocument.CaseID(0), True)
			Set personDocument = personDocumentCollection.GetFirstDocument
			While Not personDocument Is Nothing
				
				If personDocument.HasItem("KDOT_Unit") Then
					If IsNumeric(klerVehicleDocument.traffic_unit_num(0)) Then
						If personDocument.KDOT_Unit(0) = CStr(CInt(klerVehicleDocument.traffic_unit_num(0))) Then
							Call vehicleDocument.MakeResponse(personDocument)
						End If
					Else
						If personDocument.KDOT_Unit(0) <> "" _ 
						And personDocument.KDOT_Unit(0) = klerVehicleDocument.traffic_unit_num(0) Then
							Call vehicleDocument.MakeResponse(personDocument)
						End If
					End If
				End If
				
				Set personDocument = personDocumentCollection.GetNextDocument(personDocument)
			Wend			
		End If
		
		' If corresponding Person document cannot be found, place Vehicle under Occurrence.
		If Not vehicleDocument.IsResponse Then
			Call vehicleDocument.MakeResponse(occurrenceDocument)
		End If
		
	End If
	
	' Map all normal Vehicle document fields from KLER to RMS, then apply them to the Vehicle document.	
	klerVehicleFieldMapping("vehicle_year") = "ModelYr"
	klerVehicleFieldMapping("vehicle_model") = "VModel"
	klerVehicleFieldMapping("vehicle_make") = "VMake"
	klerVehicleFieldMapping("body_style") = "Style"
	klerVehicleFieldMapping("vehicle_color") = "Colour"
	klerVehicleFieldMapping("vin_number") = "VINNum"
	klerVehicleFieldMapping("insurance_company") = "InsuranceComp"
	klerVehicleFieldMapping("removed_by") = "TowComp"
	klerVehicleFieldMapping("key_location") = "KeyLocation"
	klerVehicleFieldMapping("lic_plate_year") = "LicYear"
	klerVehicleFieldMapping("lic_plate_state") = "ProvState"
	klerVehicleFieldMapping("policy_number") = "InsPolNum"
	klerVehicleFieldMapping("vehicle_location") = "VehStored"
	klerVehicleFieldMapping("lic_plate_num") = "LicNum"	
	klerVehicleFieldMapping("condition") = "VehCond"
	klerVehicleFieldMapping("traffic_unit_num") = "KLERKDOT_Unit"
	Forall vehicleFieldName In klerVehicleFieldMapping
		
		Set klerField = klerVehicleDocument.GetFirstItem(Listtag(vehicleFieldName))
		If Not klerField Is Nothing Then
			Call vehicleDocument.CopyItem(klerField, vehicleFieldName)
		End If
		
	End Forall
	
	' Engine Displacement
	If Isnumeric(klerVehicleDocument.mc_ccs(0)) Then
		vehicleDocument.EngineDisp = Clng(klerVehicleDocument.mc_ccs(0))
	End If
	
	' Odometer
	If Isnumeric(klerVehicleDocument.odometer(0)) Then
		vehicleDocument.Odometer = Clng(klerVehicleDocument.Odometer(0))
	End If
	
	' Get handle to Person document parent of Vehicle document. If it is not a response to a Person document, then skip the KDOT fields.
	Set personDocument = vehicleDocument.ParentDatabase.GetDocumentByUNID(vehicleDocument.ParentDocumentUNID)
	If personDocument.Form(0) = "Person/Property" Then
	
		If klerVehicleDocument.vehicle_fire_cbox(0) = "Y" Then
			personDocument.KDOT_Fire = "Y"
			hasKDOT = True
		End If
		If IsNumeric(klerVehicleDocument.total_occupants(0)) Then
			personDocument.KDOT_Occupants = CInt(klerVehicleDocument.total_occupants(0))
			hasKDOT = True
		End If
		If klerVehicleDocument.direction_of_travel(0) <> "" Then
			personDocument.KDOT_Direction = klerVehicleDocument.direction_of_travel(0)
			hasKDOT = True
		End If
		If klerVehicleDocument.lic_plate_county(0) <> "" Then
			personDocument.KDOT_LicCounty = klerVehicleDocument.lic_plate_county(0)
			hasKDOT = True
		End If	
		
		' Add KDOT Accident subform if needed. This also saves the Person document, since it is only modified for KDOT info.
		If hasKDOT Then
			personDocument.LoadedSubForms = FullTrim(ArrayUnique(Split("Accident - Person 2009" & ";" & Implode(personDocument.LoadedSubForms,";"),";")))
			Call personDocument.Save(False, False)
		End If
	
	End If
	
	' Save Vehicle document.
	Call SetUpRmsDocument(vehicleDocument)
	Call vehicleDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub



'++LotusScript Development Environment:2:2:ProcessKlerKsorOffense:2:8
Sub ProcessKlerKsorOffense(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument, _
	klerKsorFieldNumber As String)
	
	On Error Goto ErrorHandle
	
	Dim klerKsorFieldMapping List As String
	Dim klerKsorField As NotesItem
	
	Dim offenseDocument As NotesDocument
	
	Dim statuteString As String
	
	Dim rmsKlerView As NotesView
	Dim rmsKlerDocumentCollection As NotesDocumentCollection
	Dim rmsKlerDocument As NotesDocument
	
	' Quit if there is no offense with this number on the form.
	Set klerKsorField = klerKsorDocument.GetFirstItem("offense_num" & klerKsorFieldNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Check for existing KIBRS Offense document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsKlerDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKsorDocument.CaseID(0), True)
	Set rmsKlerDocument = rmsKlerDocumentCollection.GetFirstDocument
	While Not rmsKlerDocument Is Nothing
		
		If rmsKlerDocument.Form(0) = "KIBRS Offense" _
		And Not rmsKlerDocument.IsDeleted Then
			Set klerKsorField = klerKsorDocument.GetFirstItem("offense_num" & klerKsorFieldNumber)
			If Isnumeric(klerKsorField.Values(0)) Then
				If rmsKlerDocument.OffenseNumber(0) = Cint(klerKsorField.Values(0)) Then
					Set offenseDocument = rmsKlerDocument
				End If
			End If
		End If
		
		Set rmsKlerDocument = rmsKlerDocumentCollection.GetNextDocument(rmsKlerDocument)
	Wend	
	
	' Create new document if one does not already exist.
	If offenseDocument Is Nothing Then		
		
		Set offenseDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		
		offenseDocument.Form = "KIBRS Offense"
		
		' Get key fields to link RMS Person Document and KLER Person Document.
		offenseDocument.KLERCaseID = klerKsorDocument.CaseID(0)
		offenseDocument.KLERGUID = klerKsorDocument.GuidVal(0)
		
		Call offenseDocument.MakeResponse(occurrenceDocument)
		
	End If

	' Offense Number / Premise / Hate/Bias / Campus / Local Code	
	klerKsorFieldMapping("premise") = "KIBRS_Prem"
	klerKsorFieldMapping("hate_bias") = "KIBRS_Hate"
	klerKsorFieldMapping("campus_code") = "KIBRS_Campus"
	klerKsorFieldMapping("local_code") = "KIBRS_LocalCode"	
	Call ProcessKlerFields(klerKsorDocument, offenseDocument, klerKsorFieldNumber, klerKsorFieldMapping)
	
	' # of Premises
	Erase klerKsorFieldMapping
	klerKsorFieldMapping("num_premise") = "PremNum"
	Call ProcessKlerNumericFields(klerKsorDocument, offenseDocument, klerKsorFieldNumber, klerKsorFieldMapping)
	
	Dim offenseNumField As NotesItem
	Set klerKsorField = klerKsorDocument.GetFirstItem("offense_num" & klerKsorFieldNumber)
	If Not klerKsorField Is Nothing Then
		Set offenseNumField = offenseDocument.GetFirstItem("OffenseNumber")
		If offenseNumField Is Nothing Then
			Set offenseNumField = New NotesItem(offenseDocument, "OffenseNumber", 0)
			offenseNumField.IsSummary = True			
		End If
		offenseNumField.IsSummary = True
		If IsNumeric(klerKsorField.Values(0)) Then
			offenseNumField.Values = CInt(klerKsorField.Values(0))
		End If		
	End If
	
	' Statute
	Dim offenseStatute As Statute
	Set offenseStatute = GetStatuteAndCharge(klerKsorDocument, klerKsorFieldNumber)
	If Not offenseStatute Is Nothing Then
		offenseDocument.Statute = offenseStatute.Statute
		offenseDocument.Charge = offenseStatute.Charge
		offenseDocument.Chapter = offenseStatute.Chapter
		offenseDocument.Section = offenseStatute.Section
		offenseDocument.Sub1 = offenseStatute.Sub1
		offenseDocument.Sub2 = offenseStatute.Sub2
		offenseDocument.Sub3 = offenseStatute.Sub3
		offenseDocument.Sub4 = offenseStatute.Sub4
		offenseDocument.OffenseCode = offenseStatute.OffenseCode
		If offenseStatute.OffenseCode = "" Then
			offenseDocument.KIBRS_Submit = ""
		ElseIf GetKibrsSubmitDefault Then
			If Not offenseDocument.HasItem("KIBRS_Submit") Then
				offenseDocument.KIBRS_Submit = "1"
			End If
		ElseIf Not offenseDocument.HasItem("KIBRS_Submit") Then
			offenseDocument.KIBRS_Submit = ""
		End If
		
		offenseDocument.ViewDisplay = "KIBRS Offense: " + offenseDocument.Charge(0)
	Else
		If Not offenseDocument.HasItem("KIBRS_Submit") Then
			offenseDocument.KIBRS_Submit = ""
		End If
	End If
	
	' Attempted / Completed
	Call offenseDocument.RemoveItem("KIBRS_ComplCode")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "attempted_cbox", "KIBRS_ComplCode", "A")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "completed_cbox", "KIBRS_ComplCode", "C")
	
	' Aid/Abet, Conspiracy, Solicitation
	Call offenseDocument.RemoveItem("KIBRS_AidingCode")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "aid_abet_cbox",		"KIBRS_AidingCode", "X")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "conspiracy_cbox",	"KIBRS_AidingCode", "C")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "solicitation_cbox",	"KIBRS_AidingCode", "S")
	
	' Method of Entry (Force / No Force)
	Call offenseDocument.RemoveItem("KIBRS_MoE")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "force",		"KIBRS_MoE", "F")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "no_force_cbox",	"KIBRS_MoE", "N")	
	
	' Type of Theft
	Call offenseDocument.RemoveItem("KIBRS_TheftType")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "coin_machine_cbox",	"KIBRS_TheftType", "M")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "from_building_cbox",	"KIBRS_TheftType", "B")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "mvparts_cbox",		"KIBRS_TheftType", "A")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "shoplifting_cbox",	"KIBRS_TheftType", "L")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "pocket_cbox",		"KIBRS_TheftType", "P")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "purse_cbox",		"KIBRS_TheftType", "S")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "embezzlement_cbox",	"KIBRS_TheftType", "E")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "poss_stolen_cbox",	"KIBRS_TheftType", "T")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "mv_cbox",			"KIBRS_TheftType", "V")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "theft_mv_cbox",		"KIBRS_TheftType", "F")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "all_other_cbox",	"KIBRS_TheftType", "O")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "theft_na_cbox",		"KIBRS_TheftType", "N")
	
	' Offender Suspected of Using
	Call offenseDocument.RemoveItem("KIBRS_OffenderUsing")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "alcohol_cbox",		"KIBRS_OffenderUsing", "A")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "comp_equip_cbox",	"KIBRS_OffenderUsing", "C")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "drug_cbox",		"KIBRS_OffenderUsing", "D")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "offender_na_cbox",	"KIBRS_OffenderUsing", "N")
	
	' Type of Criminal Activity
	Call offenseDocument.RemoveItem("KIBRS_CrimType")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "buy_rec_cbox",		"KIBRS_CrimType", "B")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "trans_cbox",		"KIBRS_CrimType", "T")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "using_cbox",		"KIBRS_CrimType", "U")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "cult_manu_cbox",	"KIBRS_CrimType", "C")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "dist_sell_cbox",	"KIBRS_CrimType", "D")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "exploit_cbox",		"KIBRS_CrimType", "E")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "oper_cbox",		"KIBRS_CrimType", "O")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "possess_cbox",		"KIBRS_CrimType", "P")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "juvenile_gang_cbox",	"KIBRS_CrimType", "J")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "other_gang_cbox",	"KIBRS_CrimType", "G")
	Call ProcessKlerCheckboxMulti(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "no_gang_cbox",		"KIBRS_CrimType", "N")
	
	' Type of Force / Weapon
	Call offenseDocument.RemoveItem("KIBRS_ForceType")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "firearm_cbox",			"KIBRS_ForceType", "11")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "handgun_cbox",			"KIBRS_ForceType", "12")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "rifle_cbox",			"KIBRS_ForceType", "13")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "shotgun_cbox",			"KIBRS_ForceType", "14")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "other_firearm_cbox",		"KIBRS_ForceType", "15")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "knife_cbox",			"KIBRS_ForceType", "20")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "blunt_obj_cbox",		"KIBRS_ForceType", "30")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "motor_vehicle_cbox",		"KIBRS_ForceType", "35")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "personal_weapon_cbox",	"KIBRS_ForceType", "40")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "poison_cbox",			"KIBRS_ForceType", "50")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "explosive_cbox",		"KIBRS_ForceType", "60")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "incid_device_cbox",		"KIBRS_ForceType", "65")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "narcotics_cbox",		"KIBRS_ForceType", "70")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "asphyxiation_cbox",		"KIBRS_ForceType", "85")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "other_cbox",			"KIBRS_ForceType", "90")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "unknown_cbox",			"KIBRS_ForceType", "95")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "none_cbox",			"KIBRS_ForceType", "99")
	
	' Automatic Weapon Indicator - Do "auto" checkboxes second so the results can overwrite the "regular" version if needed.
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "auto_firearm_cbox",		"KIBRS_ForceType", "11A")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "auto_handgun_cbox",		"KIBRS_ForceType", "12A")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "auto_rifle_cbox",		"KIBRS_ForceType", "13A")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "auto_shotgun_cbox",		"KIBRS_ForceType", "14A")
	Call ProcessKlerCheckbox(klerKsorDocument, offenseDocument, klerKsorFieldNumber, "auto_other_firearm_cbox",	"KIBRS_ForceType", "15A")
	
	' Save KIBRS Offense document.
	Call SetUpRmsDocument(offenseDocument)
	Call offenseDocument.ReplaceItemValue("_ViewOrder", 1)
	Call offenseDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerPersonRecord:1:8
Sub ProcessKlerPersonRecord(klerPersonDocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim rmsKlerView As NotesView
	Dim rmsKlerViewKey(1 To 2) As String
	Dim personDocument As NotesDocument
	
	Dim klerPersonFieldMapping List As String
	Dim klerField As NotesItem
	
	Dim hasPersonDescriptors As Boolean
	Dim hasKDOT As Boolean
	Dim hasArrestDetails As Boolean
	
	Dim clonePersonArray As Variant
	Dim clonePersonReplicaID As String
	Dim clonePersonUNID As String
	Dim cloneDatabase As NotesDatabase
	Dim clonePersonDocument As NotesDocument
	
	Dim involvementTypes() As String
	Dim involvementTypesCount As Integer
	
	Dim foundPersonMatch As Boolean
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	If rmsKlerView Is Nothing Then
		' ERROR: If view does not exist, give error msg.
	End If	
	rmsKlerViewKey(1) = Cstr(klerPersonDocument.CaseID(0))
	rmsKlerViewKey(2) = Cstr(klerPersonDocument.GUIDVAL(0))
	rmsKlerView.Refresh
	Set personDocument = rmsKlerView.GetDocumentByKey(rmsKlerViewKey, True)
	If personDocument Is Nothing Then
		foundPersonMatch = False
	ElseIf personDocument.IsDeleted Then
		foundPersonMatch = False
	Else
		foundPersonMatch = True
	End If
	
	If Not foundPersonMatch Then
		
		Set personDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		personDocument.Form = "Person/Property"
		
		' Copy items from cloned person.
		If klerPersonDocument.RmsId(0) <> "" Then
			clonePersonArray = Split(Right(klerPersonDocument.RmsId(0), Len(klerPersonDocument.RmsId(0)) - Instr(klerPersonDocument.RmsId(0),"|")),"~")
			clonePersonReplicaID = Replace(clonePersonArray(0), ":", "")
			clonePersonUNID = clonePersonArray(1)
		End If
		
		Set cloneDatabase = New NotesDatabase("", "")
		
		If clonePersonReplicaID <> "" Then
			Call cloneDatabase.OpenByReplicaID(personDocument.ParentDatabase.Server, clonePersonReplicaID)
		End If
		
		If cloneDatabase.IsOpen Then
			Set clonePersonDocument = cloneDatabase.GetDocumentByUNID(clonePersonUNID)
			
			Dim personFields(1 To 65) As String
			personFields(1) = "Agency"
			personFields(2) = "Surname"
			personFields(3) = "Given1"
			personFields(4) = "Given2"
			personFields(5) = "Given3"
			personFields(6) = "Alias"
			personFields(7) = "Nee"
			personFields(8) = "HomePhone"
			personFields(9) = "BusinessPhone"
			personFields(10) = "BusinessExt"
			personFields(11) = "CellPhone"
			personFields(12) = "Email"
			personFields(13) = "DOB"
			personFields(14) = "Sex"
			personFields(15) = "MaritalStatus"
			personFields(16) = "ApparentAge"
			personFields(17) = "DLNumber"
			personFields(18) = "DLIssuedBy"
			personFields(19) = "Race"
			personFields(20) = "SIN"
			personFields(21) = "DLClass"
			personFields(22) = "DLDate"
			personFields(23) = "Employer"
			personFields(24) = "Occupation"
			personFields(25) = "AlternateID"
			personFields(26) = "Ethnicity"
			personFields(27) = "StreetNumber"
			personFields(28) = "Street"
			personFields(29) = "TownCity"
			personFields(30) = "Prov"
			personFields(31) = "PostalCode"
			personFields(32) = "LocationDetail"
			personFields(33) = "HazardDetails"
			personFields(34) = "Height"
			personFields(35) = "Weight"
			personFields(36) = "Complexion"
			personFields(37) = "Build"
			personFields(38) = "HairColour"
			personFields(39) = "HairLength"
			personFields(40) = "HairStyle"
			personFields(41) = "FacialHair"
			personFields(42) = "Teeth"
			personFields(43) = "Speech"
			personFields(44) = "RLHanded"
			personFields(45) = "ResidentIndicator"
			personFields(46) = "EyeColour"
			personFields(47) = "Glasses"
			personFields(48) = "PlaceOfBirth"
			personFields(49) = "FPS"
			personFields(50) = "CRCF"
			personFields(51) = "ArrestNumber"
			personFields(52) = "MarksScarsTatoosFeatures"
			personFields(53) = "Tattoos"
			personFields(54) = "CNICaution"
			personFields(55) = "AT_Violation"
			personFields(56) = "EyeAppearance"
			personFields(57) = "StNumberSuffix"
			personFields(58) = "StPreDirection"
			personFields(59) = "StType"
			personFields(60) = "StPostDirection"
			personFields(61) = "BuildingUnitType"
			personFields(62) = "BuildingUnitIdentifier"
			personFields(63) = "Building"
			personFields(64) = "Floor"
			personFields(65) = "Room"
			
			Dim personFieldItem As NotesItem
			
			Forall personField In personFields
				
				Set personFieldItem = clonePersonDocument.GetFirstItem(personField)
				If Not personFieldItem Is Nothing Then
					Call personDocument.CopyItem(personFieldItem, "")
				End If
				
			End Forall
			
		End If
		
	End If
	
SkipClone:
	
	' Get key fields to link RMS Person Document and KLER Person Document.
	personDocument.KLERCaseID = klerPersonDocument.CaseID(0)
	personDocument.KLERGUID = klerPersonDocument.GUIDVAL(0)
	personDocument.KLERRecordID = klerPersonDocument.RecordId(0)
	
	' Make Person document a response to the Occurrence.
	Call personDocument.MakeResponse(occurrenceDocument)
	
	' Map all normal Person document fields from KLER to RMS, then apply them to the Person document.
	klerPersonFieldMapping("victim_num") = "VictimNumber"
	klerPersonFieldMapping("suspect_num") = "SuspectNumber"
	klerPersonFieldMapping("arrestee_num") = "ArresteeNumber"
	
	klerPersonFieldMapping("first_name") = "Given1"
	klerPersonFieldMapping("home_city") = "TownCity"
	klerPersonFieldMapping("home_state") = "Prov"
	klerPersonFieldMapping("home_street_category") = "StType"
	klerPersonFieldMapping("home_street_name") = "StName"
	klerPersonFieldMapping("home_street_num") = "StNumber"
	klerPersonFieldMapping("home_street_occ_num") = "BuildingUnitIdentifier"
	klerPersonFieldMapping("home_street_occ_code") = "BuildingUnitType"
	klerPersonFieldMapping("home_street_pre_dir") = "StPreDirection"
	klerPersonFieldMapping("home_street_post_dir") = "StPostDirection"
	klerPersonFieldMapping("home_zip") = "PostalCode"
	klerPersonFieldMapping("last_name") = "Surname"
	klerPersonFieldMapping("middle_name") = "Given2"
	klerPersonFieldMapping("race") = "Race"	
	'	klerPersonFieldMapping("location_street_num") = "StreetNumber"
	'	klerPersonFieldMapping("location_zip") = "PostalCode"
	klerPersonFieldMapping("radio_num") = "DispatchNumber"
	klerPersonFieldMapping("sex") = "Sex"
	klerPersonFieldMapping("ssn") = "SIN"
	klerPersonFieldMapping("home_phone") = "HomePhone"
	klerPersonFieldMapping("work_phone") = "BusinessPhone"
	klerPersonFieldMapping("other_phone") = "CellPhone"
	klerPersonFieldMapping("dri_license_class") = "DLClass"
	klerPersonFieldMapping("dri_license_num") = "DLNumber"
	klerPersonFieldMapping("dri_license_state") = "DLIssuedBy"
	klerPersonFieldMapping("email_address") = "Email"
	klerPersonFieldMapping("employer") = "Employer"
	Forall personFieldName In klerPersonFieldMapping
		
		Set klerField = klerPersonDocument.GetFirstItem(Listtag(personFieldName))
		If Not klerField Is Nothing Then
			Call personDocument.CopyItem(klerField, personFieldName)
		End If
		
	End Forall
	
	' Handle date fields.
	Call ProcessKlerDateTimeFields(klerPersonDocument, personDocument, "dob", "", "DOB")	
	
	' Alias
	If klerPersonDocument.alias1(0) <> "" _
	Or klerPersonDocument.alias2(0) <> "" _
	Or klerPersonDocument.alias3(0) <> "" _
	Or klerPersonDocument.alias4(0) <> "" Then
		personDocument.Alias = Fulltrim(Split(klerPersonDocument.alias1(0) & ";" & klerPersonDocument.alias2(0) & ";" & _
		klerPersonDocument.alias3(0) & ";" & klerPersonDocument.alias4(0), ";"))
	End If
	
	' Map all Person Descriptors fields from KLER to RMS, then apply them to the Person document.
	Erase klerPersonFieldMapping
	klerPersonFieldMapping("build") = "Build"
	klerPersonFieldMapping("ethnicity") = "Ethnicity"
	klerPersonFieldMapping("hair_color") = "HairColour"
	klerPersonFieldMapping("hair_length") = "HairLength"
	klerPersonFieldMapping("hair_style") = "HairStyle"
	klerPersonFieldMapping("facial_hair") = "FacialHair"
	klerPersonFieldMapping("complexion") = "Complexion"
	klerPersonFieldMapping("eye_appearance") = "EyeAppearance"
	klerPersonFieldMapping("eyes") = "EyeColour"
	klerPersonFieldMapping("teeth") = "Teeth"
	klerPersonFieldMapping("right_left_handed") = "RLHanded"
	klerPersonFieldMapping("speech") = "Speech"
	Forall personFieldName In klerPersonFieldMapping
		
		Set klerField = klerPersonDocument.GetFirstItem(Listtag(personFieldName))
		If Not klerField Is Nothing Then
			If klerField.Values(0) <> "" Then
				Call personDocument.CopyItem(klerField, personFieldName)
				hasPersonDescriptors = True
			End If
		End If
		
	End Forall
	
	' Scars / Tattoos
	If klerPersonDocument.scars1(0) <> "" _
	Or klerPersonDocument.scars2(0) <> "" _
	Or klerPersonDocument.scars3(0) <> "" Then
		
		personDocument.MarksScarsTatoosFeatures = Fulltrim(Split(klerPersonDocument.scars1(0) & ";" & _
		klerPersonDocument.scars2(0) & ";" & klerPersonDocument.scars3(0), ";"))
		hasPersonDescriptors = True
		
	End If
	If klerPersonDocument.tattoos1(0) <> "" _
	Or klerPersonDocument.tattoos2(0) <> "" _
	Or klerPersonDocument.tattoos3(0) <> "" Then
		
		personDocument.Tattoos = Fulltrim(Split(klerPersonDocument.tattoos1(0) & ";" & _
		klerPersonDocument.tattoos2(0) & ";" & klerPersonDocument.tattoos3(0), ";"))
		hasPersonDescriptors = True
		
	End If
	
	' Glasses
	If klerPersonDocument.glasses(0) = "Y" Then
		personDocument.Glasses = "Glasses"
		hasPersonDescriptors = True
	End If
	
	' Place of Birth
	If klerPersonDocument.birth_place_country(0) <> "" _
	Or klerPersonDocument.birth_place_state(0) <> "" Then
		
		personDocument.PlaceOfBirth = Trim(klerPersonDocument.birth_place_state(0) & " " & _
		klerPersonDocument.birth_place_country(0))
		hasPersonDescriptors = True
		
	End If
	
	' Residency
	If klerPersonDocument.residency(0) <> "" Then
		If klerPersonDocument.residency(0) = "R" Then			
			personDocument.ResidentIndicator = "Resident"
			
		Else
			personDocument.ResidentIndicator = "Non-Resident"
		End If
		hasPersonDescriptors = True
	End If
	
	' Height / Weight
	If klerPersonDocument.height(0) <> "" Then
		If Isnumeric(klerPersonDocument.height(0)) Then
			personDocument.Height = Cint(klerPersonDocument.height(0))
			hasPersonDescriptors = True
		End If
	End If
	If klerPersonDocument.weight(0) <> "" Then
		If Isnumeric(klerPersonDocument.weight(0)) Then
			personDocument.Weight = Cint(klerPersonDocument.weight(0))
			hasPersonDescriptors = True
		End If
	End If
	
	' Add Person Descriptors subform if needed.
	If hasPersonDescriptors Then
		personDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Person Descriptors" & ";" & Implode(personDocument.LoadedSubForms,";"),";")))
	End If
	
	' Map all KDOT Accident fields from KLER to RMS, then apply them to the Person document.
	Erase klerPersonFieldMapping
	klerPersonFieldMapping("eject_trap") = "KDOT_EjectTrap"
	klerPersonFieldMapping("injury_severity") = "KDOT_InjurySeverity"
	klerPersonFieldMapping("safety_equip_used") = "KDOT_SafetyEquip"
	klerPersonFieldMapping("seat_type") = "KDOT_SeatType"
	klerPersonFieldMapping("ems_trans_unit") = "KDOT_EMSUnit"
	klerPersonFieldMapping("eject_path") = "KDOT_EjectPath"
	Forall personFieldName In klerPersonFieldMapping
		
		Set klerField = klerPersonDocument.GetFirstItem(Listtag(personFieldName))
		If Not klerField Is Nothing Then
			If klerField.Values(0) <> "" Then
				Call personDocument.CopyItem(klerField, personFieldName)
				If klerField.Name = "ems_trans_unit" Then
					hasKDOT = True
				End If
			End If
		End If
		
	End Forall	
	
	If klerPersonDocument.extrication_cbox(0) = "Y" Then
		personDocument.KDOT_Extrication = "Y"
	End If
	
	If IsNumeric(klerPersonDocument.traffic_unit_num(0)) Then
		personDocument.KDOT_Unit = CStr(CInt(klerPersonDocument.traffic_unit_num(0)))
	ElseIf klerPersonDocument.traffic_unit_num(0) <> "" Then
		personDocument.KDOT_Unit = klerPersonDocument.traffic_unit_num(0)
	End If
	
	' Add KDOT Accident subform if needed.
	If hasKDOT Then
		personDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Accident - Person 2009" & ";" & Implode(personDocument.LoadedSubForms,";"),";")))
	End If
	
	' Involvement Type Checkboxes
	Redim Preserve involvementTypes(1 To 1)
	If klerPersonDocument.arrestee_cbox(0) = "Y" Then
		
		involvementTypesCount = involvementTypesCount + 1
		Redim Preserve involvementTypes(1 To involvementTypesCount)
		involvementTypes(involvementTypesCount) = "Arrestee"
		
		personDocument.ArresteeClothing = klerPersonDocument.arrestee_wore(0)
		personDocument.ArresteeAppearance = klerPersonDocument.appearance(0)
		
		personDocument.LoadedSubForms = FullTrim(ArrayUnique(Split("Arrest Details" & ";" & Implode(personDocument.LoadedSubForms,";"),";")))
		
	End If
	If klerPersonDocument.cdl_cbox(0) = "Y" Then
		personDocument.CommercialDL = "Commercial DL"
	End If
	If klerPersonDocument.driver_cbox(0) = "Y" Then
		
		involvementTypesCount = involvementTypesCount + 1
		Redim Preserve involvementTypes(1 To involvementTypesCount)
		involvementTypes(involvementTypesCount) = "Driver"
		
	End If
	If klerPersonDocument.owner_cbox(0) = "Y" Then
		
		involvementTypesCount = involvementTypesCount + 1
		Redim Preserve involvementTypes(1 To involvementTypesCount)
		involvementTypes(involvementTypesCount) = "Owner"
		
	End If
	If klerPersonDocument.parent_guardian_cbox(0) = "Y" Then
		
		involvementTypesCount = involvementTypesCount + 1
		Redim Preserve involvementTypes(1 To involvementTypesCount)
		involvementTypes(involvementTypesCount) = "Parent/Guardian"
		
	End If
	If klerPersonDocument.passenger_cbox(0) = "Y" Then
		
		involvementTypesCount = involvementTypesCount + 1
		Redim Preserve involvementTypes(1 To involvementTypesCount)
		involvementTypes(involvementTypesCount) = "Passenger"
		
	End If
	If klerPersonDocument.pedestrian_cbox(0) = "Y" Then
		
		involvementTypesCount = involvementTypesCount + 1
		Redim Preserve involvementTypes(1 To involvementTypesCount)
		involvementTypes(involvementTypesCount) = "Pedestrian"
		
	End If
	If klerPersonDocument.suspect_cbox(0) = "Y" Then
		
		involvementTypesCount = involvementTypesCount + 1
		Redim Preserve involvementTypes(1 To involvementTypesCount)
		involvementTypes(involvementTypesCount) = "Suspect"
		
	End If
	If klerPersonDocument.victim_cbox(0) = "Y" Then
		
		involvementTypesCount = involvementTypesCount + 1
		Redim Preserve involvementTypes(1 To involvementTypesCount)
		involvementTypes(involvementTypesCount) = "Victim"
		
	End If
	If klerPersonDocument.witness_cbox(0) = "Y" Then
		
		involvementTypesCount = involvementTypesCount + 1
		Redim Preserve involvementTypes(1 To involvementTypesCount)
		involvementTypes(involvementTypesCount) = "Witness"
		
	End If
	
	' Set Involvement Types.
	If Isarray(involvementTypes) Then
		personDocument.TypeList = Fulltrim(Arrayunique(Split(Implode(involvementTypes,";") & ";" & Implode(personDocument.TypeList,";"),";")))
	End If
	
	' Save document.
	Call SetUpRmsDocument(personDocument)
	Call personDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	If Err = 4091 Then
		Resume SkipClone
	End If
	
	Error Err, Error & Chr(13) &_
|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKsorRP:1:8
Sub ProcessKlerKsorRP(klerKsorDocument As NotesDocument, occurrenceDocument As NotesDocument, rpNumber As String)
	
	On Error Goto ErrorHandle
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	Dim reportingPersonDocument As NotesDocument
	Dim propertyDocument As NotesDocument
	Dim klerKsorFieldMapping List As String
	Dim hasPersonDescriptors As Boolean
	Dim klerKsorField As NotesItem
	Dim hasRpPersonType As Boolean
	
	' Exit if no RP person type is selected.
	If rpNumber = "" Then
		Set klerKsorField = klerKsorDocument.GetFirstItem("person_share2")
	Else
		Set klerKsorField = klerKsorDocument.GetFirstItem("person_share" & Cstr(2+Cint(rpNumber)))
	End If
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Check for existing Reporting Person
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKsorDocument.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Person/Property" _
		And Not rmsDocument.IsDeleted Then
			If rmsDocument.HasItem("KlerRecordID") Then
				If rmsDocument.KlerRecordID(0) = klerKsorField.Values(0) Then
					Set reportingPersonDocument = rmsDocument
				End If
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
	If reportingPersonDocument Is Nothing Then
		
		Set reportingPersonDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		reportingPersonDocument.Form = "Person/Property"
		
		' Get key fields to link RMS Person Document and KLER Person Document.
		reportingPersonDocument.KLERCaseID = klerKsorDocument.CaseID(0)		
		reportingPersonDocument.KLERGUID = klerKsorDocument.GuidVal(0)
		reportingPersonDocument.KlerRecordID = klerKsorField.Values(0)
		
		Call reportingPersonDocument.MakeResponse(occurrenceDocument)
	End If
	
	klerKsorFieldMapping("rp_homephone") = "HomePhone"
	klerKsorFieldMapping("rp_workphone") = "BusinessPhone"
	klerKsorFieldMapping("rp_race") = "Race"
	klerKsorFieldMapping("rp_sex") = "Sex"
	klerKsorFieldMapping("rp_lname") = "Surname"
	klerKsorFieldMapping("rp_fname") = "Given1"	
	klerKsorFieldMapping("rp_middle") = "Given2"
	klerKsorFieldMapping("rp" & "_street_num") = "StNumber"
	klerKsorFieldMapping("rp" & "_struct_num") = "BuildingUnitIdentifier"
	klerKsorFieldMapping("rp" & "_street_pre_dir") = "StPreDirection"
	klerKsorFieldMapping("rp" & "_street_name") = "StName"
	klerKsorFieldMapping("rp" & "_street_category") = "StType"
	klerKsorFieldMapping("rp" & "_street_post_dir") = "StPostDirection"
	klerKsorFieldMapping("rp_city") = "TownCity"
	klerKsorFieldMapping("rp_state") = "Prov"
	klerKsorFieldMapping("rp_zip") = "PostalCode"
	klerKsorFieldMapping("rp_employer") = "Employer"	
	Call ProcessKlerFields(klerKsorDocument, reportingPersonDocument, rpNumber, klerKsorFieldMapping)
	
	' Handle date fields.
	Set klerKsorField = klerKsorDocument.GetFirstItem("rp_dob" & rpNumber)
	If Not klerKsorField Is Nothing Then
		If Isdate(klerKsorField.Values(0)) Then
			reportingPersonDocument.DOB = Cdat(klerKsorField.Values(0))
		End If
	End If
	
	' Handle numeric fields.
	Erase klerKsorFieldMapping
	klerKsorFieldMapping("rp_height") = "Height"
	klerKsorFieldMapping("rp_weight") = "Weight"
	Call ProcessKlerNumericFields(klerKsorDocument, reportingPersonDocument, rpNumber, klerKsorFieldMapping)
	
	' Handle Person Descriptors fields.
	Set klerKsorField = klerKsorDocument.GetFirstItem("rp_ethnicity" & rpNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) <> "" Then
			reportingPersonDocument.Ethnicity = klerKsorField.Values(0)
			hasPersonDescriptors = True
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("rp_hair" & rpNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) <> "" Then
			reportingPersonDocument.HairColour = klerKsorField.Values(0)
			hasPersonDescriptors = True
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("rp_eyes" & rpNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) <> "" Then
			reportingPersonDocument.EyeColour = klerKsorField.Values(0)
			hasPersonDescriptors = True
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("rp_residency" & rpNumber)
	If Not klerKsorField Is Nothing Then		
		If klerKsorField.Values(0) = "R" Then
			reportingPersonDocument.ResidentIndicator = "Resident"
			hasPersonDescriptors = True
		Elseif klerKsorField.Values(0) = "N" Then
			reportingPersonDocument.ResidentIndicator = "Non-Resident"
			hasPersonDescriptors = True
		End If
	End If
	
	' Add Person Descriptors subform if needed.
	If hasPersonDescriptors Then
		reportingPersonDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Person Descriptors" & ";" & Implode(reportingPersonDocument.LoadedSubForms,";"),";")))
	End If	
	
	' Involvement Type
	Set klerKsorField = klerKsorDocument.GetFirstItem("rp_circle" & rpNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "Y" Then
			reportingPersonDocument.TypeList = Fulltrim(Arrayunique(Split("Reporting Person" & ";" & Implode(reportingPersonDocument.Type,";"),";")))
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("dc_circle" & rpNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "Y" Then
			reportingPersonDocument.TypeList = Fulltrim(Arrayunique(Split("Discovered Crime" & ";" & Implode(reportingPersonDocument.Type,";"),";")))
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("w_circle" & rpNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "Y" Then
			reportingPersonDocument.TypeList = Fulltrim(Arrayunique(Split("Witness" & ";" & Implode(reportingPersonDocument.Type,";"),";")))
		End If
	End If
	Set klerKsorField = klerKsorDocument.GetFirstItem("o_circle" & rpNumber)
	If Not klerKsorField Is Nothing Then
		If klerKsorField.Values(0) = "Y" Then
			reportingPersonDocument.TypeList = Fulltrim(Arrayunique(Split("Other" & ";" & Implode(reportingPersonDocument.Type,";"),";")))
		End If
	End If	
	
	' Reporting Person involvement type.	
	reportingPersonDocument.TypeList = Fulltrim(Arrayunique(Split("Reporting Person" & ";" & Implode(reportingPersonDocument.TypeList,";"),";")))
	
	' Save Reporting Person document.
	Call SetUpRmsDocument(reportingPersonDocument)
	Call reportingPersonDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKsarRecord:1:8
Sub ProcessKlerKsarRecord(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim klerKsarField As NotesItem
	
	Dim i As Integer
	
	' Arrestee
	Call ProcessKlerKsarArrestee(klerKsarDocument, occurrenceDocument)
	
	' KIBRS Incident Clearances
	For i = 1 To 3
		Call ProcessKlerKsarClearance(klerKsarDocument, occurrenceDocument, Cstr(i))
	Next
	
	' Vehicle
	Call ProcessKlerKsarVehicle(klerKsarDocument, occurrenceDocument)
	
	' Narrative / Affidavit
	Call ProcessKlerKsarNarrative(klerKsarDocument, occurrenceDocument)
	
	' Other
	Call ProcessKlerKsarOther(klerKsarDocument, occurrenceDocument)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:SanitizeValue:1:8
Function SanitizeValue(targetValue As String)
	
	SanitizeValue = targetValue
	SanitizeValue = Replace(SanitizeValue, "&", "&amp;")
	SanitizeValue = Replace(SanitizeValue, "<", "&lt;")
	SanitizeValue = Replace(SanitizeValue, ">", "&gt;")
	SanitizeValue = Replace(SanitizeValue, {"}, "&quot;")
	SanitizeValue = Replace(SanitizeValue, {'}, "&apos;")
	
End Function

'++LotusScript Development Environment:2:2:ProcessKlerNumericFields:2:8
Sub ProcessKlerNumericFields(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerFieldNumber As String, _
klerKsorFieldMapping List As String)
	
	On Error Goto ErrorHandle
	
	Dim klerField As NotesItem
	Dim rmsField As NotesItem
	
	Forall rmsFieldName In klerKsorFieldMapping
		
		Set klerField = klerDocument.GetFirstItem(Listtag(rmsFieldName) & klerFieldNumber)
		If Not klerField Is Nothing Then
			Set rmsField = rmsDocument.GetFirstItem(rmsFieldName)
			If rmsField Is Nothing then
				Set rmsField = New NotesItem(rmsDocument, rmsFieldName, "")
				rmsField.IsSummary = True
			End If
			If IsNumeric(klerField.Values(0)) Then
				rmsField.Values = Clng(klerField.Values(0))
			End If
		End If
		
	End Forall
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:AttachKlerFileToOccurrenceOLD:1:8
Sub AttachKlerFileToOccurrenceOLD(klerFilePath As String)
	
	On Error Goto ErrorHandle
	
	Dim currentWorkspace As NotesUIWorkspace
	
	Dim isEditMode As Boolean
	Dim currentField As String
	
	Dim klerAttachmentRichTextItem As NotesRichTextItem
	
	Dim occurrenceUIDocument As NotesUIDocument
	Dim occurrenceDocument As NotesDocument	
	Dim occurrenceDocumentUnid As String
	
	' Get handle to current workspace.
	Set currentWorkspace = New NotesUIWorkspace
	
	' Get information about state of UI.
	Set occurrenceUIDocument = currentWorkspace.CurrentDocument
	isEditMode = occurrenceUIDocument.EditMode
	currentField = occurrenceUIDocument.CurrentField
	
	' Get handle to Occurrence Document.
	Set occurrenceDocument = occurrenceUIDocument.Document
	
	'Attach KLER file
	If occurrenceDocument.HasItem("KlerAttachment") Then
		Set klerAttachmentRichTextItem = occurrenceDocument.GetFirstItem("KlerAttachment")
		If occurrenceDocument.HasEmbedded Then
			Forall o In klerAttachmentRichTextItem.EmbeddedObjects
				If o.Type = EMBED_ATTACHMENT Then
					Call o.Remove
				End If
			End Forall
		End If
	End If
	Set klerAttachmentRichTextItem = occurrenceDocument.GetFirstItem("KlerAttachment")
	Call klerAttachmentRichTextItem.EmbedObject(EMBED_ATTACHMENT, "", klerFilePath)
	
	' Set Import Date
	Call occurrencedocument.ReplaceItemValue("KlerImportDate", Cdat(Today()))	
	
	' Store document UNID.
	occurrenceDocumentUnid = occurrenceDocument.UniversalID
	
	' Close and reopen document to make RT field refresh and show attachment.
	Call occurrenceDocument.Save(False, False)
	Call occurrenceUIDocument.Close(True)
	Set occurrenceDocument = currentWorkspace.CurrentDatabase.Database.GetDocumentByUNID(occurrenceDocumentUnid)
	If isEditMode Then
		
		Call currentWorkspace.EditDocument(True, occurrenceDocument, False)
		currentWorkspace.CurrentDocument.GotoField(currentField)
		Call currentWorkspace.CurrentDocument.FieldSetText("Form", currentWorkspace.CurrentDocument.FieldGetText("Form"))
		
	Else
		
		Call currentWorkspace.EditDocument(False, occurrenceDocument, False)
		
	End If
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub


'++LotusScript Development Environment:2:2:ProcessKlerKdot850BDriver:2:8
Sub ProcessKlerKdot850BDriver(klerKdot850BDocument As NotesDocument, occurrenceDocument As NotesDOcument, _
	driverNumber As String, emsList List As KdotEmsUnit)
	
	On Error Goto ErrorHandle
	
	Dim klerKdot850BFieldMapping List As String
	Dim klerKdot850BField As NotesItem
	Dim klerKdot850BDriverField As NotesItem
	Dim klerKdot850BOwnerField As NotesItem
	Dim unitNumber As String
	
	Dim driverDocument As NotesDocument
	Dim ownerDocument As NotesDocument
	Dim targetDocument As NotesDocument
	Dim vehicleDocument As NotesDocument
	
	Dim hasDriver As Boolean
	Dim hasOwner As Boolean
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	Dim responseCollection As NotesDocumentCollection
	Dim responseDocument As NotesDocument	
	
	Dim commercialEndorsements(1 To 4) As String
	Dim specialConditions(1 To 5) As String
	
	Dim emsUnit As KdotEmsUnit
	
	Dim i As Integer
	
	Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("traf_unit_nbr" & CStr(6+Cint(driverNumber)))
	If Not klerKdot850BField Is Nothing Then
		unitNumber = KlerKdot850BField.Values(0)
	End If
	If Trim(unitNumber) = "" Then
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("traf_unit_nbr" & CStr(12+Cint(driverNumber)))
		If Not klerKdot850BField Is Nothing Then
			unitNumber = KlerKdot850BField.Values(0)
		End If
	End If
	
	' Exit if there is no data entered on the form with this number.
	Set KlerKdot850BField = klerKdot850BDocument.GetFirstItem("person_share" & driverNumber)
	If Not klerKdot850BField Is Nothing Then		
		If klerKdot850BField.Values(0) <> "" Then			
			hasDriver = True
		End If
	End If
	
	Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("person_share" & Cstr(8+Cint(driverNumber)))
	If Not KlerKdot850BField Is Nothing Then
		If KlerKdot850BField.Values(0) <> "" Then
			hasOwner = True
		ElseIf Not hasDriver Then
			Exit Sub					
		End If
	ElseIf Not hasDriver Then
		Exit Sub
	End If
	
	' Find existing Driver document.
	Set klerKdot850BDriverField = klerKdot850BDocument.GetFirstItem("person_share" & driverNumber)
	Set klerKdot850BOwnerField = klerKdot850BDocument.GetFirstItem("person_share" & CStr(8+Cint(driverNumber)))		
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKdot850BDocument.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing		
		If rmsDocument.Form(0) = "Person/Property" _
		And Not rmsDocument.IsDeleted Then
			If Not klerKdot850BDriverField Is Nothing then
				If rmsDocument.KLERRecordID(0) = klerKdot850BDriverField.Values(0) Then
					Set driverDocument = rmsDocument
				End If
			End If
			If Not klerKdot850BOwnerField Is Nothing Then
				If rmsDocument.KLERRecordID(0) = klerKdot850BOwnerField.Values(0) Then				
					Set ownerDocument = rmsDocument
				End If				
			End If
			Set responseCollection = rmsDocument.Responses
			Set responseDocument = responseCollection.GetFirstDocument
			While Not responseDocument Is Nothing
				If responseDocument.HasItem("KLERKDOT_Unit") _
				And Not responseDocument.IsDeleted Then
					If responseDocument.KLERKDOT_Unit(0) <> "" Then
						If IsNumeric(responseDocument.KLERKDOT_Unit(0)) _
						And IsNumeric(unitNumber) Then
							If CInt(responseDocument.KLERKDOT_Unit(0)) = CInt(unitNumber) Then
								Set vehicleDocument = responseDocument
							End If
						Else
							If responseDocument.KLERKDOT_Unit(0) = unitNumber Then
								Set vehicleDocument = responseDocument
							End If
						End If
					End If
				End If
				Set responseDocument = responseCollection.GetNextDocument(responseDocument)
			Wend
			
		End If
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	If driverDocument Is Nothing _
	And ownerDocument Is Nothing Then
		Exit Sub
	ElseIf Not driverDocument Is Nothing Then
		Set targetDocument = driverDocument
	Else
		Set targetDocument = ownerDocument
	End If
	
	' Set Involvement Type
	Dim startArray As Variant
	Dim typeArray() As String
	Dim typeCount As Integer
	If InArray(targetDocument.TypeList, "Driver") Then
		ForAll typeEntry In targetDocument.TypeList
			If typeEntry <> "Driver" Then
				typeCount = typeCount + 1
				ReDim Preserve typeArray(1 To typeCount)
				typeArray(typeCount) = typeEntry
			End If
		End ForAll
		targetDocument.TypeList = typeArray
	End If
	If Not driverDocument Is Nothing Then
		If IsNumeric(unitNumber) Then
			If unitNumber <= 4 Then
				targetDocument.TypeList = FullTrim(ArrayUnique(Split("Driver #" & CInt(unitNumber) & ";" & Implode(targetDocument.TypeList,";"),";")))	
			Else
				targetDocument.TypeOther = FullTrim(ArrayUnique(Split("Driver #" & CInt(unitNumber) & ";" & Implode(targetDocument.TypeList,";"),";")))
			End If
		Else
			targetDocument.TypeOther = FullTrim(ArrayUnique(Split("Driver;" & Implode(targetDocument.TypeList,";"),";")))
		End If
	ElseIf Not ownerDocument Is Nothing Then
		targetDocument.TypeList = FullTrim(ArrayUnique(Split("Owner;" & Implode(targetDocument.TypeList,";"),";")))
	End If
	
	' Set KDOT Role
	If Not driverDocument Is Nothing Then
		targetDocument.KDOT_Role = "Driver"
	ElseIf Not ownerDocument Is Nothing Then
		targetDocument.KDOT_Role = "Owner"
	End If
	
	' Driver fields
	klerKdot850BFieldMapping("occup_seat_type") = "KDOT_SeatType"	
	klerKdot850BFieldMapping("occup_safety_equip") = "KDOT_SafetyEquip"
	klerKdot850BFieldMapping("occup_ejected") = "KDOT_EjectTrap"
	klerKdot850BFieldMapping("occup_injury_severity") = "KDOT_InjurySeverity"
	klerKdot850BFieldMapping("occup_eject_path") = "KDOT_EjectPath"	
	klerKdot850BFieldMapping("occup_extricated_flag") = "KDOT_Extrication"
	klerKdot850BFieldMapping("cdl_driver") = "KDOT_DrivingForEmployer"
	klerKdot850BFieldMapping("dri_lic_comply") = "KDOT_DrLicComply"
	klerKdot850BFieldMapping("restrict_01_code") = "KDOT_Restrict1"
	klerKdot850BFieldMapping("restrict_02_code") = "KDOT_Restrict2"
	klerKdot850BFieldMapping("restrict_03_code") = "KDOT_Restrict3"
	klerKdot850BFieldMapping("restrict_04_code") = "KDOT_Restrict4"
	klerKdot850BFieldMapping("restrict_01_complied_flag") = "KDOT_RestrictComply1"
	klerKdot850BFieldMapping("restrict_02_complied_flag") = "KDOT_RestrictComply2"
	klerKdot850BFieldMapping("restrict_03_complied_flag") = "KDOT_RestrictComply3"
	klerKdot850BFieldMapping("restrict_04_complied_flag") = "KDOT_RestrictComply4"
	klerKdot850BFieldMapping("dri_evid_breath_result") = "KDOT_BAC1"
	klerKdot850BFieldMapping("dri_eye_result") = "KDOT_BAC2"
	klerKdot850BFieldMapping("dri_bac_result") = "KDOT_BAC3"
	klerKdot850BFieldMapping("dri_other_result") = "KDOT_BAC4"
	klerKdot850BFieldMapping("dri_drug_screen") = "KDOT_DrugScreen"
	Call ProcessKlerFields(klerKdot850BDocument, targetDocument, driverNumber, klerKdot850BFieldMapping)
	
	Call targetDocument.RemoveItem("CommercialDL")
	Call ProcessKlerCheckbox(klerKdot850BDocument, targetDocument, driverNumber, "cdl_lic_flag", "CommercialDL", "Commercial DL")
	
	' Commercial Endorsements
	For i = 1 To 4
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("endorse_0" & Cstr(i) & "_code" & driverNumber)
		If Not klerKdot850BField Is Nothing Then
			commercialEndorsements(i) = klerKdot850BField.Values(0)
		End If
	Next
	targetDocument.KDOT_CommercialEndorsements = Fulltrim(commercialEndorsements)
	
	' Substance Use
	Call targetDocument.RemoveItem("KDOT_SubstanceUse")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "substance_use_ap", "KDOT_SubstanceUse", "AP")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "substance_use_ac", "KDOT_SubstanceUse", "AC")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "substance_use_dp", "KDOT_SubstanceUse", "DP")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "substance_use_dc", "KDOT_SubstanceUse", "DC")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "substance_use_mp", "KDOT_SubstanceUse", "MP")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "substance_use_mc", "KDOT_SubstanceUse", "MC")
	
	' Method of Determination (Alcohol / Drugs)
	Call targetDocument.RemoveItem("KDOT_MODAlcohol")
	Call targetDocument.RemoveItem("KDOT_MODDrugs")
	For i = 0 To 6
		
		Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "determin_0" & Cstr(i) & "_alcohol", _
		"KDOT_MODAlcohol", "0" & Cstr(i))
		
		' 2 and 4 do not apply to drugs.
		If i <> 2 And i <> 4 Then
			Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "determin_0" & Cstr(i) & "_drugs", _
			"KDOT_MODDrugs", "0" & Cstr(i))
		End If
		
	Next
	
	' Impairment Test
	Call targetDocument.RemoveItem("KDOT_Impairment")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "impairment_test_ng", "KDOT_Impairment", "NG")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "impairment_test_tr", "KDOT_Impairment", "TR")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "impairment_test_pt", "KDOT_Impairment", "PT")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "impairment_test_tg", "KDOT_Impairment", "TG")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "impairment_test_rp", "KDOT_Impairment", "RP")
	
	' EMS Unit
	For i = 1 To 2
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("occup_trans_unit" & Cstr(16+i))
		If Not klerKdot850BField Is Nothing Then
			Set emsUnit = emsList(klerKdot850BField.Values(0))
			If Not emsUnit Is Nothing Then
				Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("occup_trans_unit" & driverNumber)
				If Not klerKdot850BField Is Nothing Then
					If emsUnit.transportUnit = klerKdot850BField.Values(0) Then
						targetDocument.KDOT_EMSUnit = emsUnit.takenBy
						targetDocument.KDOT_TakenTo = emsUnit.takenTo
						If Isdate(emsUnit.notified) Then
							targetDocument.KDOT_EMSNotified = Cdat(emsUnit.notified)
						End If
						If Isdate(emsUnit.arrived) Then
							targetDocument.KDOT_EMSArrived = Cdat(emsUnit.arrived)
						End If
						If Isdate(emsUnit.hospital) Then
							targetDocument.KDOT_EMSHospital = Cdat(emsUnit.hospital)
						End If
					End If
				End If
			End If
		End If
	Next
	
	' Vehicle fields
	Erase klerKdot850BFieldMapping
	klerKdot850BFieldMapping("veh_dir_of_travel") = "KDOT_Direction"
	klerKdot850BFieldMapping("veh_fire_code") = "KDOT_Fire"
	klerKdot850BFieldMapping("veh_body_type") = "KDOT_BodyType"
	klerKdot850BFieldMapping("veh_body_type_other") = "KDOT_BodyOther"
	klerKdot850BFieldMapping("veh_calculate_speed") = "KDOT_ImpactSpeed"
	klerKdot850BFieldMapping("veh_bus_cap") = "KDOT_BusCapacity"
	klerKdot850BFieldMapping("veh_power_source") = "KDOT_PowerSource"
	klerKdot850BFieldMapping("veh_use") = "KDOT_VehicleUse"	
	klerKdot850BFieldMapping("veh_damage") = "KDOT_VehicleDamage"
	klerKdot850BFieldMapping("veh_damage_other") = "KDOT_DamageOther"
	klerKdot850BFieldMapping("veh_initial_impact") = "KDOT_FirstImpact"
	klerKdot850BFieldMapping("veh_principal_impact") = "KDOT_MajorImpact"
	klerKdot850BFieldMapping("damage_area_other") = "KDOT_DamageDetailOther"
	klerKdot850BFieldMapping("veh_maneuver_before") = "KDOT_Maneuver"
	klerKdot850BFieldMapping("veh_maneuver_other") = "KDOT_ManeuverOther"
	klerKdot850BFieldMapping("event_seq_01_code") = "KDOT_Events1"
	klerKdot850BFieldMapping("event_seq_02_code") = "KDOT_Events2"
	klerKdot850BFieldMapping("event_seq_03_code") = "KDOT_Events3"
	klerKdot850BFieldMapping("event_seq_04_code") = "KDOT_Events4"
	klerKdot850BFieldMapping("veh_event_seq_unk") = "KDOT_EventsExact"
	klerKdot850BFieldMapping("event_seq_other") = "KDOT_EventsOther"
	klerKdot850BFieldMapping("event_seq_other_obj") = "KDOT_EventsOtherObject"
	Call ProcessKlerFields(klerKdot850BDocument, targetDocument, driverNumber, klerKdot850BFieldMapping)
	
	' Numeric fields
	Erase klerKdot850BFieldMapping
	klerKdot850BFieldMapping("veh_total_occups") = "KDOT_Occupants"
	Call ProcessKlerNumericFields(klerKdot850BDocument, targetDocument, driverNumber, klerKdot850BFieldMapping)
	
	' Trailer
	Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("veh_trailer_present" & driverNumber)
	If Not klerKdot850BField Is Nothing Then
		If klerKdot850BField.Values(0) = "D" Then
			targetDocument.KDOT_DamageTrailer = "Damaged"
		Elseif klerKdot850BField.Values(0) = "P" Then
			targetDocument.KDOT_DamageTrailer = "Present"
		End If
	End If
	
	' Special Conditions for Traffic Units
	For i = 1 To 5
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("spec_cond_0" & Cstr(i) & "_code" & driverNumber)
		If Not klerKdot850BField Is Nothing Then
			specialConditions(i) = klerKdot850BField.Values(0)
		End If
	Next
	targetDocument.KDOT_SpecCond = Fulltrim(specialConditions)
	
	' Damage Location Area
	Call targetDocument.RemoveItem("KDOT_DamageLoc")
	For i = 1 To 17		
		If i = 6 Or i = 12 Then			
			Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, _
			"damage_area_" & Right("00" & Cstr(i), 2) & "a" & "_code", "KDOT_DamageLoc", Cstr(i) & "A")
			
			Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, _
			"damage_area_" & Right("00" & Cstr(i), 2) & "b" & "_code", "KDOT_DamageLoc", Cstr(i) & "B")
			
			Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, _
			"damage_area_" & Right("00" & Cstr(i), 2) & "c" & "_code", "KDOT_DamageLoc", Cstr(i) & "C")
		Elseif i = 3 Or i = 9 Then			
			Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, _
			"damage_area_" & Right("00" & Cstr(i), 2) & "a" & "_code", "KDOT_DamageLoc", Cstr(i) & "A")
			
			Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, _
			"damage_area_" & Right("00" & Cstr(i), 2) & "b" & "_code", "KDOT_DamageLoc", Cstr(i) & "B")
		Elseif i >= 14 Then
			Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, _
			"damage_area_" & Right("00" & Cstr(i), 2) & "_code", "KDOT_DamageDetail", Cstr(i))
		Else
			Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, _
			"damage_area_" & Right("00" & Cstr(i), 2) & "_code", "KDOT_DamageLoc", Cstr(i))
		End If
	Next
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "damage_area_88_code", "KDOT_DamageDetail", "88")
	Call ProcessKlerCheckboxMulti(klerKdot850BDocument, targetDocument, driverNumber, "damage_area_99_code", "KDOT_DamageDetail", "99")
	
	' Add "KDOT Accident - Person 2009" subform if needed.
	targetDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Accident - Person 2009" & ";" & Implode(targetDocument.LoadedSubForms,";"),";")))
	
	' Save Driver document.
	Call SetUpRmsDocument(targetDocument)
	Call targetDocument.Save(False, False)
	
	' Owner information
	Dim ownerName As String
	Dim ownerAddress As String
	If Not ownerDocument Is Nothing _
	And Not vehicleDocument Is Nothing Then
		
		Erase klerKdot850BFieldMapping		
		klerKdot850BFieldMapping("owner_phone") = "RO_Phone"
		klerKdot850BFieldMapping("owner_work_phone") = "RO_BusPhone"
		klerKdot850BFieldMapping("owner_city") = "RO_TownCity"
		klerKdot850BFieldMapping("owner_state") = "RO_Prov"
		klerKdot850BFieldMapping("owner_zip") = "RO_PostalCode"	
		klerKdot850BFieldMapping("owner_street_num") = "RO_StreetNumber"
		Call ProcessKlerFields(klerKdot850BDocument, vehicleDocument, driverNumber, klerKdot850BFieldMapping)
		
		' Name
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("owner_lname" & driverNumber)
		If Not klerKdot850BField Is Nothing Then
			If klerKdot850BField.Values(0) <> "" Then
				ownerName = klerKdot850BField.Values(0)
			End If
		End If
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("owner_fname" & driverNumber)
		If Not klerKdot850BField Is Nothing Then
			If klerKdot850BField.Values(0) <> "" Then
				ownerName = ownerName & ", " & klerKdot850BField.Values(0)
			End If
		End If
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("owner_mid_name" & driverNumber)
		If Not klerKdot850BField Is Nothing Then
			If klerKdot850BField.Values(0) <> "" Then
				ownerName = ownerName & " " &klerKdot850BField.Values(0)
			End If
		End If
		vehicleDocument.RO_Name = ownerName
		
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("owner_street_pre_dir" & driverNumber)
		If Not klerKdot850BField Is Nothing Then
			If klerKdot850BField.Values(0) <> "" Then
				ownerAddress = klerKdot850BField.Values(0)
			End If
		End If
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("owner_street_name" & driverNumber)
		If Not klerKdot850BField Is Nothing Then
			If klerKdot850BField.Values(0) <> "" Then
				ownerAddress = ownerAddress & " " & klerKdot850BField.Values(0)
			End If
		End If
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("owner_street_category" & driverNumber)
		If Not klerKdot850BField Is Nothing Then
			If klerKdot850BField.Values(0) <> "" Then
				ownerAddress = ownerAddress & " " & klerKdot850BField.Values(0)
			End If
		End If
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("owner_street_occ_code" & driverNumber)
		If Not klerKdot850BField Is Nothing Then
			If klerKdot850BField.Values(0) <> "" Then
				ownerAddress = ownerAddress & " " & klerKdot850BField.Values(0)
			End If
		End If
		Set klerKdot850BField = klerKdot850BDocument.GetFirstItem("owner_street_occ_num" & driverNumber)
		If Not klerKdot850BField Is Nothing Then
			If klerKdot850BField.Values(0) <> "" Then
				ownerAddress = ownerAddress & " " & klerKdot850BField.Values(0)
			End If
		End If
		vehicleDocument.RO_Address = ownerAddress
		
		Call vehicleDocument.Save(False, False)
		
	End If
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:FormatSSN:1:8
Function FormatSSN(unformattedSSN As String)
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim controlView As NotesView
	Dim controlDocument As NotesDocument
	
	Dim formattedSSN As String
	
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	Set controlView = currentDatabase.GetView("(Control)")
	If Not controlView Is Nothing Then
		Set controlDocument = controlView.GetFirstDocument
	End If
	
	If Not controlDocument Is Nothing Then
		
		If controlDocument.HasItem("KLER_SSNType") Then
			
			formattedSSN = Replace(unformattedSSN, "-", "")
			
			If Len(formattedSSN) <> 9 Then
				
				FormatSSN = unformattedSSN
				
			Elseif controlDocument.KLER_SSNType(0) = "D" Then ' Dashes
				
				FormatSSN = Left(formattedSSN, 3) & "-" & Mid(formattedSSN, 4, 2) & "-" & Right(formattedSSN, 4)
				
			Elseif controlDocument.KLER_SSNType(0) = "N" Then ' Nothing
				
				FormatSSN = formattedSSN
				
			Else
				
				FormatSSN = unformattedSSN
				
			End If
			
		Else
			
			FormatSSN = unformattedSSN
			
		End If
		
	Else
		
		FormatSSN = unformattedSSN
		
	End If
	
End Function

'++LotusScript Development Environment:2:2:ProcessKlerKdot854Pedestrian:2:8
Sub ProcessKlerKdot854Pedestrian(klerKdot854Document As NotesDocument, occurrenceDocument As NotesDocument, _
pedestrianNumber As String, emsList List As KdotEmsUnit)
	
	On Error Goto ErrorHandle
	
	Dim klerKdot854FieldMapping List As String
	Dim klerKdot854Field As NotesItem
	
	Dim pedestrianDocument As NotesDocument
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument	
	
	Dim emsUnit As KdotEmsUnit
	
	Dim i As Integer
	
	' Exit if there is no data entered on the form with this number.
	Set klerKdot854Field = klerKdot854Document.GetFirstItem("person_share" & Cstr(16+Cint(pedestrianNumber)))
	If Not klerKdot854Field Is Nothing Then
		If klerKdot854Field.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Find existing Driver document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKdot854Document.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Person/Property" _
		And Not rmsDocument.IsDeleted Then
			Set klerKdot854Field = klerKdot854Document.GetFirstItem("person_share" & Cstr(16+Cint(pedestrianNumber)))
			If rmsDocument.KLERRecordID(0) = klerKdot854Field.Values(0) Then
				Set pedestrianDocument = rmsDocument
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	If pedestrianDocument Is Nothing Then
		Exit Sub
	End If
	
	' Set Involvement Type
	pedestrianDocument.TypeList = Fulltrim(Arrayunique(Split("Pedestrian" & ";" & Implode(pedestrianDocument.TypeList,";"),";")))
	pedestrianDocument.Type = pedestrianDocument.TypeList
	
	' Pedestrian fields
	klerKdot854FieldMapping("ped_seat_type") = "KDOT_SeatType"
	klerKdot854FieldMapping("ped_safety_equip") = "KDOT_SafetyEquip"
	klerKdot854FieldMapping("ped_ejected") = "KDOT_EjectTrap"
	klerKdot854FieldMapping("ped_injury_severity") = "KDOT_InjurySeverity"
	klerKdot854FieldMapping("ped_eject_path") = "KDOT_EjectPath"	
	klerKdot854FieldMapping("ped_extricated_flag") = "KDOT_Extrication"
	klerKdot854FieldMapping("ped_dir_of_travel") = "KDOT_PedDirTrvl"
	klerKdot854FieldMapping("ped_lic_st") = "DLIssuedBy"
	klerKdot854FieldMapping("ped_license") = "DLNumber"
	klerKdot854FieldMapping("ped_location") = "KDOT_PedLocation"
	klerKdot854FieldMapping("ped_location_other") = "KDOT_PedLocationOther"
	klerKdot854FieldMapping("ped_other_loc") = "KDOT_OtherPedLocation"
	klerKdot854FieldMapping("ped_other_loc_other") = "KDOT_OtherPedLocationOther"
	klerKdot854FieldMapping("ped_action") = "KDOT_PedAction"
	klerKdot854FieldMapping("ped_action_other") = "KDOT_PedActionOther"
	klerKdot854FieldMapping("ped_signal_obey") = "KDOT_PedObedience"
	klerKdot854FieldMapping("ped_evid_breath_result") = "KDOT_BAC1"
	klerKdot854FieldMapping("ped_eye_result") = "KDOT_BAC2"
	klerKdot854FieldMapping("ped_bac_result") = "KDOT_BAC3"
	klerKdot854FieldMapping("ped_other_result") = "KDOT_BAC4"
	klerKdot854FieldMapping("ped_drug_screen") = "KDOT_DrugScreen"
	Call ProcessKlerFields(klerKdot854Document, pedestrianDocument, pedestrianNumber, klerKdot854FieldMapping)
	
	' EMS Unit
	For i = 1 To 2
		Set klerKdot854Field = klerKdot854Document.GetFirstItem("occup_trans_unit" & Cstr(16+i))
		If Not klerKdot854Field Is Nothing Then
			Set emsUnit = emsList(klerKdot854Field.Values(0))
			If Not emsUnit Is Nothing Then
				Set klerKdot854Field = klerKdot854Document.GetFirstItem("occup_trans_unit" & pedestrianNumber)
				If Not klerKdot854Field Is Nothing Then
					If emsUnit.transportUnit = klerKdot854Field.Values(0) Then
						pedestrianDocument.KDOT_EMSUnit = emsUnit.takenBy
						pedestrianDocument.KDOT_TakenTo = emsUnit.takenTo
						If Isdate(emsUnit.notified) Then
							pedestrianDocument.KDOT_EMSNotified = Cdat(emsUnit.notified)
						End If
						If Isdate(emsUnit.arrived) Then
							pedestrianDocument.KDOT_EMSArrived = Cdat(emsUnit.arrived)
						End If
						If Isdate(emsUnit.hospital) Then
							pedestrianDocument.KDOT_EMSHospital = Cdat(emsUnit.hospital)
						End If
					End If
				End If
			End If
		End If
	Next
	
	' Substance Use
	Call pedestrianDocument.RemoveItem("KDOT_SubstanceUse")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "substance_use_ap", "KDOT_SubstanceUse", "AP")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "substance_use_ac", "KDOT_SubstanceUse", "AC")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "substance_use_dp", "KDOT_SubstanceUse", "DP")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "substance_use_dc", "KDOT_SubstanceUse", "DC")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "substance_use_mp", "KDOT_SubstanceUse", "MP")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "substance_use_mc", "KDOT_SubstanceUse", "MC")
	
	' Method of Determination (Alcohol / Drugs)
	Call pedestrianDocument.RemoveItem("KDOT_MODAlcohol")
	Call pedestrianDocument.RemoveItem("KDOT_MODDrugs")
	For i = 0 To 6
		
		Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "determin_0" & Cstr(i) & "_alcohol", _
		"KDOT_MODAlcohol", "0" & Cstr(i))
		
		' 2 and 4 do not apply to drugs.
		If i <> 2 And i <> 4 Then
			Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "determin_0" & Cstr(i) & "_drugs", _
			"KDOT_MODDrugs", "0" & Cstr(i))
		End If
		
	Next
	
	' Impairment Test
	Call pedestrianDocument.RemoveItem("KDOT_Impairment")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "impairment_test_ng", "KDOT_Impairment", "NG")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "impairment_test_tr", "KDOT_Impairment", "TR")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "impairment_test_pt", "KDOT_Impairment", "PT")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "impairment_test_tg", "KDOT_Impairment", "TG")
	Call ProcessKlerCheckboxMulti(klerKdot854Document, pedestrianDocument, pedestrianNumber, "impairment_test_rp", "KDOT_Impairment", "RP")
	
	' Add "KDOT Accident - Person 2009" subform if needed.
	pedestrianDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Accident - Person 2009" & ";" & Implode(pedestrianDocument.LoadedSubForms,";"),";")))
	
	' Save Pedestrian document.
	Call pedestrianDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerKsprRecord:5:8
%REM
	Sub ProcessKSPRRecord
	Description: Comments for Sub
%END REM
Sub ProcessKlerKsprRecord(klerKsprDocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	Dim i As Integer
	For i = 1 To 15
		Call ProcessKlerKsprProperty(klerKsprDocument, occurrenceDocument, CStr(i))
	Next
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerCheckboxMulti:2:8
Sub ProcessKlerCheckboxMulti(klerDocument As NotesDocument, rmsDocument As NotesDocument, klerFieldNumber As String, _
klerFieldName As String, rmsFieldName As String, rmsFieldValue As String)	
	
	On Error Goto ErrorHandle
	
	Dim klerField As NotesItem
	Dim rmsField As NotesItem
	Dim rmsFieldValues As Variant
	
	Set klerField = klerDocument.GetFirstItem(klerFieldName & klerFieldNumber)
	If Not klerField Is Nothing Then
		If klerField.Values(0) = "Y" Then
			
			Set rmsField = rmsDocument.GetFirstItem(rmsFieldName)
			If Not rmsField Is Nothing Then
				rmsFieldValues = rmsField.Values
				Redim Preserve rmsFieldValues(0 To Ubound(rmsFieldValues)+1)
				rmsFieldValues(Ubound(rmsFieldValues)) = rmsFieldValue
				rmsField.Values = rmsFieldValues
			Else
				Set rmsField = New NotesItem(rmsDocument, rmsFieldName, rmsFieldValue)
				rmsField.IsSummary = True
			End If
			
		End If
	End If
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerHp250Record:1:8
Sub ProcessKlerHp250Record(klerHp250Document As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim i As Integer
	Dim klerHp250Field As NotesItem
	Dim kibrsBriefField As NotesItem
	
	For i = 1 To 16
		
		Call ProcessKlerHp250Property(klerHp250Document, occurrenceDocument, Cstr(i))
		
	Next
	
	' Changes to Occurrence document.	
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	Dim suppDocument As NotesDocument
	Dim suppRichTextItem As NotesRichTextItem
	
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh	
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerHp250Document.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Supplementary" _
		And Not rmsDocument.IsDeleted Then	
			If rmsDocument.HasItem("KLERGUID") Then
				If rmsDocument.KLERGUID(0) = klerHp250Document.GuidVal(0) & "BriefCaseSynopsis" Then
					Set suppDocument = rmsDocument
				End If
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
	If suppDocument Is Nothing Then
		Set suppDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		suppDocument.Form = "Supplementary"
		suppDocument.SpecificSubject = "Evidence Custody Receipt"
		suppDocument.Subject = "Evidence Custody Receipt  - Brief Case Synopsis"
		suppDocument.KLERCaseID = klerHp250Document.CaseID(0)
		suppDocument.KLERGUID = klerHp250Document.GuidVal(0) & "BriefCaseSynopsis"
		Call suppDocument.MakeResponse(occurrenceDocument)		
	End If	
	
	Set klerHp250Field = klerHp250Document.GetFirstItem("brief_case_synops")
	If Not klerHp250Field Is Nothing Then
		If klerHp250Field.Values(0) <> "" Then
			Call suppDocument.RemoveItem("SupplementaryInfo")
			Set suppRichTextItem = New NotesRichTextItem(suppDocument, "SupplementaryInfo")
			Call suppRichTextItem.AppendText(klerHp250Field.Values(0))			
			Call SetUpRmsDocument(suppDocument)
			Call suppDocument.Save(False, False)
		End If
	End If
	
	Call occurrenceDocument.RemoveItem("KIBRS_EvidenceCustodySynopsisYN")
	Call ProcessKlerCheckbox(klerHp250Document, occurrenceDocument, "", "synopsis_no_cbox", "KIBRS_EvidenceCustodySynopsisYN", "N")
	Call ProcessKlerCheckbox(klerHp250Document, occurrenceDocument, "", "synopsis_yes_cbox", "KIBRS_EvidenceCustodySynopsisYN", "Y")
	
	Call occurrenceDocument.RemoveItem("KIBRS_EvidenceCustodyHazardYN")
	Call ProcessKlerCheckbox(klerHp250Document, occurrenceDocument, "", "hazard_no_cbox", "KIBRS_EvidenceCustodyHazardYN", "N")
	Call ProcessKlerCheckbox(klerHp250Document, occurrenceDocument, "", "hazard_yes_cbox", "KIBRS_EvidenceCustodyHazardYN", "Y")
	
	Call occurrenceDocument.RemoveItem("KIBRS_EvidenceCustodyPreviousYN")
	Call ProcessKlerCheckbox(klerHp250Document, occurrenceDocument, "", "prev_evid_no_cbox", "KIBRS_EvidenceCustodyPreviousYN", "N")
	Call ProcessKlerCheckbox(klerHp250Document, occurrenceDocument, "", "prev_evid_yes_cbox", "KIBRS_EvidenceCustodyPreviousYN", "Y")

	' Save Occurrence document.
	Call occurrenceDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:GetMatchingPropertyItem:5:8
%REM
	Function GetMatchingPropertyItem
	Description: Comments for Function
%END REM
Function GetMatchingPropertyItem(parentDocument As NotesDocument, klerPropertyDocument As NotesDocument, propertyNumber As String) As NotesDocument
	
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	If parentDocument.IsDeleted Then
		Exit Function
	End If
	
	Set rmsDocumentCollection = parentDocument.Responses
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing And GetMatchingPropertyItem Is Nothing
		
		If (rmsDocument.Form(0) = "SupplementaryProperty" _
		Or rmsDocument.Form(0) = "SupplementaryMV" _
		Or rmsDocument.Form(0) = "SupplementaryFraudDoc" _
		Or rmsDocument.Form(0) = "SupplementaryBicycle") _
		And Not rmsDocument.IsDeleted Then
			Dim itemdescription As String
			If klerPropertyDocument.Hasitem("exhibit_desc" & propertyNumber) Then
				itemdescription = klerPropertyDocument.GetFirstItem("exhibit_desc" & propertyNumber).Values(0)
			Else
				If klerPropertyDocument.Hasitem("prop_desc" & propertyNumber) Then
					itemdescription = klerPropertyDocument.GetFirstItem("prop_desc" & propertyNumber).Values(0)
				End If
			End If
			
			
			If rmsDocument.Item(0) = itemdescription Or rmsDocument.VMake(0) = itemdescription Then
				Set GetMatchingPropertyItem = rmsDocument
			End If
			
		End If
		
		If GetMatchingPropertyItem Is Nothing _
		And rmsDocument.IsValid Then
			Set GetMatchingPropertyItem = GetMatchingPropertyItem(rmsDocument, klerPropertyDocument, propertyNumber)
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
End Function

'++LotusScript Development Environment:2:2:ProcessKlerKsarArrestee:1:8
Sub ProcessKlerKsarArrestee(klerKsarDocument As NotesDocument, occurrenceDocument As NotesDocument)
	
	On Error Goto ErrorHandle
	
	Dim klerKsarFieldMapping List As String
	Dim klerKsarField As NotesItem
	Dim i As Integer	
	Dim hasPersonDescriptors As Boolean
	Dim arresteeDocument As NotesDocument
	Dim arrestingOfficer As Officer
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument
	
	Dim evaluateTemp As Variant
	
	' Exit if there is no Arrestee.
	Set klerKsarField = klerKsarDocument.GetFirstItem("person_share1")
	If Not klerKsarField Is Nothing Then
		If klerKsarField.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	' Find existing Arrestee document.
	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	rmsKlerView.Refresh
	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerKsarDocument.CaseID(0), True)
	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	While Not rmsDocument Is Nothing
		
		If rmsDocument.Form(0) = "Person/Property" _
		And Not rmsDocument.IsDeleted Then
			Set klerKsarField = klerKsarDocument.GetFirstItem("person_share1")
			If Not klerKsarField Is Nothing Then
				If rmsDocument.KlerRecordID(0) = klerKsarField.Values(0) Then
					Set arresteeDocument = rmsDocument
				End If
			End If
		End If
		
		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	Wend
	
	If arresteeDocument Is Nothing Then
		Exit Sub
	End If
		
	' Arrest Flag
	Call arresteeDocument.RemoveItem("ArrestFlag")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "adult_cbox", "ArrestFlag", "A")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "juvenile_cbox", "ArrestFlag", "J")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "domviol_cbox", "ArrestFlag", "D")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "runaway_cbox", "ArrestFlag", "R")
	If klerKsarDocument.HasItem("juvenile_cbox") And klerKsarDocument.HasItem("domviol_cbox") Then
		If klerKsarDocument.juvenile_cbox(0) = "Y" And klerKsarDocument.domviol_cbox(0) = "Y" Then
			arresteeDocument.ArrestFlag = "K"
		End If
	End If
	
	' Type of Arrest
	Call arresteeDocument.RemoveItem("ArrestMethod")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "t_on_view_cbox", "ArrestMethod", "O")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "t_taken_into_cbox", "ArrestMethod", "T")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "t_runaway_cbox", "ArrestMethod", "R")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "t_not_taken_cbox", "ArrestMethod", "S")
	
	' Arrest Location
	evaluateTemp = Evaluate( _
	|StreetNumber := location_street_num;| & _
	|Street := @Trim(location_street_pre_dir + " " + location_street_name +  " " + location_street_category + " " + location_street_post_dir);| & _
	|LocDisplay := location_struct_num;| & _
	|@Implode(@Trim(@Implode(@Trim(StreetNumber:Street);" "):@Implode(@Trim(location_city:location_state);", "));", "):LocDisplay|, _
	klerKsarDocument)
	arresteeDocument.ArrestLocation = evaluateTemp(0)
	
	' Date and Time of Arrest
	Call ProcessKlerDateTimeFields(klerKsarDocument, arresteeDocument, "arr_date", "arr_time", "ArrestDateTime")
	
	' Arrestee Fields
	klerKsarFieldMapping("trans_num") = "ArrestTransNum"
	klerKsarFieldMapping("arrestee_num") = "ArresteeNumber"
	klerKsarFieldMapping("war_num") = "WarrantNumber"
	klerKsarFieldMapping("a_lname") = "Surname"
	klerKsarFieldMapping("a_fname") = "Given1"
	klerKsarFieldMapping("a_middle") = "Given2"	
	klerKsarFieldMapping("a_street_category") = "StType"
	klerKsarFieldMapping("a_street_name") = "StName"
	klerKsarFieldMapping("a_street_num") = "StNumber"
	klerKsarFieldMapping("a_struct_num") = "BuildingUnitIdentifier"
	klerKsarFieldMapping("a_street_pre_dir") = "StPreDirection"
	klerKsarFieldMapping("a_street_post_dir") = "StPostDirection"
	klerKsarFieldMapping("a_zip") = "PostalCode"
	klerKsarFieldMapping("a_city") = "TownCity"
	klerKsarFieldMapping("a_state") = "Prov"
	klerKsarFieldMapping("a_homephone") = "HomePhone"
	klerKsarFieldMapping("workphone") = "BusinessPhone"
	klerKsarFieldMapping("wore") = "ArresteeClothing"
	klerKsarFieldMapping("appearance") = "ArresteeAppearance"
	klerKsarFieldMapping("injuries") = "ArresteeInjuries"	
	klerKsarFieldMapping("miranda_by") = "ArresteeRightsNotifiedBy"
	klerKsarFieldMapping("approved_by") = "ArrestApprovedBy"
	klerKsarFieldMapping("race") = "Race"
	klerKsarFieldMapping("sex") = "Sex"
	klerKsarFieldMapping("ssn") = "SIN"
	klerKsarFieldMapping("drlic") = "DLNumber"
	klerKsarFieldMapping("drlic_st") = "DLIssuedBy"
	klerKsarFieldMapping("employer") = "Employer"
	klerKsarFieldMapping("other_text2") = "ArresteeBehaviorOther"
	Call ProcessKlerFields(klerKsarDocument, arresteeDocument, "", klerKsarFieldMapping)
	
	' Date of Birth
	If klerKsarDocument.HasItem("dob") Then
		If Isdate(klerKsarDocument.dob(0)) Then
			arresteeDocument.DOB = Cdat(klerKsarDocument.dob(0))
		End If
	End If
	
	' Place of Birth
	If klerKsarDocument.pob_state(0) <> "" Or klerKsarDocument.pob_country(0) <> "" Then
		arresteeDocument.PlaceOfBirth = Trim(klerKsarDocument.pob_state(0) & " " & klerKsarDocument.pob_country(0))
	End If
	
	' Warrant Date
	Call ProcessKlerDateTimeFields(klerKsarDocument, arresteeDocument, "war_issued_date", "", "WarrantDate")
	
	' Alias
	If klerKsarDocument.a_alias1(0) <> "" _
	Or klerKsarDocument.a_alias2(0) <> "" _
	Or klerKsarDocument.a_alias3(0) <> "" _
	Or klerKsarDocument.a_alias4(0) <> "" Then
		arresteeDocument.Alias = Fulltrim(Split(klerKsarDocument.a_alias1(0) & ";" & klerKsarDocument.a_alias2(0) & ";" & _
		klerKsarDocument.a_alias3(0) & ";" & klerKsarDocument.a_alias4(0), ";"))
	End If
	
	' Miranda / Rights Date Time
	Call ProcessKlerDateTimeFields(klerKsarDocument, arresteeDocument, "miranda_date", "miranda_time", "ArresteeRightsDateTime")
	
	' Person desc	
	Erase klerKsarFieldMapping
	klerKsarFieldMapping("kbi_casenum") = "CRCF"
	klerKsarFieldMapping("facialhair") = "FacialHair"
	klerKsarFieldMapping("teeth") = "Teeth"
	klerKsarFieldMapping("eye_appear") = "EyeAppearance"
	klerKsarFieldMapping("complexion") = "Complexion"
	klerKsarFieldMapping("build") = "Build"
	klerKsarFieldMapping("r_l_handed") = "RLHanded"
	klerKsarFieldMapping("speech") = "Speech"
	klerKsarFieldMapping("hair_style") = "HairStyle"
	klerKsarFieldMapping("hair_length") = "HairLength"
	klerKsarFieldMapping("hair") = "HairColour"
	klerKsarFieldMapping("eyes") = "EyeColour"
	klerKsarFieldMapping("ethnic") = "Ethnicity"
	Forall klerKsarFieldName In klerKsarFieldMapping
		
		Set klerKsarField = klerKsarDocument.GetFirstItem(Listtag(klerKsarFieldName))
		If Not klerKsarField Is Nothing Then
			If klerKsarField.Values(0) <> "" Then
				Call arresteeDocument.CopyItem(klerKsarField, klerKsarFieldName)
				hasPersonDescriptors = True
			End If
		End If
		
	End Forall
	
	' Glasses
	If klerKsarDocument.HasItem("glasses") Then
		If klerKsarDocument.glasses(0) = "Y" Then
			arresteeDocument.Glasses = "Glasses"
			hasPersonDescriptors = True
		End If
	End If
	
	' Height / Weight
	If klerKsarDocument.HasItem("hgt") Then
		If Isnumeric(klerKsarDocument.hgt(0)) Then
			arresteeDocument.Height = Cint(klerKsarDocument.hgt(0))
			hasPersonDescriptors = True
		End If
	End If
	If klerKsarDocument.HasItem("wgt") Then
		If Isnumeric(klerKsarDocument.wgt(0)) Then
			arresteeDocument.Weight = Cint(klerKsarDocument.wgt(0))
			hasPersonDescriptors = True
		End If
	End If
	
	' Residency
	If klerKsarDocument.res(0) <> "" Then
		If klerKsarDocument.res(0) = "R" Then			
			arresteeDocument.ResidentIndicator = "Resident"
		Else
			arresteeDocument.ResidentIndicator = "Non-Resident"
		End If
		hasPersonDescriptors = True
	End If
	
	' Scars / Tattoos
	If klerKsarDocument.scars1(0) <> "" _
	Or klerKsarDocument.scars2(0) <> "" _
	Or klerKsarDocument.scars3(0) <> "" Then
		
		arresteeDocument.MarksScarsTatoosFeatures = Fulltrim(Split(klerKsarDocument.scars1(0) & ";" & _
		klerKsarDocument.scars2(0) & ";" & klerKsarDocument.scars3(0), ";"))
		hasPersonDescriptors = True
		
	End If
	If klerKsarDocument.tattoos1(0) <> "" _
	Or klerKsarDocument.tattoos2(0) <> "" _
	Or klerKsarDocument.tattoos3(0) <> "" Then
		
		arresteeDocument.Tattoos = Fulltrim(Split(klerKsarDocument.tattoos1(0) & ";" & _
		klerKsarDocument.tattoos2(0) & ";" & klerKsarDocument.tattoos3(0), ";"))
		hasPersonDescriptors = True
		
	End If
	
	' Arrestee Armed With	
	Call arresteeDocument.RemoveItem("ArresteeArmed")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "handgun_cbox", 		"ArresteeArmed", "12")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "handgun_auto_cbox",	"ArresteeArmed", "12A")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "rifle_cbox",			"ArresteeArmed", "13")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "rifle_auto_cbox",		"ArresteeArmed", "13A")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "other_cbox1",			"ArresteeArmed", "15")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "other_auto_cbox",		"ArresteeArmed", "15A")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "shotgun_cbox",		"ArresteeArmed", "14")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "shortgun_auto_cbox",	"ArresteeArmed", "14A")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "lethal_cutting_in_cbox","ArresteeArmed", "16")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "unarmed_cbox",		"ArresteeArmed", "01")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "club_cbox",			"ArresteeArmed", "17")
	
	' Arrestee Behavior
	Call arresteeDocument.RemoveItem("ArresteeBehaviour")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "drunk_cbox", 			"ArresteeBehaviour", "Drunk")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "drinking_cbox",		"ArresteeBehaviour", "Drinking")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "injured_cbox",		"ArresteeBehaviour", "Injured")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "resisted_cbox",		"ArresteeBehaviour", "Resisted")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "profane_cbox",		"ArresteeBehaviour", "Profane")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "loud_cbox",			"ArresteeBehaviour", "Loud")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "bizarre_behav_cbox",	"ArresteeBehaviour", "Bizarre Behavior")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "suicidal_remark_cbox",	"ArresteeBehaviour", "Suicidal Remarks")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "cooperative_cbox",		"ArresteeBehaviour", "Cooperative")
	Call ProcessKlerCheckboxMulti(klerKsarDocument, arresteeDocument, "", "other_cbox2",			"ArresteeBehaviour", "Other")	
	
	' Parent / Guardian #1 Fields
	Erase klerKsarFieldMapping
	klerKsarFieldMapping("p1_employer") = "PGEmployer"
	klerKsarFieldMapping("p1_homephone") = "PGPhone1"
	klerKsarFieldMapping("p1_workphone") = "PGPhone2"
	Call ProcessKlerFields(klerKsarDocument, arresteeDocument, "", klerKsarFieldMapping)
	
	' Parent / Guardian #1 Name
	Dim parentGuardianName(1 To 3) As String	
	If klerKsarDocument.HasItem("p1_lname") Then		
		parentGuardianName(1) = klerKsarDocument.p1_lname(0)		
	End If
	If klerKsarDocument.HasItem("p1_fname") Then
		
		parentGuardianName(2) = klerKsarDocument.p1_fname(0)		
	End If
	If klerKsarDocument.HasItem("p1_middle") Then
		parentGuardianName(3) = klerKsarDocument.p1_middle(0)
	End If
	arresteeDocument.PGName = Implode(Fulltrim(parentGuardianName), " ")
	
	' Parent/Guardian #1 Address
	evaluateTemp = Evaluate( _
	|StreetNumber := p1_street_num;| & _
	|Street := @Trim(p1_street_pre_dir + " " + p1_street_name +  " " + p1_street_category + " " + p1_street_post_dir);| & _
	|LocDisplay := p1_struct_num;| & _
	|@Implode(@Trim(@Implode(@Trim(StreetNumber:Street);" "):@Implode(@Trim(p1_city:p1_state);", "));", "):LocDisplay|, _
	klerKsarDocument)
	arresteeDocument.PGAddress = evaluateTemp(0)	
	
	' Parent/Guardian #1 Employer Address
	evaluateTemp = Evaluate( _
	|StreetNumber := p1e_street_num;| & _
	|Street := @Trim(p1e_street_pre_dir + " " + p1e_street_name +  " " + p1e_street_category + " " + p1e_street_post_dir);| & _
	|LocDisplay := p1e_struct_num;| & _
	|@Implode(@Trim(@Implode(@Trim(StreetNumber:Street);" "):@Implode(@Trim(p1e_city:p1e_state);", "));", "):LocDisplay|, _
	klerKsarDocument)
	arresteeDocument.PGEmpAddress = evaluateTemp(0)
	
	' Additional Parent/Guardian Yes/No
	If klerKsarDocument.HasItem("p2_lname") Then
		If klerKsarDocument.p2_lname(0) <> "" Then
			arresteeDocument.APGInfo = "Yes"
		End If
	End If
	
	' Parent / Guardian #2 Fields
	Erase klerKsarFieldMapping
	klerKsarFieldMapping("p2_employer") = "APGEmployer"
	klerKsarFieldMapping("p2_homephone") = "APGPhone1"
	klerKsarFieldMapping("p2_workphone") = "APGPhone2"
	Call ProcessKlerFields(klerKsarDocument, arresteeDocument, "", klerKsarFieldMapping)
	
	' Parent / Guardian #2 Name
	Erase parentGuardianName
	If klerKsarDocument.HasItem("p2_lname") Then		
		parentGuardianName(1) = klerKsarDocument.p2_lname(0)		
	End If
	If klerKsarDocument.HasItem("p2_fname") Then
		
		parentGuardianName(2) = klerKsarDocument.p2_fname(0)		
	End If
	If klerKsarDocument.HasItem("p2_middle") Then
		parentGuardianName(3) = klerKsarDocument.p2_middle(0)
	End If
	arresteeDocument.APGName = Implode(Fulltrim(parentGuardianName), " ")
	
	' Parent/Guardian #2 Address
	evaluateTemp = Evaluate( _
	|StreetNumber := p2_street_num;| & _
	|Street := @Trim(p2_street_pre_dir + " " + p2_street_name +  " " + p2_street_category + " " + p2_street_post_dir);| & _
	|LocDisplay := p2_struct_num;| & _
	|@Implode(@Trim(@Implode(@Trim(StreetNumber:Street);" "):@Implode(@Trim(p2_city:p2_state);", "));", "):LocDisplay|, _
	klerKsarDocument)
	arresteeDocument.APGAddress = evaluateTemp(0)	
	
	' Parent/Guardian #2 Employer Address
	evaluateTemp = Evaluate( _
	|StreetNumber := p2e_street_num;| & _
	|Street := @Trim(p2e_street_pre_dir + " " + p2e_street_name +  " " + p2e_street_category + " " + p2e_street_post_dir);| & _
	|LocDisplay := p2e_struct_num;| & _
	|@Implode(@Trim(@Implode(@Trim(StreetNumber:Street);" "):@Implode(@Trim(p2e_city:p2e_state);", "));", "):LocDisplay|, _
	klerKsarDocument)
	arresteeDocument.APGEmpAddress = evaluateTemp(0)
	
	' Release Fields
	Erase klerKsarFieldMapping
	klerKsarFieldMapping("releasing_official") = "PrisonerReleasedBy"
	klerKsarFieldMapping("comments") = "PrisonerReleasedComments"
	Call ProcessKlerFields(klerKsarDocument, arresteeDocument, "", klerKsarFieldMapping)
	
	' Type of Release
	Call arresteeDocument.RemoveItem("FormOfRelease")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "parole_cbox", "FormOfRelease", "Parole")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "bond_cbox", "FormOfRelease", "Bond")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "court_order_cbox", "FormOfRelease", "Court Order")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "nta_cbox2", "FormOfRelease", "Notice to Appear")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "no_charge_cbox", "FormOfRelease", "No Charge Filed")
	klerKsarFieldMapping("other_text5") = ""
	If klerKsarDocument.HasItem("other_cbox5") Then
		If klerKsarDocument.other_cbox5(0) = "Y" Then
			If klerKsarDocument.HasItem("other_text5") Then
				arresteeDocument.FormOfRelease = klerKsarDocument.other_text5(0)
			End If
		End If
	End If
	
	' Disposition of Juvenile Arrest or Runaway
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "d_handle_cbox", "FormOfRelease", "H")
	Call ProcessKlerCheckbox(klerKsarDocument, arresteeDocument, "", "d_referred_cbox", "FormOfRelease", "R")
	
	' Release Date / Time
	Call ProcessKlerDateTimeFields(klerKsarDocument, arresteeDocument, "release_date", "release_time", "PrisonerReleasedDateTime")
	
	' Arresting Officer
	Set klerKsarField = klerKsarDocument.GetFirstItem("rep_officer_badge")
	If Not klerKsarField Is Nothing Then
		Set arrestingOfficer = GetOfficerByBadgeNumber(CStr(klerKsarField.Values(0)))
	End If
	If Not arrestingOfficer Is Nothing Then
		arresteeDocument.ArrestingOfficer = arrestingOfficer.Name
		arresteeDocument.ArrestingOfficerBadge = arrestingOfficer.Badge
		arresteeDocument.ArrestingOfficerDistrict = arrestingOfficer.District
		arresteeDocument.ArrestingOfficerPlatoon = arrestingOfficer.Platoon
		arresteeDocument.ArrestingOfficerRank = arrestingOfficer.Rank
	Else
		Erase klerKsarFieldMapping
		klerKsarFieldMapping("rep_officer_name1") = "ReportingOfficer"
		klerKsarFieldMapping("rep_officer_badge") = "ReportingOfficerBadge"	
		Call ProcessKlerFields(klerKsarDocument, arresteeDocument, "", klerKsarFieldMapping)
	End If
	
	If occurrenceDocument.HasItem("TimeDateCommitted") Then
		arresteeDocument.TimeDateCommitted = occurrenceDocument.TimeDateCommitted(0)
	Else
		arresteeDocument.TimeDateCommitted = ""
	End If
	
	' Add Arrest Details subform if needed.
	arresteeDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Arrest Details" & ";" & Implode(arresteeDocument.LoadedSubForms,";"),";")))
	
	' Add Person Descriptors subform if needed.
	If hasPersonDescriptors Then
		arresteeDocument.LoadedSubForms = Fulltrim(Arrayunique(Split("Person Descriptors" & ";" & Implode(arresteeDocument.LoadedSubForms,";"),";")))
	End If	
		
	' Save Arrestee document.
	Call SetUpRmsDocument(arresteeDocument)
	Call arresteeDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
	|Module: | & Cstr( Getthreadinfo(1) ) & |, Line: | & Cstr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:2:ProcessKlerHp250Property:1:8
Sub ProcessKlerHp250Property(klerHp250Document As NotesDocument, occurrenceDocument As NotesDocument, propertyNumber As String)
	
	On Error GoTo ErrorHandle
	
	Dim rmsKlerView As NotesView
	Dim rmsDocumentCollection As NotesDocumentCollection
	Dim rmsDocument As NotesDocument	
	Dim klerHp250FieldMapping List As String
	Dim propertyDocument As NotesDocument
	Dim klerHp250Field As NotesItem
	Dim klerPicklist() As String
	Dim klerPicklistCount As Integer
	Dim klerPicklistSelection As Variant
	
	Dim currentWorkspace As NotesUIWorkspace
	
	' Exit if there is no property entered on the KSOR form with this number.
	Set klerHp250Field = klerHp250Document.GetFirstItem("exhibit_desc" & propertyNumber)
	If Not klerHp250Field Is Nothing Then
		If klerHp250Field.Values(0) = "" Then
			Exit Sub
		End If
	Else
		Exit Sub
	End If
	
	Set propertyDocument = GetMatchingPropertyItem(occurrenceDocument, klerHp250Document, propertyNumber)
	
	'	Set rmsDocumentCollection = occurrenceDocument.Responses
	'	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	'	While Not rmsDocument Is Nothing
	'		
	'		If rmsDocument.Form(0) = "SupplementaryProperty" _
	'		Or rmsDocument.Form(0) = "SupplementaryMV" _
	'		Or rmsDocument.Form(0) = "SupplementaryFraudDoc" _
	'		Or rmsDocument.Form(0) = "SupplementaryBicycle" Then
	'		
	'			If rmsDocument.Item(0) = klerHp250Document.GetFirstItem("exhibit_desc" & propertyNumber).Values(0) Then
	'				Set propertyDocument = rmsDocument
	'End If		
	'		
	'		End If
	'			
	'		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	'	Wend

	%rem	
	Dim dialogDocument As NotesDocument
	Set dialogDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
	dialogDocument.Choices = klerPicklist
	dialogDocument.Prompt = "If this Evidence Custody Receipt property, " & _
	klerHp250Document.GetFirstItem("exhibit_desc" & propertyNumber).Values(0) & _
	" is also present on the KSOR, please select that property here."
	
	Set currentWorkspace = New NotesUIWorkspace
	If propertyDocument Is Nothing And klerPicklistCount > 0 Then
		
		
		If currentWorkspace.DialogBox("(Dialog - Select Option)", True, True, False, False, False, False, "Select the Property", dialogDocument) Then
			Set propertyDocument = occurrenceDocument.ParentDatabase.GetDocumentByUnid(dialogDocument.ReturnValue(0))
		End If
		
'		klerPicklistSelection = currentWorkspace.Prompt(PROMPT_OKCANCELLIST, _
'		"Select the Property", _
'		"If this Evidence Custody Receipt property, " & klerHp250Document.GetFirstItem("exhibit_desc" & propertyNumber).Values(0) & _
'		" is also present on the KSOR, please select that property here.", _
'		klerPicklist(1), klerPicklist)
'		
'		If Not IsEmpty(klerPicklistSelection) Then
'			
'			Set propertyDocument = occurrenceDocument.ParentDatabase.GetDocumentByUnid(klerPicklistSelection(0))
'			
'		End If
		
	End If
	%end rem 
	
	'	Set rmsKlerView = occurrenceDocument.ParentDatabase.GetView("KLER Mapping")
	'	rmsKlerView.Refresh	
	'	Set rmsDocumentCollection = rmsKlerView.GetAllDocumentsByKey(klerHp250Document.CaseID(0), True)
	'	Set rmsDocument = rmsDocumentCollection.GetFirstDocument
	'	While Not rmsDocument Is Nothing
	'		
	'		If rmsDocument.Form(0) = "SupplementaryProperty" _
	'		Or rmsDocument.Form(0) = "SupplementaryMV" _
	'		Or rmsDocument.Form(0) = "SupplementaryFraudDoc" _
	'		Or rmsDocument.Form(0) = "SupplementaryBicycle" Then
	'			
	'			If rmsDocument.HasItem("KLERHP250PropertyNumber") Then
	'				If rmsDocument.KLERHP250PropertyNumber(0) = klerHp250Document.GuidVal(0) & "Property" & propertyNumber Then
	'					Set propertyDocument = rmsDocument
	'				End If
	'			End If
	'		End If
	'		
	'		Set rmsDocument = rmsDocumentCollection.GetNextDocument(rmsDocument)
	'	Wend
	
	If propertyDocument Is Nothing Then
		
		Set propertyDocument = New NotesDocument(occurrenceDocument.ParentDatabase)
		propertyDocument.Form = "SupplementaryProperty"
		propertyDocument.OccurrenceNumber = occurrenceDocument.OccurrenceNumber(0)
		
		' Get key fields to link RMS Person Document and KLER Person Document.
		propertyDocument.KLERCaseID = klerHp250Document.CaseID(0)
		propertyDocument.KLERGUID = klerHp250Document.GuidVal(0)
		
		Call propertyDocument.MakeResponse(occurrenceDocument)
	End If 
	
	If GetKibrsSubmitDefault Then
		If Not propertyDocument.HasItem("KIBRS_Submit") Then
			propertyDocument.KIBRS_Submit = "Y"
		End If
	End If
	
	propertyDocument.KLERHP250PropertyNumber = klerHp250Document.GuidVal(0) & "Property" & propertyNumber
	
	' Handle regular Property fields.
	klerHp250FieldMapping("exhibit_desc") = "Item"
	klerHp250FieldMapping("exhibit_num") = "PPropTagNum"	
	Call ProcessKlerFields(klerHp250Document, propertyDocument, propertyNumber, klerHp250FieldMapping)	
	
	Set klerHp250Field = klerHp250Document.GetFirstItem("num_items" & propertyNumber)
	If Not klerHp250Field Is Nothing Then
		If IsNumeric(klerHp250Field.Values(0)) Then
			propertyDocument.Quantity = CInt(klerHp250Field.Values(0))
		End If
	End If
	
	Call SetUpRmsDocument(propertyDocument)
	
	' Officer
	Dim reportingOfficer As Officer
	Set klerHp250Field = klerHp250Document.GetFirstItem("send_to_badge")
	If Not klerHp250Field Is Nothing Then
		Set reportingOfficer = GetOfficerByBadgeNumber(CStr(klerHp250Field.Values(0)))
	End If
	If Not reportingOfficer Is Nothing Then
		propertyDocument.ReportingOfficer = reportingOfficer.Name
		propertyDocument.ReportingOfficerBadge = reportingOfficer.Badge
		propertyDocument.ReportingOfficerDistrict = reportingOfficer.District
		propertyDocument.ReportingOfficerPlatoon = reportingOfficer.Platoon
		propertyDocument.ReportingOfficerRank = reportingOfficer.Rank
	Else
		Erase klerHp250FieldMapping
		klerHp250FieldMapping("send_to_name") = "ReportingOfficer"
		klerHp250FieldMapping("send_to_badge") = "ReportingOfficerBadge"
		klerHp250FieldMapping("send_to_zone") = "ReportingOfficerDistrict"
		klerHp250FieldMapping("send_to_troop") = "ReportingOfficerPlatoon"
		Call ProcessKlerFields(klerHp250Document, propertyDocument, "", klerHp250FieldMapping)
	End If
	
	' Save Property document.	
	Call propertyDocument.Save(False, False)
	
	Exit Sub
	
ErrorHandle:
	
	Error Err, Error & Chr(13) &_
|Module: | & CStr( GetThreadInfo(1) ) & |, Line: | & CStr(Erl)
	
	Exit Sub
	
End Sub

'++LotusScript Development Environment:2:1:GetKlerDefaultField:5:8
%REM
	Function GetKlerDefaultField
	Description: Comments for Function
%END REM
Function GetKlerDefaultField(klerFieldName As String) As String
	
	Dim keyHandle As Long
	Dim returnType As Long
	Dim lpReturnedString As String*127
	Dim returnSize As Integer
	
	returnSize = 126
	
	If RegOpenKeyEx(HKEY_CURRENT_USER, "Software\Kansas Highway Patrol\KLER\MainMRU\Case", 0, _
	KEY_READ, keyHandle) = ERROR_SUCCESS Then
		
		If RegQueryValueEx(keyHandle, klerFieldName, 0, returnType, lpReturnedString, _
		returnSize) = ERROR_SUCCESS Then
			
			GetKlerDefaultField = Left$(lpReturnedString, returnSize-1)
			
		End If
		
	End If
	
End Function

'++LotusScript Development Environment:2:1:KlerViewOnly:5:8
%REM
	Function KlerViewOnly
	Description: Comments for Function
%END REM
Function KlerViewOnly(occurrenceDocument As NotesDocument)
	
	Dim currentSession As NotesSession
	Dim currentDatabase As NotesDatabase
	
	Dim klerWrapper As KlerWrapper
	
	' Get handle to current databse.
	Set currentSession = New NotesSession
	Set currentDatabase = currentSession.CurrentDatabase
	
	' Create new KLER wrapper object based on Occurrence document.
	Set klerWrapper = New KlerWrapper(occurrenceDocument, False)
	
	' Detach existing KLER file.
	Call klerWrapper.DetachXmlFile
	
	' View KLER file.
	Call klerWrapper.ViewXmlFile
	
End Function

























